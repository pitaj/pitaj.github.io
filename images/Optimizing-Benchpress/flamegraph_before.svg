<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="933.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="933.00"> </text><svg id="frames" x="10" width="1180"><g><title>core::ops::function::FnMut::call_mut (271 samples, 0.17%)</title><rect x="0.1389%" y="741" width="0.1651%" height="15" fill="rgb(227,0,7)"/><text x="0.3889%" y="751.50"></text></g><g><title>compiler::parse::expression::expression (271 samples, 0.17%)</title><rect x="0.1389%" y="725" width="0.1651%" height="15" fill="rgb(217,0,24)"/><text x="0.3889%" y="735.50"></text></g><g><title>nom::branch::alt::{{closure}} (271 samples, 0.17%)</title><rect x="0.1389%" y="709" width="0.1651%" height="15" fill="rgb(221,193,54)"/><text x="0.3889%" y="719.50"></text></g><g><title>&lt;(A,B,C,D,E) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (271 samples, 0.17%)</title><rect x="0.1389%" y="693" width="0.1651%" height="15" fill="rgb(248,212,6)"/><text x="0.3889%" y="703.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (271 samples, 0.17%)</title><rect x="0.1389%" y="677" width="0.1651%" height="15" fill="rgb(208,68,35)"/><text x="0.3889%" y="687.50"></text></g><g><title>core::ops::function::FnMut::call_mut (271 samples, 0.17%)</title><rect x="0.1389%" y="661" width="0.1651%" height="15" fill="rgb(232,128,0)"/><text x="0.3889%" y="671.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (610 samples, 0.37%)</title><rect x="0.0816%" y="837" width="0.3716%" height="15" fill="rgb(207,160,47)"/><text x="0.3316%" y="847.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (610 samples, 0.37%)</title><rect x="0.0816%" y="821" width="0.3716%" height="15" fill="rgb(228,23,34)"/><text x="0.3316%" y="831.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (516 samples, 0.31%)</title><rect x="0.1389%" y="805" width="0.3143%" height="15" fill="rgb(218,30,26)"/><text x="0.3889%" y="815.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (516 samples, 0.31%)</title><rect x="0.1389%" y="789" width="0.3143%" height="15" fill="rgb(220,122,19)"/><text x="0.3889%" y="799.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (516 samples, 0.31%)</title><rect x="0.1389%" y="773" width="0.3143%" height="15" fill="rgb(250,228,42)"/><text x="0.3889%" y="783.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (516 samples, 0.31%)</title><rect x="0.1389%" y="757" width="0.3143%" height="15" fill="rgb(240,193,28)"/><text x="0.3889%" y="767.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (245 samples, 0.15%)</title><rect x="0.3040%" y="741" width="0.1493%" height="15" fill="rgb(216,20,37)"/><text x="0.5540%" y="751.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (245 samples, 0.15%)</title><rect x="0.3040%" y="725" width="0.1493%" height="15" fill="rgb(206,188,39)"/><text x="0.5540%" y="735.50"></text></g><g><title>core::ops::function::FnMut::call_mut (245 samples, 0.15%)</title><rect x="0.3040%" y="709" width="0.1493%" height="15" fill="rgb(217,207,13)"/><text x="0.5540%" y="719.50"></text></g><g><title>compiler::parse::expression::expression (245 samples, 0.15%)</title><rect x="0.3040%" y="693" width="0.1493%" height="15" fill="rgb(231,73,38)"/><text x="0.5540%" y="703.50"></text></g><g><title>nom::branch::alt::{{closure}} (245 samples, 0.15%)</title><rect x="0.3040%" y="677" width="0.1493%" height="15" fill="rgb(225,20,46)"/><text x="0.5540%" y="687.50"></text></g><g><title>&lt;(A,B,C,D,E) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (245 samples, 0.15%)</title><rect x="0.3040%" y="661" width="0.1493%" height="15" fill="rgb(210,31,41)"/><text x="0.5540%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (245 samples, 0.15%)</title><rect x="0.3040%" y="645" width="0.1493%" height="15" fill="rgb(221,200,47)"/><text x="0.5540%" y="655.50"></text></g><g><title>core::ops::function::FnMut::call_mut (245 samples, 0.15%)</title><rect x="0.3040%" y="629" width="0.1493%" height="15" fill="rgb(226,26,5)"/><text x="0.5540%" y="639.50"></text></g><g><title>core::ops::function::FnMut::call_mut (170 samples, 0.10%)</title><rect x="0.4545%" y="773" width="0.1036%" height="15" fill="rgb(249,33,26)"/><text x="0.7045%" y="783.50"></text></g><g><title>compiler::parse::expression::expression (170 samples, 0.10%)</title><rect x="0.4545%" y="757" width="0.1036%" height="15" fill="rgb(235,183,28)"/><text x="0.7045%" y="767.50"></text></g><g><title>nom::branch::alt::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="741" width="0.1036%" height="15" fill="rgb(221,5,38)"/><text x="0.7045%" y="751.50"></text></g><g><title>&lt;(A,B,C,D,E) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (170 samples, 0.10%)</title><rect x="0.4545%" y="725" width="0.1036%" height="15" fill="rgb(247,18,42)"/><text x="0.7045%" y="735.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (170 samples, 0.10%)</title><rect x="0.4545%" y="709" width="0.1036%" height="15" fill="rgb(241,131,45)"/><text x="0.7045%" y="719.50"></text></g><g><title>core::ops::function::FnMut::call_mut (170 samples, 0.10%)</title><rect x="0.4545%" y="693" width="0.1036%" height="15" fill="rgb(249,31,29)"/><text x="0.7045%" y="703.50"></text></g><g><title>compiler::parse::expression::path (170 samples, 0.10%)</title><rect x="0.4545%" y="677" width="0.1036%" height="15" fill="rgb(225,111,53)"/><text x="0.7045%" y="687.50"></text></g><g><title>nom::branch::alt::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="661" width="0.1036%" height="15" fill="rgb(238,160,17)"/><text x="0.7045%" y="671.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (170 samples, 0.10%)</title><rect x="0.4545%" y="645" width="0.1036%" height="15" fill="rgb(214,148,48)"/><text x="0.7045%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (170 samples, 0.10%)</title><rect x="0.4545%" y="629" width="0.1036%" height="15" fill="rgb(232,36,49)"/><text x="0.7045%" y="639.50"></text></g><g><title>nom::combinator::map::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="613" width="0.1036%" height="15" fill="rgb(209,103,24)"/><text x="0.7045%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (170 samples, 0.10%)</title><rect x="0.4545%" y="597" width="0.1036%" height="15" fill="rgb(229,88,8)"/><text x="0.7045%" y="607.50"></text></g><g><title>nom::sequence::pair::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="581" width="0.1036%" height="15" fill="rgb(213,181,19)"/><text x="0.7045%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (170 samples, 0.10%)</title><rect x="0.4545%" y="565" width="0.1036%" height="15" fill="rgb(254,191,54)"/><text x="0.7045%" y="575.50"></text></g><g><title>nom::multi::separated_list1::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="549" width="0.1036%" height="15" fill="rgb(241,83,37)"/><text x="0.7045%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (170 samples, 0.10%)</title><rect x="0.4545%" y="533" width="0.1036%" height="15" fill="rgb(233,36,39)"/><text x="0.7045%" y="543.50"></text></g><g><title>nom::combinator::map::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="517" width="0.1036%" height="15" fill="rgb(226,3,54)"/><text x="0.7045%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (170 samples, 0.10%)</title><rect x="0.4545%" y="501" width="0.1036%" height="15" fill="rgb(245,192,40)"/><text x="0.7045%" y="511.50"></text></g><g><title>core::ops::function::FnMut::call_mut (170 samples, 0.10%)</title><rect x="0.4545%" y="485" width="0.1036%" height="15" fill="rgb(238,167,29)"/><text x="0.7045%" y="495.50"></text></g><g><title>compiler::parse::expression::identifier (170 samples, 0.10%)</title><rect x="0.4545%" y="469" width="0.1036%" height="15" fill="rgb(232,182,51)"/><text x="0.7045%" y="479.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="453" width="0.1036%" height="15" fill="rgb(231,60,39)"/><text x="0.7045%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (170 samples, 0.10%)</title><rect x="0.4545%" y="437" width="0.1036%" height="15" fill="rgb(208,69,12)"/><text x="0.7045%" y="447.50"></text></g><g><title>nom::multi::many1_count::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="421" width="0.1036%" height="15" fill="rgb(235,93,37)"/><text x="0.7045%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (170 samples, 0.10%)</title><rect x="0.4545%" y="405" width="0.1036%" height="15" fill="rgb(213,116,39)"/><text x="0.7045%" y="415.50"></text></g><g><title>nom::branch::alt::{{closure}} (170 samples, 0.10%)</title><rect x="0.4545%" y="389" width="0.1036%" height="15" fill="rgb(222,207,29)"/><text x="0.7045%" y="399.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (170 samples, 0.10%)</title><rect x="0.4545%" y="373" width="0.1036%" height="15" fill="rgb(206,96,30)"/><text x="0.7045%" y="383.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (172 samples, 0.10%)</title><rect x="0.6731%" y="501" width="0.1048%" height="15" fill="rgb(218,138,4)"/><text x="0.9231%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,282 samples, 0.78%)</title><rect x="0.0037%" y="853" width="0.7810%" height="15" fill="rgb(250,191,14)"/><text x="0.2537%" y="863.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (544 samples, 0.33%)</title><rect x="0.4532%" y="837" width="0.3314%" height="15" fill="rgb(239,60,40)"/><text x="0.7032%" y="847.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (544 samples, 0.33%)</title><rect x="0.4532%" y="821" width="0.3314%" height="15" fill="rgb(206,27,48)"/><text x="0.7032%" y="831.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (542 samples, 0.33%)</title><rect x="0.4545%" y="805" width="0.3302%" height="15" fill="rgb(225,35,8)"/><text x="0.7045%" y="815.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (542 samples, 0.33%)</title><rect x="0.4545%" y="789" width="0.3302%" height="15" fill="rgb(250,213,24)"/><text x="0.7045%" y="799.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (372 samples, 0.23%)</title><rect x="0.5580%" y="773" width="0.2266%" height="15" fill="rgb(247,123,22)"/><text x="0.8080%" y="783.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (372 samples, 0.23%)</title><rect x="0.5580%" y="757" width="0.2266%" height="15" fill="rgb(231,138,38)"/><text x="0.8080%" y="767.50"></text></g><g><title>core::ops::function::FnMut::call_mut (372 samples, 0.23%)</title><rect x="0.5580%" y="741" width="0.2266%" height="15" fill="rgb(231,145,46)"/><text x="0.8080%" y="751.50"></text></g><g><title>compiler::parse::expression::expression (372 samples, 0.23%)</title><rect x="0.5580%" y="725" width="0.2266%" height="15" fill="rgb(251,118,11)"/><text x="0.8080%" y="735.50"></text></g><g><title>nom::branch::alt::{{closure}} (372 samples, 0.23%)</title><rect x="0.5580%" y="709" width="0.2266%" height="15" fill="rgb(217,147,25)"/><text x="0.8080%" y="719.50"></text></g><g><title>&lt;(A,B,C,D,E) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (372 samples, 0.23%)</title><rect x="0.5580%" y="693" width="0.2266%" height="15" fill="rgb(247,81,37)"/><text x="0.8080%" y="703.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (372 samples, 0.23%)</title><rect x="0.5580%" y="677" width="0.2266%" height="15" fill="rgb(209,12,38)"/><text x="0.8080%" y="687.50"></text></g><g><title>core::ops::function::FnMut::call_mut (372 samples, 0.23%)</title><rect x="0.5580%" y="661" width="0.2266%" height="15" fill="rgb(227,1,9)"/><text x="0.8080%" y="671.50"></text></g><g><title>compiler::parse::expression::path (224 samples, 0.14%)</title><rect x="0.6482%" y="645" width="0.1365%" height="15" fill="rgb(248,47,43)"/><text x="0.8982%" y="655.50"></text></g><g><title>nom::branch::alt::{{closure}} (224 samples, 0.14%)</title><rect x="0.6482%" y="629" width="0.1365%" height="15" fill="rgb(221,10,30)"/><text x="0.8982%" y="639.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (224 samples, 0.14%)</title><rect x="0.6482%" y="613" width="0.1365%" height="15" fill="rgb(210,229,1)"/><text x="0.8982%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (224 samples, 0.14%)</title><rect x="0.6482%" y="597" width="0.1365%" height="15" fill="rgb(222,148,37)"/><text x="0.8982%" y="607.50"></text></g><g><title>nom::combinator::map::{{closure}} (224 samples, 0.14%)</title><rect x="0.6482%" y="581" width="0.1365%" height="15" fill="rgb(234,67,33)"/><text x="0.8982%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (224 samples, 0.14%)</title><rect x="0.6482%" y="565" width="0.1365%" height="15" fill="rgb(247,98,35)"/><text x="0.8982%" y="575.50"></text></g><g><title>nom::sequence::pair::{{closure}} (224 samples, 0.14%)</title><rect x="0.6482%" y="549" width="0.1365%" height="15" fill="rgb(247,138,52)"/><text x="0.8982%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (224 samples, 0.14%)</title><rect x="0.6482%" y="533" width="0.1365%" height="15" fill="rgb(213,79,30)"/><text x="0.8982%" y="543.50"></text></g><g><title>nom::multi::separated_list1::{{closure}} (183 samples, 0.11%)</title><rect x="0.6731%" y="517" width="0.1115%" height="15" fill="rgb(246,177,23)"/><text x="0.9231%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (228 samples, 0.14%)</title><rect x="0.7846%" y="405" width="0.1389%" height="15" fill="rgb(230,62,27)"/><text x="1.0346%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (228 samples, 0.14%)</title><rect x="0.7846%" y="389" width="0.1389%" height="15" fill="rgb(216,154,8)"/><text x="1.0346%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (228 samples, 0.14%)</title><rect x="0.7846%" y="373" width="0.1389%" height="15" fill="rgb(244,35,45)"/><text x="1.0346%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (228 samples, 0.14%)</title><rect x="0.7846%" y="357" width="0.1389%" height="15" fill="rgb(251,115,12)"/><text x="1.0346%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (228 samples, 0.14%)</title><rect x="0.7846%" y="341" width="0.1389%" height="15" fill="rgb(240,54,50)"/><text x="1.0346%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (228 samples, 0.14%)</title><rect x="0.7846%" y="325" width="0.1389%" height="15" fill="rgb(233,84,52)"/><text x="1.0346%" y="335.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (228 samples, 0.14%)</title><rect x="0.7846%" y="309" width="0.1389%" height="15" fill="rgb(207,117,47)"/><text x="1.0346%" y="319.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (228 samples, 0.14%)</title><rect x="0.7846%" y="293" width="0.1389%" height="15" fill="rgb(249,43,39)"/><text x="1.0346%" y="303.50"></text></g><g><title>compiler::generate::generator::gen_body (228 samples, 0.14%)</title><rect x="0.7846%" y="277" width="0.1389%" height="15" fill="rgb(209,38,44)"/><text x="1.0346%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (228 samples, 0.14%)</title><rect x="0.7846%" y="261" width="0.1389%" height="15" fill="rgb(236,212,23)"/><text x="1.0346%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (228 samples, 0.14%)</title><rect x="0.7846%" y="245" width="0.1389%" height="15" fill="rgb(242,79,21)"/><text x="1.0346%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (228 samples, 0.14%)</title><rect x="0.7846%" y="229" width="0.1389%" height="15" fill="rgb(211,96,35)"/><text x="1.0346%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (228 samples, 0.14%)</title><rect x="0.7846%" y="213" width="0.1389%" height="15" fill="rgb(253,215,40)"/><text x="1.0346%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (341 samples, 0.21%)</title><rect x="0.7846%" y="613" width="0.2077%" height="15" fill="rgb(211,81,21)"/><text x="1.0346%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (341 samples, 0.21%)</title><rect x="0.7846%" y="597" width="0.2077%" height="15" fill="rgb(208,190,38)"/><text x="1.0346%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (341 samples, 0.21%)</title><rect x="0.7846%" y="581" width="0.2077%" height="15" fill="rgb(235,213,38)"/><text x="1.0346%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (341 samples, 0.21%)</title><rect x="0.7846%" y="565" width="0.2077%" height="15" fill="rgb(237,122,38)"/><text x="1.0346%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (341 samples, 0.21%)</title><rect x="0.7846%" y="549" width="0.2077%" height="15" fill="rgb(244,218,35)"/><text x="1.0346%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (341 samples, 0.21%)</title><rect x="0.7846%" y="533" width="0.2077%" height="15" fill="rgb(240,68,47)"/><text x="1.0346%" y="543.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (341 samples, 0.21%)</title><rect x="0.7846%" y="517" width="0.2077%" height="15" fill="rgb(210,16,53)"/><text x="1.0346%" y="527.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (341 samples, 0.21%)</title><rect x="0.7846%" y="501" width="0.2077%" height="15" fill="rgb(235,124,12)"/><text x="1.0346%" y="511.50"></text></g><g><title>compiler::generate::generator::gen_body (341 samples, 0.21%)</title><rect x="0.7846%" y="485" width="0.2077%" height="15" fill="rgb(224,169,11)"/><text x="1.0346%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (341 samples, 0.21%)</title><rect x="0.7846%" y="469" width="0.2077%" height="15" fill="rgb(250,166,2)"/><text x="1.0346%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (341 samples, 0.21%)</title><rect x="0.7846%" y="453" width="0.2077%" height="15" fill="rgb(242,216,29)"/><text x="1.0346%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (341 samples, 0.21%)</title><rect x="0.7846%" y="437" width="0.2077%" height="15" fill="rgb(230,116,27)"/><text x="1.0346%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (341 samples, 0.21%)</title><rect x="0.7846%" y="421" width="0.2077%" height="15" fill="rgb(228,99,48)"/><text x="1.0346%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (386 samples, 0.24%)</title><rect x="0.7846%" y="821" width="0.2351%" height="15" fill="rgb(253,11,6)"/><text x="1.0346%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (386 samples, 0.24%)</title><rect x="0.7846%" y="805" width="0.2351%" height="15" fill="rgb(247,143,39)"/><text x="1.0346%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (386 samples, 0.24%)</title><rect x="0.7846%" y="789" width="0.2351%" height="15" fill="rgb(236,97,10)"/><text x="1.0346%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (386 samples, 0.24%)</title><rect x="0.7846%" y="773" width="0.2351%" height="15" fill="rgb(233,208,19)"/><text x="1.0346%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (386 samples, 0.24%)</title><rect x="0.7846%" y="757" width="0.2351%" height="15" fill="rgb(216,164,2)"/><text x="1.0346%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (386 samples, 0.24%)</title><rect x="0.7846%" y="741" width="0.2351%" height="15" fill="rgb(220,129,5)"/><text x="1.0346%" y="751.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (386 samples, 0.24%)</title><rect x="0.7846%" y="725" width="0.2351%" height="15" fill="rgb(242,17,10)"/><text x="1.0346%" y="735.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (386 samples, 0.24%)</title><rect x="0.7846%" y="709" width="0.2351%" height="15" fill="rgb(242,107,0)"/><text x="1.0346%" y="719.50"></text></g><g><title>compiler::generate::generator::gen_body (386 samples, 0.24%)</title><rect x="0.7846%" y="693" width="0.2351%" height="15" fill="rgb(251,28,31)"/><text x="1.0346%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (386 samples, 0.24%)</title><rect x="0.7846%" y="677" width="0.2351%" height="15" fill="rgb(233,223,10)"/><text x="1.0346%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (386 samples, 0.24%)</title><rect x="0.7846%" y="661" width="0.2351%" height="15" fill="rgb(215,21,27)"/><text x="1.0346%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (386 samples, 0.24%)</title><rect x="0.7846%" y="645" width="0.2351%" height="15" fill="rgb(232,23,21)"/><text x="1.0346%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (386 samples, 0.24%)</title><rect x="0.7846%" y="629" width="0.2351%" height="15" fill="rgb(244,5,23)"/><text x="1.0346%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (427 samples, 0.26%)</title><rect x="0.7846%" y="853" width="0.2601%" height="15" fill="rgb(226,81,46)"/><text x="1.0346%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (427 samples, 0.26%)</title><rect x="0.7846%" y="837" width="0.2601%" height="15" fill="rgb(247,70,30)"/><text x="1.0346%" y="847.50"></text></g><g><title>compiler::generate::templates::expression (264 samples, 0.16%)</title><rect x="1.1154%" y="165" width="0.1608%" height="15" fill="rgb(212,68,19)"/><text x="1.3654%" y="175.50"></text></g><g><title>compiler::generate::templates::guard (264 samples, 0.16%)</title><rect x="1.1154%" y="149" width="0.1608%" height="15" fill="rgb(240,187,13)"/><text x="1.3654%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (410 samples, 0.25%)</title><rect x="1.0448%" y="293" width="0.2498%" height="15" fill="rgb(223,113,26)"/><text x="1.2948%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (410 samples, 0.25%)</title><rect x="1.0448%" y="277" width="0.2498%" height="15" fill="rgb(206,192,2)"/><text x="1.2948%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (410 samples, 0.25%)</title><rect x="1.0448%" y="261" width="0.2498%" height="15" fill="rgb(241,108,4)"/><text x="1.2948%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (410 samples, 0.25%)</title><rect x="1.0448%" y="245" width="0.2498%" height="15" fill="rgb(247,173,49)"/><text x="1.2948%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (410 samples, 0.25%)</title><rect x="1.0448%" y="229" width="0.2498%" height="15" fill="rgb(224,114,35)"/><text x="1.2948%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (410 samples, 0.25%)</title><rect x="1.0448%" y="213" width="0.2498%" height="15" fill="rgb(245,159,27)"/><text x="1.2948%" y="223.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (410 samples, 0.25%)</title><rect x="1.0448%" y="197" width="0.2498%" height="15" fill="rgb(245,172,44)"/><text x="1.2948%" y="207.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (410 samples, 0.25%)</title><rect x="1.0448%" y="181" width="0.2498%" height="15" fill="rgb(236,23,11)"/><text x="1.2948%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (549 samples, 0.33%)</title><rect x="1.0448%" y="501" width="0.3344%" height="15" fill="rgb(205,117,38)"/><text x="1.2948%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (549 samples, 0.33%)</title><rect x="1.0448%" y="485" width="0.3344%" height="15" fill="rgb(237,72,25)"/><text x="1.2948%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (549 samples, 0.33%)</title><rect x="1.0448%" y="469" width="0.3344%" height="15" fill="rgb(244,70,9)"/><text x="1.2948%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (549 samples, 0.33%)</title><rect x="1.0448%" y="453" width="0.3344%" height="15" fill="rgb(217,125,39)"/><text x="1.2948%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (549 samples, 0.33%)</title><rect x="1.0448%" y="437" width="0.3344%" height="15" fill="rgb(235,36,10)"/><text x="1.2948%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (549 samples, 0.33%)</title><rect x="1.0448%" y="421" width="0.3344%" height="15" fill="rgb(251,123,47)"/><text x="1.2948%" y="431.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (549 samples, 0.33%)</title><rect x="1.0448%" y="405" width="0.3344%" height="15" fill="rgb(221,13,13)"/><text x="1.2948%" y="415.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (549 samples, 0.33%)</title><rect x="1.0448%" y="389" width="0.3344%" height="15" fill="rgb(238,131,9)"/><text x="1.2948%" y="399.50"></text></g><g><title>compiler::generate::generator::gen_body (549 samples, 0.33%)</title><rect x="1.0448%" y="373" width="0.3344%" height="15" fill="rgb(211,50,8)"/><text x="1.2948%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (549 samples, 0.33%)</title><rect x="1.0448%" y="357" width="0.3344%" height="15" fill="rgb(245,182,24)"/><text x="1.2948%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (549 samples, 0.33%)</title><rect x="1.0448%" y="341" width="0.3344%" height="15" fill="rgb(242,14,37)"/><text x="1.2948%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (549 samples, 0.33%)</title><rect x="1.0448%" y="325" width="0.3344%" height="15" fill="rgb(246,228,12)"/><text x="1.2948%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (549 samples, 0.33%)</title><rect x="1.0448%" y="309" width="0.3344%" height="15" fill="rgb(213,55,15)"/><text x="1.2948%" y="319.50"></text></g><g><title>compiler::generate::templates::expression (165 samples, 0.10%)</title><rect x="1.3956%" y="197" width="0.1005%" height="15" fill="rgb(209,9,3)"/><text x="1.6456%" y="207.50"></text></g><g><title>compiler::generate::templates::guard (165 samples, 0.10%)</title><rect x="1.3956%" y="181" width="0.1005%" height="15" fill="rgb(230,59,30)"/><text x="1.6456%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (756 samples, 0.46%)</title><rect x="1.0448%" y="709" width="0.4605%" height="15" fill="rgb(209,121,21)"/><text x="1.2948%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (756 samples, 0.46%)</title><rect x="1.0448%" y="693" width="0.4605%" height="15" fill="rgb(220,109,13)"/><text x="1.2948%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (756 samples, 0.46%)</title><rect x="1.0448%" y="677" width="0.4605%" height="15" fill="rgb(232,18,1)"/><text x="1.2948%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (756 samples, 0.46%)</title><rect x="1.0448%" y="661" width="0.4605%" height="15" fill="rgb(215,41,42)"/><text x="1.2948%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (756 samples, 0.46%)</title><rect x="1.0448%" y="645" width="0.4605%" height="15" fill="rgb(224,123,36)"/><text x="1.2948%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (756 samples, 0.46%)</title><rect x="1.0448%" y="629" width="0.4605%" height="15" fill="rgb(240,125,3)"/><text x="1.2948%" y="639.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (756 samples, 0.46%)</title><rect x="1.0448%" y="613" width="0.4605%" height="15" fill="rgb(205,98,50)"/><text x="1.2948%" y="623.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (756 samples, 0.46%)</title><rect x="1.0448%" y="597" width="0.4605%" height="15" fill="rgb(205,185,37)"/><text x="1.2948%" y="607.50"></text></g><g><title>compiler::generate::generator::gen_body (756 samples, 0.46%)</title><rect x="1.0448%" y="581" width="0.4605%" height="15" fill="rgb(238,207,15)"/><text x="1.2948%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (756 samples, 0.46%)</title><rect x="1.0448%" y="565" width="0.4605%" height="15" fill="rgb(213,199,42)"/><text x="1.2948%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (756 samples, 0.46%)</title><rect x="1.0448%" y="549" width="0.4605%" height="15" fill="rgb(235,201,11)"/><text x="1.2948%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (756 samples, 0.46%)</title><rect x="1.0448%" y="533" width="0.4605%" height="15" fill="rgb(207,46,11)"/><text x="1.2948%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (756 samples, 0.46%)</title><rect x="1.0448%" y="517" width="0.4605%" height="15" fill="rgb(241,35,35)"/><text x="1.2948%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (207 samples, 0.13%)</title><rect x="1.3792%" y="501" width="0.1261%" height="15" fill="rgb(243,32,47)"/><text x="1.6292%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (207 samples, 0.13%)</title><rect x="1.3792%" y="485" width="0.1261%" height="15" fill="rgb(247,202,23)"/><text x="1.6292%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (207 samples, 0.13%)</title><rect x="1.3792%" y="469" width="0.1261%" height="15" fill="rgb(219,102,11)"/><text x="1.6292%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (207 samples, 0.13%)</title><rect x="1.3792%" y="453" width="0.1261%" height="15" fill="rgb(243,110,44)"/><text x="1.6292%" y="463.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (207 samples, 0.13%)</title><rect x="1.3792%" y="437" width="0.1261%" height="15" fill="rgb(222,74,54)"/><text x="1.6292%" y="447.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (207 samples, 0.13%)</title><rect x="1.3792%" y="421" width="0.1261%" height="15" fill="rgb(216,99,12)"/><text x="1.6292%" y="431.50"></text></g><g><title>compiler::generate::generator::gen_body (207 samples, 0.13%)</title><rect x="1.3792%" y="405" width="0.1261%" height="15" fill="rgb(226,22,26)"/><text x="1.6292%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (207 samples, 0.13%)</title><rect x="1.3792%" y="389" width="0.1261%" height="15" fill="rgb(217,163,10)"/><text x="1.6292%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (207 samples, 0.13%)</title><rect x="1.3792%" y="373" width="0.1261%" height="15" fill="rgb(213,25,53)"/><text x="1.6292%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (207 samples, 0.13%)</title><rect x="1.3792%" y="357" width="0.1261%" height="15" fill="rgb(252,105,26)"/><text x="1.6292%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (207 samples, 0.13%)</title><rect x="1.3792%" y="341" width="0.1261%" height="15" fill="rgb(220,39,43)"/><text x="1.6292%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (207 samples, 0.13%)</title><rect x="1.3792%" y="325" width="0.1261%" height="15" fill="rgb(229,68,48)"/><text x="1.6292%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (207 samples, 0.13%)</title><rect x="1.3792%" y="309" width="0.1261%" height="15" fill="rgb(252,8,32)"/><text x="1.6292%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (207 samples, 0.13%)</title><rect x="1.3792%" y="293" width="0.1261%" height="15" fill="rgb(223,20,43)"/><text x="1.6292%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (207 samples, 0.13%)</title><rect x="1.3792%" y="277" width="0.1261%" height="15" fill="rgb(229,81,49)"/><text x="1.6292%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (207 samples, 0.13%)</title><rect x="1.3792%" y="261" width="0.1261%" height="15" fill="rgb(236,28,36)"/><text x="1.6292%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (207 samples, 0.13%)</title><rect x="1.3792%" y="245" width="0.1261%" height="15" fill="rgb(249,185,26)"/><text x="1.6292%" y="255.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (207 samples, 0.13%)</title><rect x="1.3792%" y="229" width="0.1261%" height="15" fill="rgb(249,174,33)"/><text x="1.6292%" y="239.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (207 samples, 0.13%)</title><rect x="1.3792%" y="213" width="0.1261%" height="15" fill="rgb(233,201,37)"/><text x="1.6292%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (842 samples, 0.51%)</title><rect x="1.0448%" y="853" width="0.5129%" height="15" fill="rgb(221,78,26)"/><text x="1.2948%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (842 samples, 0.51%)</title><rect x="1.0448%" y="837" width="0.5129%" height="15" fill="rgb(250,127,30)"/><text x="1.2948%" y="847.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (842 samples, 0.51%)</title><rect x="1.0448%" y="821" width="0.5129%" height="15" fill="rgb(230,49,44)"/><text x="1.2948%" y="831.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (842 samples, 0.51%)</title><rect x="1.0448%" y="805" width="0.5129%" height="15" fill="rgb(229,67,23)"/><text x="1.2948%" y="815.50"></text></g><g><title>compiler::generate::generator::gen_body (842 samples, 0.51%)</title><rect x="1.0448%" y="789" width="0.5129%" height="15" fill="rgb(249,83,47)"/><text x="1.2948%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (842 samples, 0.51%)</title><rect x="1.0448%" y="773" width="0.5129%" height="15" fill="rgb(215,43,3)"/><text x="1.2948%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (842 samples, 0.51%)</title><rect x="1.0448%" y="757" width="0.5129%" height="15" fill="rgb(238,154,13)"/><text x="1.2948%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (842 samples, 0.51%)</title><rect x="1.0448%" y="741" width="0.5129%" height="15" fill="rgb(219,56,2)"/><text x="1.2948%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (842 samples, 0.51%)</title><rect x="1.0448%" y="725" width="0.5129%" height="15" fill="rgb(233,0,4)"/><text x="1.2948%" y="735.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (305 samples, 0.19%)</title><rect x="3.5205%" y="453" width="0.1858%" height="15" fill="rgb(235,30,7)"/><text x="3.7705%" y="463.50"></text></g><g><title>compiler::parse::tokens::interp_escaped (3,386 samples, 2.06%)</title><rect x="1.6533%" y="517" width="2.0627%" height="15" fill="rgb(250,79,13)"/><text x="1.9033%" y="527.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,386 samples, 2.06%)</title><rect x="1.6533%" y="501" width="2.0627%" height="15" fill="rgb(211,146,34)"/><text x="1.9033%" y="511.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,386 samples, 2.06%)</title><rect x="1.6533%" y="485" width="2.0627%" height="15" fill="rgb(228,22,38)"/><text x="1.9033%" y="495.50">&lt;..</text></g><g><title>nom::combinator::consumed::{{closure}} (1,815 samples, 1.11%)</title><rect x="2.6104%" y="469" width="1.1057%" height="15" fill="rgb(235,168,5)"/><text x="2.8604%" y="479.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (319 samples, 0.19%)</title><rect x="5.7665%" y="453" width="0.1943%" height="15" fill="rgb(221,155,16)"/><text x="6.0165%" y="463.50"></text></g><g><title>compiler::parse::tokens::interp_raw (3,686 samples, 2.25%)</title><rect x="3.7160%" y="517" width="2.2455%" height="15" fill="rgb(215,215,53)"/><text x="3.9660%" y="527.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,686 samples, 2.25%)</title><rect x="3.7160%" y="501" width="2.2455%" height="15" fill="rgb(223,4,10)"/><text x="3.9660%" y="511.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,686 samples, 2.25%)</title><rect x="3.7160%" y="485" width="2.2455%" height="15" fill="rgb(234,103,6)"/><text x="3.9660%" y="495.50">&lt;..</text></g><g><title>nom::combinator::consumed::{{closure}} (1,841 samples, 1.12%)</title><rect x="4.8400%" y="469" width="1.1215%" height="15" fill="rgb(227,97,0)"/><text x="5.0900%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,355 samples, 0.83%)</title><rect x="7.1829%" y="421" width="0.8254%" height="15" fill="rgb(234,150,53)"/><text x="7.4329%" y="431.50"></text></g><g><title>compiler::parse::tokens::legacy_else (3,362 samples, 2.05%)</title><rect x="5.9615%" y="517" width="2.0481%" height="15" fill="rgb(228,201,54)"/><text x="6.2115%" y="527.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,362 samples, 2.05%)</title><rect x="5.9615%" y="501" width="2.0481%" height="15" fill="rgb(222,22,37)"/><text x="6.2115%" y="511.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,362 samples, 2.05%)</title><rect x="5.9615%" y="485" width="2.0481%" height="15" fill="rgb(237,53,32)"/><text x="6.2115%" y="495.50">&lt;..</text></g><g><title>nom::combinator::recognize::{{closure}} (3,362 samples, 2.05%)</title><rect x="5.9615%" y="469" width="2.0481%" height="15" fill="rgb(233,25,53)"/><text x="6.2115%" y="479.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,362 samples, 2.05%)</title><rect x="5.9615%" y="453" width="2.0481%" height="15" fill="rgb(210,40,34)"/><text x="6.2115%" y="463.50">&lt;..</text></g><g><title>nom::sequence::delimited::{{closure}} (3,362 samples, 2.05%)</title><rect x="5.9615%" y="437" width="2.0481%" height="15" fill="rgb(241,220,44)"/><text x="6.2115%" y="447.50">n..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,303 samples, 0.79%)</title><rect x="9.2639%" y="421" width="0.7938%" height="15" fill="rgb(235,28,35)"/><text x="9.5139%" y="431.50"></text></g><g><title>compiler::parse::tokens::new_else (3,368 samples, 2.05%)</title><rect x="8.0096%" y="517" width="2.0517%" height="15" fill="rgb(210,56,17)"/><text x="8.2596%" y="527.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,368 samples, 2.05%)</title><rect x="8.0096%" y="501" width="2.0517%" height="15" fill="rgb(224,130,29)"/><text x="8.2596%" y="511.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,368 samples, 2.05%)</title><rect x="8.0096%" y="485" width="2.0517%" height="15" fill="rgb(235,212,8)"/><text x="8.2596%" y="495.50">&lt;..</text></g><g><title>nom::combinator::recognize::{{closure}} (3,368 samples, 2.05%)</title><rect x="8.0096%" y="469" width="2.0517%" height="15" fill="rgb(223,33,50)"/><text x="8.2596%" y="479.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,368 samples, 2.05%)</title><rect x="8.0096%" y="453" width="2.0517%" height="15" fill="rgb(219,149,13)"/><text x="8.2596%" y="463.50">&lt;..</text></g><g><title>nom::sequence::delimited::{{closure}} (3,368 samples, 2.05%)</title><rect x="8.0096%" y="437" width="2.0517%" height="15" fill="rgb(250,156,29)"/><text x="8.2596%" y="447.50">n..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,395 samples, 0.85%)</title><rect x="11.2955%" y="421" width="0.8498%" height="15" fill="rgb(216,193,19)"/><text x="11.5455%" y="431.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (17,231 samples, 10.50%)</title><rect x="1.6533%" y="629" width="10.4969%" height="15" fill="rgb(216,135,14)"/><text x="1.9033%" y="639.50">&lt;F as nom::inte..</text></g><g><title>core::ops::function::FnMut::call_mut (17,231 samples, 10.50%)</title><rect x="1.6533%" y="613" width="10.4969%" height="15" fill="rgb(241,47,5)"/><text x="1.9033%" y="623.50">core::ops::func..</text></g><g><title>compiler::parse::tokens::token (17,231 samples, 10.50%)</title><rect x="1.6533%" y="597" width="10.4969%" height="15" fill="rgb(233,42,35)"/><text x="1.9033%" y="607.50">compiler::parse..</text></g><g><title>nom::branch::alt::{{closure}} (17,231 samples, 10.50%)</title><rect x="1.6533%" y="581" width="10.4969%" height="15" fill="rgb(231,13,6)"/><text x="1.9033%" y="591.50">nom::branch::al..</text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (17,231 samples, 10.50%)</title><rect x="1.6533%" y="565" width="10.4969%" height="15" fill="rgb(207,181,40)"/><text x="1.9033%" y="575.50">&lt;(A,B,C,D,E,F,G..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (17,231 samples, 10.50%)</title><rect x="1.6533%" y="549" width="10.4969%" height="15" fill="rgb(254,173,49)"/><text x="1.9033%" y="559.50">&lt;F as nom::inte..</text></g><g><title>core::ops::function::FnMut::call_mut (17,231 samples, 10.50%)</title><rect x="1.6533%" y="533" width="10.4969%" height="15" fill="rgb(221,1,38)"/><text x="1.9033%" y="543.50">core::ops::func..</text></g><g><title>compiler::parse::tokens::new_end (3,429 samples, 2.09%)</title><rect x="10.0613%" y="517" width="2.0889%" height="15" fill="rgb(206,124,46)"/><text x="10.3113%" y="527.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,429 samples, 2.09%)</title><rect x="10.0613%" y="501" width="2.0889%" height="15" fill="rgb(249,21,11)"/><text x="10.3113%" y="511.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,429 samples, 2.09%)</title><rect x="10.0613%" y="485" width="2.0889%" height="15" fill="rgb(222,201,40)"/><text x="10.3113%" y="495.50">&lt;..</text></g><g><title>nom::combinator::recognize::{{closure}} (3,429 samples, 2.09%)</title><rect x="10.0613%" y="469" width="2.0889%" height="15" fill="rgb(235,61,29)"/><text x="10.3113%" y="479.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,429 samples, 2.09%)</title><rect x="10.0613%" y="453" width="2.0889%" height="15" fill="rgb(219,207,3)"/><text x="10.3113%" y="463.50">&lt;..</text></g><g><title>nom::sequence::delimited::{{closure}} (3,429 samples, 2.09%)</title><rect x="10.0613%" y="437" width="2.0889%" height="15" fill="rgb(222,56,46)"/><text x="10.3113%" y="447.50">n..</text></g><g><title>compiler::parse::tokens::tokens (17,232 samples, 10.50%)</title><rect x="1.6533%" y="661" width="10.4975%" height="15" fill="rgb(239,76,54)"/><text x="1.9033%" y="671.50">compiler::parse..</text></g><g><title>compiler::parse::tokens::partition_list::{{closure}} (17,232 samples, 10.50%)</title><rect x="1.6533%" y="645" width="10.4975%" height="15" fill="rgb(231,124,27)"/><text x="1.9033%" y="655.50">compiler::parse..</text></g><g><title>__libc_start_main (17,401 samples, 10.60%)</title><rect x="1.5577%" y="853" width="10.6004%" height="15" fill="rgb(249,195,6)"/><text x="1.8077%" y="863.50">__libc_start_ma..</text></g><g><title>main (17,401 samples, 10.60%)</title><rect x="1.5577%" y="837" width="10.6004%" height="15" fill="rgb(237,174,47)"/><text x="1.8077%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (17,401 samples, 10.60%)</title><rect x="1.5577%" y="821" width="10.6004%" height="15" fill="rgb(206,201,31)"/><text x="1.8077%" y="831.50">std::rt::lang_s..</text></g><g><title>std::panic::catch_unwind (17,401 samples, 10.60%)</title><rect x="1.5577%" y="805" width="10.6004%" height="15" fill="rgb(231,57,52)"/><text x="1.8077%" y="815.50">std::panic::cat..</text></g><g><title>std::panicking::try (17,401 samples, 10.60%)</title><rect x="1.5577%" y="789" width="10.6004%" height="15" fill="rgb(248,177,22)"/><text x="1.8077%" y="799.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (17,401 samples, 10.60%)</title><rect x="1.5577%" y="773" width="10.6004%" height="15" fill="rgb(215,211,37)"/><text x="1.8077%" y="783.50">std::panicking:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (17,401 samples, 10.60%)</title><rect x="1.5577%" y="757" width="10.6004%" height="15" fill="rgb(241,128,51)"/><text x="1.8077%" y="767.50">core::ops::func..</text></g><g><title>std::rt::lang_start::{{closure}} (17,401 samples, 10.60%)</title><rect x="1.5577%" y="741" width="10.6004%" height="15" fill="rgb(227,165,31)"/><text x="1.8077%" y="751.50">std::rt::lang_s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (17,401 samples, 10.60%)</title><rect x="1.5577%" y="725" width="10.6004%" height="15" fill="rgb(228,167,24)"/><text x="1.8077%" y="735.50">std::sys_common..</text></g><g><title>core::ops::function::FnOnce::call_once (17,401 samples, 10.60%)</title><rect x="1.5577%" y="709" width="10.6004%" height="15" fill="rgb(228,143,12)"/><text x="1.8077%" y="719.50">core::ops::func..</text></g><g><title>bench::main (17,401 samples, 10.60%)</title><rect x="1.5577%" y="693" width="10.6004%" height="15" fill="rgb(249,149,8)"/><text x="1.8077%" y="703.50">bench::main</text></g><g><title>compiler::compile (17,401 samples, 10.60%)</title><rect x="1.5577%" y="677" width="10.6004%" height="15" fill="rgb(243,35,44)"/><text x="1.8077%" y="687.50">compiler::compi..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,557 samples, 0.95%)</title><rect x="14.5065%" y="549" width="0.9485%" height="15" fill="rgb(246,89,9)"/><text x="14.7565%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,060 samples, 2.47%)</title><rect x="12.9909%" y="581" width="2.4733%" height="15" fill="rgb(233,213,13)"/><text x="13.2409%" y="591.50">&lt;F..</text></g><g><title>nom::sequence::pair::{{closure}} (4,011 samples, 2.44%)</title><rect x="13.0207%" y="565" width="2.4434%" height="15" fill="rgb(233,141,41)"/><text x="13.2707%" y="575.50">no..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,084 samples, 0.66%)</title><rect x="15.4940%" y="581" width="0.6604%" height="15" fill="rgb(239,167,4)"/><text x="15.7440%" y="591.50"></text></g><g><title>compiler::parse::tokens::tokens (6,466 samples, 3.94%)</title><rect x="12.2208%" y="821" width="3.9390%" height="15" fill="rgb(209,217,16)"/><text x="12.4708%" y="831.50">comp..</text></g><g><title>compiler::parse::tokens::partition_list::{{closure}} (6,466 samples, 3.94%)</title><rect x="12.2208%" y="805" width="3.9390%" height="15" fill="rgb(219,88,35)"/><text x="12.4708%" y="815.50">comp..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,466 samples, 3.94%)</title><rect x="12.2208%" y="789" width="3.9390%" height="15" fill="rgb(220,193,23)"/><text x="12.4708%" y="799.50">&lt;F a..</text></g><g><title>core::ops::function::FnMut::call_mut (6,466 samples, 3.94%)</title><rect x="12.2208%" y="773" width="3.9390%" height="15" fill="rgb(230,90,52)"/><text x="12.4708%" y="783.50">core..</text></g><g><title>compiler::parse::tokens::token (6,466 samples, 3.94%)</title><rect x="12.2208%" y="757" width="3.9390%" height="15" fill="rgb(252,106,19)"/><text x="12.4708%" y="767.50">comp..</text></g><g><title>nom::branch::alt::{{closure}} (6,466 samples, 3.94%)</title><rect x="12.2208%" y="741" width="3.9390%" height="15" fill="rgb(206,74,20)"/><text x="12.4708%" y="751.50">nom:..</text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (6,466 samples, 3.94%)</title><rect x="12.2208%" y="725" width="3.9390%" height="15" fill="rgb(230,138,44)"/><text x="12.4708%" y="735.50">&lt;(A,..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,466 samples, 3.94%)</title><rect x="12.2208%" y="709" width="3.9390%" height="15" fill="rgb(235,182,43)"/><text x="12.4708%" y="719.50">&lt;F a..</text></g><g><title>core::ops::function::FnMut::call_mut (6,466 samples, 3.94%)</title><rect x="12.2208%" y="693" width="3.9390%" height="15" fill="rgb(242,16,51)"/><text x="12.4708%" y="703.50">core..</text></g><g><title>compiler::parse::tokens::legacy_end (6,435 samples, 3.92%)</title><rect x="12.2397%" y="677" width="3.9201%" height="15" fill="rgb(248,9,4)"/><text x="12.4897%" y="687.50">comp..</text></g><g><title>nom::combinator::map::{{closure}} (6,435 samples, 3.92%)</title><rect x="12.2397%" y="661" width="3.9201%" height="15" fill="rgb(210,31,22)"/><text x="12.4897%" y="671.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,435 samples, 3.92%)</title><rect x="12.2397%" y="645" width="3.9201%" height="15" fill="rgb(239,54,39)"/><text x="12.4897%" y="655.50">&lt;F a..</text></g><g><title>nom::combinator::consumed::{{closure}} (6,435 samples, 3.92%)</title><rect x="12.2397%" y="629" width="3.9201%" height="15" fill="rgb(230,99,41)"/><text x="12.4897%" y="639.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,435 samples, 3.92%)</title><rect x="12.2397%" y="613" width="3.9201%" height="15" fill="rgb(253,106,12)"/><text x="12.4897%" y="623.50">&lt;F a..</text></g><g><title>nom::sequence::delimited::{{closure}} (6,393 samples, 3.89%)</title><rect x="12.2653%" y="597" width="3.8945%" height="15" fill="rgb(213,46,41)"/><text x="12.5153%" y="607.50">nom:..</text></g><g><title>bench::main (6,590 samples, 4.01%)</title><rect x="12.1605%" y="853" width="4.0145%" height="15" fill="rgb(215,133,35)"/><text x="12.4105%" y="863.50">benc..</text></g><g><title>compiler::compile (6,590 samples, 4.01%)</title><rect x="12.1605%" y="837" width="4.0145%" height="15" fill="rgb(213,28,5)"/><text x="12.4105%" y="847.50">comp..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,279 samples, 0.78%)</title><rect x="17.0115%" y="597" width="0.7791%" height="15" fill="rgb(215,77,49)"/><text x="17.2615%" y="607.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (846 samples, 0.52%)</title><rect x="17.2752%" y="581" width="0.5154%" height="15" fill="rgb(248,100,22)"/><text x="17.5252%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (584 samples, 0.36%)</title><rect x="17.7906%" y="597" width="0.3558%" height="15" fill="rgb(208,67,9)"/><text x="18.0406%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,466 samples, 0.89%)</title><rect x="18.1464%" y="597" width="0.8931%" height="15" fill="rgb(219,133,21)"/><text x="18.3964%" y="607.50"></text></g><g><title>compiler::parse::tokens::interp_escaped (4,632 samples, 2.82%)</title><rect x="16.2317%" y="693" width="2.8217%" height="15" fill="rgb(246,46,29)"/><text x="16.4817%" y="703.50">co..</text></g><g><title>nom::combinator::map::{{closure}} (4,632 samples, 2.82%)</title><rect x="16.2317%" y="677" width="2.8217%" height="15" fill="rgb(246,185,52)"/><text x="16.4817%" y="687.50">no..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,632 samples, 2.82%)</title><rect x="16.2317%" y="661" width="2.8217%" height="15" fill="rgb(252,136,11)"/><text x="16.4817%" y="671.50">&lt;F..</text></g><g><title>nom::combinator::consumed::{{closure}} (4,632 samples, 2.82%)</title><rect x="16.2317%" y="645" width="2.8217%" height="15" fill="rgb(219,138,53)"/><text x="16.4817%" y="655.50">no..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,632 samples, 2.82%)</title><rect x="16.2317%" y="629" width="2.8217%" height="15" fill="rgb(211,51,23)"/><text x="16.4817%" y="639.50">&lt;F..</text></g><g><title>nom::sequence::delimited::{{closure}} (4,632 samples, 2.82%)</title><rect x="16.2317%" y="613" width="2.8217%" height="15" fill="rgb(247,221,28)"/><text x="16.4817%" y="623.50">no..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,249 samples, 0.76%)</title><rect x="19.8034%" y="597" width="0.7609%" height="15" fill="rgb(251,222,45)"/><text x="20.0534%" y="607.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (805 samples, 0.49%)</title><rect x="20.0738%" y="581" width="0.4904%" height="15" fill="rgb(217,162,53)"/><text x="20.3238%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (699 samples, 0.43%)</title><rect x="20.5642%" y="597" width="0.4258%" height="15" fill="rgb(229,93,14)"/><text x="20.8142%" y="607.50"></text></g><g><title>compiler::parse::tokens::interp_raw (4,611 samples, 2.81%)</title><rect x="19.0534%" y="693" width="2.8089%" height="15" fill="rgb(209,67,49)"/><text x="19.3034%" y="703.50">co..</text></g><g><title>nom::combinator::map::{{closure}} (4,611 samples, 2.81%)</title><rect x="19.0534%" y="677" width="2.8089%" height="15" fill="rgb(213,87,29)"/><text x="19.3034%" y="687.50">no..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,611 samples, 2.81%)</title><rect x="19.0534%" y="661" width="2.8089%" height="15" fill="rgb(205,151,52)"/><text x="19.3034%" y="671.50">&lt;F..</text></g><g><title>nom::combinator::consumed::{{closure}} (4,611 samples, 2.81%)</title><rect x="19.0534%" y="645" width="2.8089%" height="15" fill="rgb(253,215,39)"/><text x="19.3034%" y="655.50">no..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,611 samples, 2.81%)</title><rect x="19.0534%" y="629" width="2.8089%" height="15" fill="rgb(221,220,41)"/><text x="19.3034%" y="639.50">&lt;F..</text></g><g><title>nom::sequence::delimited::{{closure}} (4,611 samples, 2.81%)</title><rect x="19.0534%" y="613" width="2.8089%" height="15" fill="rgb(218,133,21)"/><text x="19.3034%" y="623.50">no..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,432 samples, 0.87%)</title><rect x="20.9900%" y="597" width="0.8724%" height="15" fill="rgb(221,193,43)"/><text x="21.2400%" y="607.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (817 samples, 0.50%)</title><rect x="22.1725%" y="549" width="0.4977%" height="15" fill="rgb(240,128,52)"/><text x="22.4225%" y="559.50"></text></g><g><title>compiler::parse::tokens::tokens (10,658 samples, 6.49%)</title><rect x="16.2317%" y="837" width="6.4927%" height="15" fill="rgb(253,114,12)"/><text x="16.4817%" y="847.50">compiler:..</text></g><g><title>compiler::parse::tokens::partition_list::{{closure}} (10,658 samples, 6.49%)</title><rect x="16.2317%" y="821" width="6.4927%" height="15" fill="rgb(215,223,47)"/><text x="16.4817%" y="831.50">compiler:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (10,658 samples, 6.49%)</title><rect x="16.2317%" y="805" width="6.4927%" height="15" fill="rgb(248,225,23)"/><text x="16.4817%" y="815.50">&lt;F as nom..</text></g><g><title>core::ops::function::FnMut::call_mut (10,658 samples, 6.49%)</title><rect x="16.2317%" y="789" width="6.4927%" height="15" fill="rgb(250,108,0)"/><text x="16.4817%" y="799.50">core::ops..</text></g><g><title>compiler::parse::tokens::token (10,658 samples, 6.49%)</title><rect x="16.2317%" y="773" width="6.4927%" height="15" fill="rgb(228,208,7)"/><text x="16.4817%" y="783.50">compiler:..</text></g><g><title>nom::branch::alt::{{closure}} (10,658 samples, 6.49%)</title><rect x="16.2317%" y="757" width="6.4927%" height="15" fill="rgb(244,45,10)"/><text x="16.4817%" y="767.50">nom::bran..</text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (10,658 samples, 6.49%)</title><rect x="16.2317%" y="741" width="6.4927%" height="15" fill="rgb(207,125,25)"/><text x="16.4817%" y="751.50">&lt;(A,B,C,D..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (10,658 samples, 6.49%)</title><rect x="16.2317%" y="725" width="6.4927%" height="15" fill="rgb(210,195,18)"/><text x="16.4817%" y="735.50">&lt;F as nom..</text></g><g><title>core::ops::function::FnMut::call_mut (10,658 samples, 6.49%)</title><rect x="16.2317%" y="709" width="6.4927%" height="15" fill="rgb(249,80,12)"/><text x="16.4817%" y="719.50">core::ops..</text></g><g><title>compiler::parse::tokens::legacy_end (1,378 samples, 0.84%)</title><rect x="21.8849%" y="693" width="0.8395%" height="15" fill="rgb(221,65,9)"/><text x="22.1349%" y="703.50"></text></g><g><title>nom::combinator::map::{{closure}} (1,378 samples, 0.84%)</title><rect x="21.8849%" y="677" width="0.8395%" height="15" fill="rgb(235,49,36)"/><text x="22.1349%" y="687.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,378 samples, 0.84%)</title><rect x="21.8849%" y="661" width="0.8395%" height="15" fill="rgb(225,32,20)"/><text x="22.1349%" y="671.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (1,378 samples, 0.84%)</title><rect x="21.8849%" y="645" width="0.8395%" height="15" fill="rgb(215,141,46)"/><text x="22.1349%" y="655.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,378 samples, 0.84%)</title><rect x="21.8849%" y="629" width="0.8395%" height="15" fill="rgb(250,160,47)"/><text x="22.1349%" y="639.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1,378 samples, 0.84%)</title><rect x="21.8849%" y="613" width="0.8395%" height="15" fill="rgb(216,222,40)"/><text x="22.1349%" y="623.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,378 samples, 0.84%)</title><rect x="21.8849%" y="597" width="0.8395%" height="15" fill="rgb(234,217,39)"/><text x="22.1349%" y="607.50"></text></g><g><title>nom::sequence::pair::{{closure}} (1,268 samples, 0.77%)</title><rect x="21.9519%" y="581" width="0.7724%" height="15" fill="rgb(207,178,40)"/><text x="22.2019%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,268 samples, 0.77%)</title><rect x="21.9519%" y="565" width="0.7724%" height="15" fill="rgb(221,136,13)"/><text x="22.2019%" y="575.50"></text></g><g><title>compiler::compile (10,783 samples, 6.57%)</title><rect x="16.1751%" y="853" width="6.5688%" height="15" fill="rgb(249,199,10)"/><text x="16.4251%" y="863.50">compiler:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (277 samples, 0.17%)</title><rect x="23.0674%" y="389" width="0.1687%" height="15" fill="rgb(249,222,13)"/><text x="23.3174%" y="399.50"></text></g><g><title>nom::sequence::pair::{{closure}} (192 samples, 0.12%)</title><rect x="23.1191%" y="373" width="0.1170%" height="15" fill="rgb(244,185,38)"/><text x="23.3691%" y="383.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (316 samples, 0.19%)</title><rect x="23.0607%" y="421" width="0.1925%" height="15" fill="rgb(236,202,9)"/><text x="23.3107%" y="431.50"></text></g><g><title>nom::combinator::map::{{closure}} (316 samples, 0.19%)</title><rect x="23.0607%" y="405" width="0.1925%" height="15" fill="rgb(250,229,37)"/><text x="23.3107%" y="415.50"></text></g><g><title>compiler::parse::expression::path (350 samples, 0.21%)</title><rect x="23.0582%" y="469" width="0.2132%" height="15" fill="rgb(206,174,23)"/><text x="23.3082%" y="479.50"></text></g><g><title>nom::branch::alt::{{closure}} (347 samples, 0.21%)</title><rect x="23.0601%" y="453" width="0.2114%" height="15" fill="rgb(211,33,43)"/><text x="23.3101%" y="463.50"></text></g><g><title>&lt;(A,B) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (347 samples, 0.21%)</title><rect x="23.0601%" y="437" width="0.2114%" height="15" fill="rgb(245,58,50)"/><text x="23.3101%" y="447.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (682 samples, 0.42%)</title><rect x="22.9004%" y="501" width="0.4155%" height="15" fill="rgb(244,68,36)"/><text x="23.1504%" y="511.50"></text></g><g><title>core::ops::function::FnMut::call_mut (682 samples, 0.42%)</title><rect x="22.9004%" y="485" width="0.4155%" height="15" fill="rgb(232,229,15)"/><text x="23.1504%" y="495.50"></text></g><g><title>compiler::parse::expression::expression (692 samples, 0.42%)</title><rect x="22.8986%" y="549" width="0.4216%" height="15" fill="rgb(254,30,23)"/><text x="23.1486%" y="559.50"></text></g><g><title>nom::branch::alt::{{closure}} (692 samples, 0.42%)</title><rect x="22.8986%" y="533" width="0.4216%" height="15" fill="rgb(235,160,14)"/><text x="23.1486%" y="543.50"></text></g><g><title>&lt;(A,B,C,D,E) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (692 samples, 0.42%)</title><rect x="22.8986%" y="517" width="0.4216%" height="15" fill="rgb(212,155,44)"/><text x="23.1486%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (764 samples, 0.47%)</title><rect x="22.8895%" y="581" width="0.4654%" height="15" fill="rgb(226,2,50)"/><text x="23.1395%" y="591.50"></text></g><g><title>core::ops::function::FnMut::call_mut (749 samples, 0.46%)</title><rect x="22.8986%" y="565" width="0.4563%" height="15" fill="rgb(234,177,6)"/><text x="23.1486%" y="575.50"></text></g><g><title>compiler::parse::tokens::interp_escaped (800 samples, 0.49%)</title><rect x="22.8834%" y="709" width="0.4873%" height="15" fill="rgb(217,24,9)"/><text x="23.1334%" y="719.50"></text></g><g><title>nom::combinator::map::{{closure}} (800 samples, 0.49%)</title><rect x="22.8834%" y="693" width="0.4873%" height="15" fill="rgb(220,13,46)"/><text x="23.1334%" y="703.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (800 samples, 0.49%)</title><rect x="22.8834%" y="677" width="0.4873%" height="15" fill="rgb(239,221,27)"/><text x="23.1334%" y="687.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (800 samples, 0.49%)</title><rect x="22.8834%" y="661" width="0.4873%" height="15" fill="rgb(222,198,25)"/><text x="23.1334%" y="671.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (800 samples, 0.49%)</title><rect x="22.8834%" y="645" width="0.4873%" height="15" fill="rgb(211,99,13)"/><text x="23.1334%" y="655.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (800 samples, 0.49%)</title><rect x="22.8834%" y="629" width="0.4873%" height="15" fill="rgb(232,111,31)"/><text x="23.1334%" y="639.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (800 samples, 0.49%)</title><rect x="22.8834%" y="613" width="0.4873%" height="15" fill="rgb(245,82,37)"/><text x="23.1334%" y="623.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (794 samples, 0.48%)</title><rect x="22.8870%" y="597" width="0.4837%" height="15" fill="rgb(227,149,46)"/><text x="23.1370%" y="607.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (930 samples, 0.57%)</title><rect x="24.9010%" y="565" width="0.5665%" height="15" fill="rgb(218,36,50)"/><text x="25.1510%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,499 samples, 0.91%)</title><rect x="24.6196%" y="581" width="0.9132%" height="15" fill="rgb(226,80,48)"/><text x="24.8696%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,316 samples, 0.80%)</title><rect x="25.5327%" y="581" width="0.8017%" height="15" fill="rgb(238,224,15)"/><text x="25.7827%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,656 samples, 2.84%)</title><rect x="23.5029%" y="613" width="2.8364%" height="15" fill="rgb(241,136,10)"/><text x="23.7529%" y="623.50">&lt;F..</text></g><g><title>nom::sequence::pair::{{closure}} (4,623 samples, 2.82%)</title><rect x="23.5230%" y="597" width="2.8163%" height="15" fill="rgb(208,32,45)"/><text x="23.7730%" y="607.50">no..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (270 samples, 0.16%)</title><rect x="26.3393%" y="613" width="0.1645%" height="15" fill="rgb(207,135,9)"/><text x="26.5893%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,414 samples, 0.86%)</title><rect x="26.5038%" y="613" width="0.8614%" height="15" fill="rgb(206,86,44)"/><text x="26.7538%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,316 samples, 0.80%)</title><rect x="26.5635%" y="597" width="0.8017%" height="15" fill="rgb(245,177,15)"/><text x="26.8135%" y="607.50"></text></g><g><title>compiler::parse::tokens::legacy_begin (6,559 samples, 4.00%)</title><rect x="23.3707%" y="709" width="3.9956%" height="15" fill="rgb(206,64,50)"/><text x="23.6207%" y="719.50">comp..</text></g><g><title>nom::combinator::map::{{closure}} (6,559 samples, 4.00%)</title><rect x="23.3707%" y="693" width="3.9956%" height="15" fill="rgb(234,36,40)"/><text x="23.6207%" y="703.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,559 samples, 4.00%)</title><rect x="23.3707%" y="677" width="3.9956%" height="15" fill="rgb(213,64,8)"/><text x="23.6207%" y="687.50">&lt;F a..</text></g><g><title>nom::combinator::consumed::{{closure}} (6,559 samples, 4.00%)</title><rect x="23.3707%" y="661" width="3.9956%" height="15" fill="rgb(210,75,36)"/><text x="23.6207%" y="671.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,559 samples, 4.00%)</title><rect x="23.3707%" y="645" width="3.9956%" height="15" fill="rgb(229,88,21)"/><text x="23.6207%" y="655.50">&lt;F a..</text></g><g><title>nom::sequence::delimited::{{closure}} (6,559 samples, 4.00%)</title><rect x="23.3707%" y="629" width="3.9956%" height="15" fill="rgb(252,204,47)"/><text x="23.6207%" y="639.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (245 samples, 0.15%)</title><rect x="27.5436%" y="581" width="0.1493%" height="15" fill="rgb(208,77,27)"/><text x="27.7936%" y="591.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (203 samples, 0.12%)</title><rect x="27.5692%" y="565" width="0.1237%" height="15" fill="rgb(221,76,26)"/><text x="27.8192%" y="575.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (267 samples, 0.16%)</title><rect x="27.5418%" y="597" width="0.1627%" height="15" fill="rgb(225,139,18)"/><text x="27.7918%" y="607.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (835 samples, 0.51%)</title><rect x="29.0252%" y="565" width="0.5087%" height="15" fill="rgb(230,137,11)"/><text x="29.2752%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,394 samples, 0.85%)</title><rect x="28.7632%" y="581" width="0.8492%" height="15" fill="rgb(212,28,1)"/><text x="29.0132%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,438 samples, 0.88%)</title><rect x="29.6124%" y="581" width="0.8760%" height="15" fill="rgb(248,164,17)"/><text x="29.8624%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,888 samples, 2.98%)</title><rect x="27.5272%" y="613" width="2.9777%" height="15" fill="rgb(222,171,42)"/><text x="27.7772%" y="623.50">&lt;F ..</text></g><g><title>nom::sequence::pair::{{closure}} (4,597 samples, 2.80%)</title><rect x="27.7045%" y="597" width="2.8004%" height="15" fill="rgb(243,84,45)"/><text x="27.9545%" y="607.50">no..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (258 samples, 0.16%)</title><rect x="30.5049%" y="613" width="0.1572%" height="15" fill="rgb(252,49,23)"/><text x="30.7549%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,405 samples, 0.86%)</title><rect x="30.6621%" y="613" width="0.8559%" height="15" fill="rgb(215,19,7)"/><text x="30.9121%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,301 samples, 0.79%)</title><rect x="30.7254%" y="597" width="0.7925%" height="15" fill="rgb(238,81,41)"/><text x="30.9754%" y="607.50"></text></g><g><title>compiler::parse::tokens::legacy_if (6,828 samples, 4.16%)</title><rect x="27.3664%" y="709" width="4.1595%" height="15" fill="rgb(210,199,37)"/><text x="27.6164%" y="719.50">compi..</text></g><g><title>nom::combinator::map::{{closure}} (6,828 samples, 4.16%)</title><rect x="27.3664%" y="693" width="4.1595%" height="15" fill="rgb(244,192,49)"/><text x="27.6164%" y="703.50">nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,828 samples, 4.16%)</title><rect x="27.3664%" y="677" width="4.1595%" height="15" fill="rgb(226,211,11)"/><text x="27.6164%" y="687.50">&lt;F as..</text></g><g><title>nom::combinator::consumed::{{closure}} (6,828 samples, 4.16%)</title><rect x="27.3664%" y="661" width="4.1595%" height="15" fill="rgb(236,162,54)"/><text x="27.6164%" y="671.50">nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,828 samples, 4.16%)</title><rect x="27.3664%" y="645" width="4.1595%" height="15" fill="rgb(220,229,9)"/><text x="27.6164%" y="655.50">&lt;F as..</text></g><g><title>nom::sequence::delimited::{{closure}} (6,828 samples, 4.16%)</title><rect x="27.3664%" y="629" width="4.1595%" height="15" fill="rgb(250,87,22)"/><text x="27.6164%" y="639.50">nom::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,150 samples, 0.70%)</title><rect x="32.6803%" y="581" width="0.7006%" height="15" fill="rgb(239,43,17)"/><text x="32.9303%" y="591.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (763 samples, 0.46%)</title><rect x="32.9160%" y="565" width="0.4648%" height="15" fill="rgb(231,177,25)"/><text x="33.1660%" y="575.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,240 samples, 2.58%)</title><rect x="31.6916%" y="613" width="2.5829%" height="15" fill="rgb(219,179,1)"/><text x="31.9416%" y="623.50">&lt;F..</text></g><g><title>nom::sequence::pair::{{closure}} (4,240 samples, 2.58%)</title><rect x="31.6916%" y="597" width="2.5829%" height="15" fill="rgb(238,219,53)"/><text x="31.9416%" y="607.50">no..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,467 samples, 0.89%)</title><rect x="33.3808%" y="581" width="0.8937%" height="15" fill="rgb(232,167,36)"/><text x="33.6308%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (251 samples, 0.15%)</title><rect x="34.2745%" y="613" width="0.1529%" height="15" fill="rgb(244,19,51)"/><text x="34.5245%" y="623.50"></text></g><g><title>compiler::parse::tokens::new_each (6,181 samples, 3.77%)</title><rect x="31.5259%" y="709" width="3.7654%" height="15" fill="rgb(224,6,22)"/><text x="31.7759%" y="719.50">comp..</text></g><g><title>nom::combinator::map::{{closure}} (6,181 samples, 3.77%)</title><rect x="31.5259%" y="693" width="3.7654%" height="15" fill="rgb(224,145,5)"/><text x="31.7759%" y="703.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,181 samples, 3.77%)</title><rect x="31.5259%" y="677" width="3.7654%" height="15" fill="rgb(234,130,49)"/><text x="31.7759%" y="687.50">&lt;F a..</text></g><g><title>nom::combinator::consumed::{{closure}} (6,181 samples, 3.77%)</title><rect x="31.5259%" y="661" width="3.7654%" height="15" fill="rgb(254,6,2)"/><text x="31.7759%" y="671.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,181 samples, 3.77%)</title><rect x="31.5259%" y="645" width="3.7654%" height="15" fill="rgb(208,96,46)"/><text x="31.7759%" y="655.50">&lt;F a..</text></g><g><title>nom::sequence::delimited::{{closure}} (6,181 samples, 3.77%)</title><rect x="31.5259%" y="629" width="3.7654%" height="15" fill="rgb(239,3,39)"/><text x="31.7759%" y="639.50">nom:..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,418 samples, 0.86%)</title><rect x="34.4274%" y="613" width="0.8638%" height="15" fill="rgb(233,210,1)"/><text x="34.6774%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,327 samples, 0.81%)</title><rect x="34.4829%" y="597" width="0.8084%" height="15" fill="rgb(244,137,37)"/><text x="34.7329%" y="607.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,236 samples, 0.75%)</title><rect x="36.5114%" y="581" width="0.7530%" height="15" fill="rgb(240,136,2)"/><text x="36.7614%" y="591.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (819 samples, 0.50%)</title><rect x="36.7655%" y="565" width="0.4989%" height="15" fill="rgb(239,18,37)"/><text x="37.0155%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,422 samples, 0.87%)</title><rect x="37.2644%" y="581" width="0.8663%" height="15" fill="rgb(218,185,22)"/><text x="37.5144%" y="591.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,378 samples, 2.67%)</title><rect x="35.4655%" y="613" width="2.6670%" height="15" fill="rgb(225,218,4)"/><text x="35.7155%" y="623.50">&lt;F..</text></g><g><title>nom::sequence::pair::{{closure}} (4,378 samples, 2.67%)</title><rect x="35.4655%" y="597" width="2.6670%" height="15" fill="rgb(230,182,32)"/><text x="35.7155%" y="607.50">no..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (254 samples, 0.15%)</title><rect x="38.1325%" y="613" width="0.1547%" height="15" fill="rgb(242,56,43)"/><text x="38.3825%" y="623.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,388 samples, 0.85%)</title><rect x="38.2872%" y="613" width="0.8455%" height="15" fill="rgb(233,99,24)"/><text x="38.5372%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,272 samples, 0.77%)</title><rect x="38.3579%" y="597" width="0.7749%" height="15" fill="rgb(234,209,42)"/><text x="38.6079%" y="607.50"></text></g><g><title>compiler::parse::tokens::tokens (26,675 samples, 16.25%)</title><rect x="22.8834%" y="853" width="16.2500%" height="15" fill="rgb(227,7,12)"/><text x="23.1334%" y="863.50">compiler::parse::tokens::..</text></g><g><title>compiler::parse::tokens::partition_list::{{closure}} (26,675 samples, 16.25%)</title><rect x="22.8834%" y="837" width="16.2500%" height="15" fill="rgb(245,203,43)"/><text x="23.1334%" y="847.50">compiler::parse::tokens::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (26,675 samples, 16.25%)</title><rect x="22.8834%" y="821" width="16.2500%" height="15" fill="rgb(238,205,33)"/><text x="23.1334%" y="831.50">&lt;F as nom::internal::Pars..</text></g><g><title>core::ops::function::FnMut::call_mut (26,675 samples, 16.25%)</title><rect x="22.8834%" y="805" width="16.2500%" height="15" fill="rgb(231,56,7)"/><text x="23.1334%" y="815.50">core::ops::function::FnMu..</text></g><g><title>compiler::parse::tokens::token (26,675 samples, 16.25%)</title><rect x="22.8834%" y="789" width="16.2500%" height="15" fill="rgb(244,186,29)"/><text x="23.1334%" y="799.50">compiler::parse::tokens::..</text></g><g><title>nom::branch::alt::{{closure}} (26,675 samples, 16.25%)</title><rect x="22.8834%" y="773" width="16.2500%" height="15" fill="rgb(234,111,31)"/><text x="23.1334%" y="783.50">nom::branch::alt::{{closu..</text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (26,675 samples, 16.25%)</title><rect x="22.8834%" y="757" width="16.2500%" height="15" fill="rgb(241,149,10)"/><text x="23.1334%" y="767.50">&lt;(A,B,C,D,E,F,G,H,I,J) as..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (26,675 samples, 16.25%)</title><rect x="22.8834%" y="741" width="16.2500%" height="15" fill="rgb(249,206,44)"/><text x="23.1334%" y="751.50">&lt;F as nom::internal::Pars..</text></g><g><title>core::ops::function::FnMut::call_mut (26,675 samples, 16.25%)</title><rect x="22.8834%" y="725" width="16.2500%" height="15" fill="rgb(251,153,30)"/><text x="23.1334%" y="735.50">core::ops::function::FnMu..</text></g><g><title>compiler::parse::tokens::new_if (6,307 samples, 3.84%)</title><rect x="35.2913%" y="709" width="3.8421%" height="15" fill="rgb(239,152,38)"/><text x="35.5413%" y="719.50">comp..</text></g><g><title>nom::combinator::map::{{closure}} (6,307 samples, 3.84%)</title><rect x="35.2913%" y="693" width="3.8421%" height="15" fill="rgb(249,139,47)"/><text x="35.5413%" y="703.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,307 samples, 3.84%)</title><rect x="35.2913%" y="677" width="3.8421%" height="15" fill="rgb(244,64,35)"/><text x="35.5413%" y="687.50">&lt;F a..</text></g><g><title>nom::combinator::consumed::{{closure}} (6,307 samples, 3.84%)</title><rect x="35.2913%" y="661" width="3.8421%" height="15" fill="rgb(216,46,15)"/><text x="35.5413%" y="671.50">nom:..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (6,307 samples, 3.84%)</title><rect x="35.2913%" y="645" width="3.8421%" height="15" fill="rgb(250,74,19)"/><text x="35.5413%" y="655.50">&lt;F a..</text></g><g><title>nom::sequence::delimited::{{closure}} (6,306 samples, 3.84%)</title><rect x="35.2919%" y="629" width="3.8415%" height="15" fill="rgb(249,42,33)"/><text x="35.5419%" y="639.50">nom:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (167 samples, 0.10%)</title><rect x="39.1827%" y="805" width="0.1017%" height="15" fill="rgb(242,149,17)"/><text x="39.4327%" y="815.50"></text></g><g><title>compiler::parse::tree::tree (388 samples, 0.24%)</title><rect x="39.1334%" y="853" width="0.2364%" height="15" fill="rgb(244,29,21)"/><text x="39.3834%" y="863.50"></text></g><g><title>compiler::parse::tree::tree (388 samples, 0.24%)</title><rect x="39.1334%" y="837" width="0.2364%" height="15" fill="rgb(220,130,37)"/><text x="39.3834%" y="847.50"></text></g><g><title>compiler::parse::tree::tree (387 samples, 0.24%)</title><rect x="39.1340%" y="821" width="0.2358%" height="15" fill="rgb(211,67,2)"/><text x="39.3840%" y="831.50"></text></g><g><title>compiler::generate::templates::expression (259 samples, 0.16%)</title><rect x="39.4325%" y="53" width="0.1578%" height="15" fill="rgb(235,68,52)"/><text x="39.6825%" y="63.50"></text></g><g><title>compiler::generate::templates::guard (259 samples, 0.16%)</title><rect x="39.4325%" y="37" width="0.1578%" height="15" fill="rgb(246,142,3)"/><text x="39.6825%" y="47.50"></text></g><g><title>compiler::generate::templates::if_else (167 samples, 0.10%)</title><rect x="39.5903%" y="53" width="0.1017%" height="15" fill="rgb(241,25,7)"/><text x="39.8403%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (448 samples, 0.27%)</title><rect x="39.4252%" y="181" width="0.2729%" height="15" fill="rgb(242,119,39)"/><text x="39.6752%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (448 samples, 0.27%)</title><rect x="39.4252%" y="165" width="0.2729%" height="15" fill="rgb(241,98,45)"/><text x="39.6752%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (448 samples, 0.27%)</title><rect x="39.4252%" y="149" width="0.2729%" height="15" fill="rgb(254,28,30)"/><text x="39.6752%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (448 samples, 0.27%)</title><rect x="39.4252%" y="133" width="0.2729%" height="15" fill="rgb(241,142,54)"/><text x="39.6752%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (448 samples, 0.27%)</title><rect x="39.4252%" y="117" width="0.2729%" height="15" fill="rgb(222,85,15)"/><text x="39.6752%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (448 samples, 0.27%)</title><rect x="39.4252%" y="101" width="0.2729%" height="15" fill="rgb(210,85,47)"/><text x="39.6752%" y="111.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (448 samples, 0.27%)</title><rect x="39.4252%" y="85" width="0.2729%" height="15" fill="rgb(224,206,25)"/><text x="39.6752%" y="95.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (448 samples, 0.27%)</title><rect x="39.4252%" y="69" width="0.2729%" height="15" fill="rgb(243,201,19)"/><text x="39.6752%" y="79.50"></text></g><g><title>compiler::generate::generator::generate (462 samples, 0.28%)</title><rect x="39.4252%" y="693" width="0.2814%" height="15" fill="rgb(236,59,4)"/><text x="39.6752%" y="703.50"></text></g><g><title>compiler::generate::generator::gen_body (462 samples, 0.28%)</title><rect x="39.4252%" y="677" width="0.2814%" height="15" fill="rgb(254,179,45)"/><text x="39.6752%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (462 samples, 0.28%)</title><rect x="39.4252%" y="661" width="0.2814%" height="15" fill="rgb(226,14,10)"/><text x="39.6752%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="645" width="0.2814%" height="15" fill="rgb(244,27,41)"/><text x="39.6752%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="629" width="0.2814%" height="15" fill="rgb(235,35,32)"/><text x="39.6752%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="613" width="0.2814%" height="15" fill="rgb(218,68,31)"/><text x="39.6752%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (462 samples, 0.28%)</title><rect x="39.4252%" y="597" width="0.2814%" height="15" fill="rgb(207,120,37)"/><text x="39.6752%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (462 samples, 0.28%)</title><rect x="39.4252%" y="581" width="0.2814%" height="15" fill="rgb(227,98,0)"/><text x="39.6752%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (462 samples, 0.28%)</title><rect x="39.4252%" y="565" width="0.2814%" height="15" fill="rgb(207,7,3)"/><text x="39.6752%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (462 samples, 0.28%)</title><rect x="39.4252%" y="549" width="0.2814%" height="15" fill="rgb(206,98,19)"/><text x="39.6752%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (462 samples, 0.28%)</title><rect x="39.4252%" y="533" width="0.2814%" height="15" fill="rgb(217,5,26)"/><text x="39.6752%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (462 samples, 0.28%)</title><rect x="39.4252%" y="517" width="0.2814%" height="15" fill="rgb(235,190,38)"/><text x="39.6752%" y="527.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (462 samples, 0.28%)</title><rect x="39.4252%" y="501" width="0.2814%" height="15" fill="rgb(247,86,24)"/><text x="39.6752%" y="511.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (462 samples, 0.28%)</title><rect x="39.4252%" y="485" width="0.2814%" height="15" fill="rgb(205,101,16)"/><text x="39.6752%" y="495.50"></text></g><g><title>compiler::generate::generator::gen_body (462 samples, 0.28%)</title><rect x="39.4252%" y="469" width="0.2814%" height="15" fill="rgb(246,168,33)"/><text x="39.6752%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (462 samples, 0.28%)</title><rect x="39.4252%" y="453" width="0.2814%" height="15" fill="rgb(231,114,1)"/><text x="39.6752%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="437" width="0.2814%" height="15" fill="rgb(207,184,53)"/><text x="39.6752%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="421" width="0.2814%" height="15" fill="rgb(224,95,51)"/><text x="39.6752%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="405" width="0.2814%" height="15" fill="rgb(212,188,45)"/><text x="39.6752%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (462 samples, 0.28%)</title><rect x="39.4252%" y="389" width="0.2814%" height="15" fill="rgb(223,154,38)"/><text x="39.6752%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (462 samples, 0.28%)</title><rect x="39.4252%" y="373" width="0.2814%" height="15" fill="rgb(251,22,52)"/><text x="39.6752%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (462 samples, 0.28%)</title><rect x="39.4252%" y="357" width="0.2814%" height="15" fill="rgb(229,209,22)"/><text x="39.6752%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (462 samples, 0.28%)</title><rect x="39.4252%" y="341" width="0.2814%" height="15" fill="rgb(234,138,34)"/><text x="39.6752%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (462 samples, 0.28%)</title><rect x="39.4252%" y="325" width="0.2814%" height="15" fill="rgb(212,95,11)"/><text x="39.6752%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (462 samples, 0.28%)</title><rect x="39.4252%" y="309" width="0.2814%" height="15" fill="rgb(240,179,47)"/><text x="39.6752%" y="319.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (462 samples, 0.28%)</title><rect x="39.4252%" y="293" width="0.2814%" height="15" fill="rgb(240,163,11)"/><text x="39.6752%" y="303.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (462 samples, 0.28%)</title><rect x="39.4252%" y="277" width="0.2814%" height="15" fill="rgb(236,37,12)"/><text x="39.6752%" y="287.50"></text></g><g><title>compiler::generate::generator::gen_body (462 samples, 0.28%)</title><rect x="39.4252%" y="261" width="0.2814%" height="15" fill="rgb(232,164,16)"/><text x="39.6752%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (462 samples, 0.28%)</title><rect x="39.4252%" y="245" width="0.2814%" height="15" fill="rgb(244,205,15)"/><text x="39.6752%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="229" width="0.2814%" height="15" fill="rgb(223,117,47)"/><text x="39.6752%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="213" width="0.2814%" height="15" fill="rgb(244,107,35)"/><text x="39.6752%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (462 samples, 0.28%)</title><rect x="39.4252%" y="197" width="0.2814%" height="15" fill="rgb(205,140,8)"/><text x="39.6752%" y="207.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (272 samples, 0.17%)</title><rect x="41.7882%" y="485" width="0.1657%" height="15" fill="rgb(228,84,46)"/><text x="42.0382%" y="495.50"></text></g><g><title>compiler::parse::tokens::legacy_begin (3,692 samples, 2.25%)</title><rect x="39.7072%" y="549" width="2.2491%" height="15" fill="rgb(254,188,9)"/><text x="39.9572%" y="559.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,692 samples, 2.25%)</title><rect x="39.7072%" y="533" width="2.2491%" height="15" fill="rgb(206,112,54)"/><text x="39.9572%" y="543.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,692 samples, 2.25%)</title><rect x="39.7072%" y="517" width="2.2491%" height="15" fill="rgb(216,84,49)"/><text x="39.9572%" y="527.50">&lt;..</text></g><g><title>nom::combinator::consumed::{{closure}} (1,776 samples, 1.08%)</title><rect x="40.8744%" y="501" width="1.0819%" height="15" fill="rgb(214,194,35)"/><text x="41.1244%" y="511.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;A,X&gt; as nom::traits::Compare&lt;B&gt;&gt;::compare (368 samples, 0.22%)</title><rect x="42.4559%" y="421" width="0.2242%" height="15" fill="rgb(249,28,3)"/><text x="42.7059%" y="431.50"></text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (368 samples, 0.22%)</title><rect x="42.4559%" y="405" width="0.2242%" height="15" fill="rgb(222,56,52)"/><text x="42.7059%" y="415.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (368 samples, 0.22%)</title><rect x="42.4559%" y="389" width="0.2242%" height="15" fill="rgb(245,217,50)"/><text x="42.7059%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (255 samples, 0.16%)</title><rect x="42.5247%" y="373" width="0.1553%" height="15" fill="rgb(213,201,24)"/><text x="42.7747%" y="383.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (255 samples, 0.16%)</title><rect x="42.5247%" y="357" width="0.1553%" height="15" fill="rgb(248,116,28)"/><text x="42.7747%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (255 samples, 0.16%)</title><rect x="42.5247%" y="341" width="0.1553%" height="15" fill="rgb(219,72,43)"/><text x="42.7747%" y="351.50"></text></g><g><title>core::cmp::min (255 samples, 0.16%)</title><rect x="42.5247%" y="325" width="0.1553%" height="15" fill="rgb(209,138,14)"/><text x="42.7747%" y="335.50"></text></g><g><title>core::cmp::Ord::min (255 samples, 0.16%)</title><rect x="42.5247%" y="309" width="0.1553%" height="15" fill="rgb(222,18,33)"/><text x="42.7747%" y="319.50"></text></g><g><title>core::cmp::min_by (255 samples, 0.16%)</title><rect x="42.5247%" y="293" width="0.1553%" height="15" fill="rgb(213,199,7)"/><text x="42.7747%" y="303.50"></text></g><g><title>compiler::parse::tokens::legacy_else (1,201 samples, 0.73%)</title><rect x="41.9563%" y="549" width="0.7316%" height="15" fill="rgb(250,110,10)"/><text x="42.2063%" y="559.50"></text></g><g><title>nom::combinator::map::{{closure}} (1,201 samples, 0.73%)</title><rect x="41.9563%" y="533" width="0.7316%" height="15" fill="rgb(248,123,6)"/><text x="42.2063%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,201 samples, 0.73%)</title><rect x="41.9563%" y="517" width="0.7316%" height="15" fill="rgb(206,91,31)"/><text x="42.2063%" y="527.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (1,201 samples, 0.73%)</title><rect x="41.9563%" y="501" width="0.7316%" height="15" fill="rgb(211,154,13)"/><text x="42.2063%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,201 samples, 0.73%)</title><rect x="41.9563%" y="485" width="0.7316%" height="15" fill="rgb(225,148,7)"/><text x="42.2063%" y="495.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1,201 samples, 0.73%)</title><rect x="41.9563%" y="469" width="0.7316%" height="15" fill="rgb(220,160,43)"/><text x="42.2063%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,201 samples, 0.73%)</title><rect x="41.9563%" y="453" width="0.7316%" height="15" fill="rgb(213,52,39)"/><text x="42.2063%" y="463.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (799 samples, 0.49%)</title><rect x="42.2012%" y="437" width="0.4867%" height="15" fill="rgb(243,137,7)"/><text x="42.4512%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (346 samples, 0.21%)</title><rect x="44.7257%" y="485" width="0.2108%" height="15" fill="rgb(230,79,13)"/><text x="44.9757%" y="495.50"></text></g><g><title>compiler::parse::tokens::legacy_if (3,711 samples, 2.26%)</title><rect x="42.6880%" y="549" width="2.2607%" height="15" fill="rgb(247,105,23)"/><text x="42.9380%" y="559.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,711 samples, 2.26%)</title><rect x="42.6880%" y="533" width="2.2607%" height="15" fill="rgb(223,179,41)"/><text x="42.9380%" y="543.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,711 samples, 2.26%)</title><rect x="42.6880%" y="517" width="2.2607%" height="15" fill="rgb(218,9,34)"/><text x="42.9380%" y="527.50">&lt;..</text></g><g><title>nom::combinator::consumed::{{closure}} (1,821 samples, 1.11%)</title><rect x="43.8393%" y="501" width="1.1093%" height="15" fill="rgb(222,106,8)"/><text x="44.0893%" y="511.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (262 samples, 0.16%)</title><rect x="47.0290%" y="485" width="0.1596%" height="15" fill="rgb(211,220,0)"/><text x="47.2790%" y="495.50"></text></g><g><title>compiler::parse::tokens::new_each (3,680 samples, 2.24%)</title><rect x="44.9486%" y="549" width="2.2418%" height="15" fill="rgb(229,52,16)"/><text x="45.1986%" y="559.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,680 samples, 2.24%)</title><rect x="44.9486%" y="533" width="2.2418%" height="15" fill="rgb(212,155,18)"/><text x="45.1986%" y="543.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,680 samples, 2.24%)</title><rect x="44.9486%" y="517" width="2.2418%" height="15" fill="rgb(242,21,14)"/><text x="45.1986%" y="527.50">&lt;..</text></g><g><title>nom::combinator::consumed::{{closure}} (1,716 samples, 1.05%)</title><rect x="46.1451%" y="501" width="1.0454%" height="15" fill="rgb(222,19,48)"/><text x="46.3951%" y="511.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;A,X&gt; as nom::traits::Compare&lt;B&gt;&gt;::compare (375 samples, 0.23%)</title><rect x="47.7028%" y="421" width="0.2284%" height="15" fill="rgb(232,45,27)"/><text x="47.9528%" y="431.50"></text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (375 samples, 0.23%)</title><rect x="47.7028%" y="405" width="0.2284%" height="15" fill="rgb(249,103,42)"/><text x="47.9528%" y="415.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (375 samples, 0.23%)</title><rect x="47.7028%" y="389" width="0.2284%" height="15" fill="rgb(246,81,33)"/><text x="47.9528%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (292 samples, 0.18%)</title><rect x="47.7533%" y="373" width="0.1779%" height="15" fill="rgb(252,33,42)"/><text x="48.0033%" y="383.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (292 samples, 0.18%)</title><rect x="47.7533%" y="357" width="0.1779%" height="15" fill="rgb(209,212,41)"/><text x="48.0033%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (292 samples, 0.18%)</title><rect x="47.7533%" y="341" width="0.1779%" height="15" fill="rgb(207,154,6)"/><text x="48.0033%" y="351.50"></text></g><g><title>core::cmp::min (292 samples, 0.18%)</title><rect x="47.7533%" y="325" width="0.1779%" height="15" fill="rgb(223,64,47)"/><text x="48.0033%" y="335.50"></text></g><g><title>core::cmp::Ord::min (292 samples, 0.18%)</title><rect x="47.7533%" y="309" width="0.1779%" height="15" fill="rgb(211,161,38)"/><text x="48.0033%" y="319.50"></text></g><g><title>core::cmp::min_by (292 samples, 0.18%)</title><rect x="47.7533%" y="293" width="0.1779%" height="15" fill="rgb(219,138,40)"/><text x="48.0033%" y="303.50"></text></g><g><title>compiler::parse::tokens::new_else (1,218 samples, 0.74%)</title><rect x="47.1904%" y="549" width="0.7420%" height="15" fill="rgb(241,228,46)"/><text x="47.4404%" y="559.50"></text></g><g><title>nom::combinator::map::{{closure}} (1,218 samples, 0.74%)</title><rect x="47.1904%" y="533" width="0.7420%" height="15" fill="rgb(223,209,38)"/><text x="47.4404%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,218 samples, 0.74%)</title><rect x="47.1904%" y="517" width="0.7420%" height="15" fill="rgb(236,164,45)"/><text x="47.4404%" y="527.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (1,218 samples, 0.74%)</title><rect x="47.1904%" y="501" width="0.7420%" height="15" fill="rgb(231,15,5)"/><text x="47.4404%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,218 samples, 0.74%)</title><rect x="47.1904%" y="485" width="0.7420%" height="15" fill="rgb(252,35,15)"/><text x="47.4404%" y="495.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1,218 samples, 0.74%)</title><rect x="47.1904%" y="469" width="0.7420%" height="15" fill="rgb(248,181,18)"/><text x="47.4404%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,218 samples, 0.74%)</title><rect x="47.1904%" y="453" width="0.7420%" height="15" fill="rgb(233,39,42)"/><text x="47.4404%" y="463.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (839 samples, 0.51%)</title><rect x="47.4213%" y="437" width="0.5111%" height="15" fill="rgb(238,110,33)"/><text x="47.6713%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;A,X&gt; as nom::traits::Compare&lt;B&gt;&gt;::compare (373 samples, 0.23%)</title><rect x="48.4545%" y="421" width="0.2272%" height="15" fill="rgb(233,195,10)"/><text x="48.7045%" y="431.50"></text></g><g><title>&lt;&amp;str as nom::traits::Compare&lt;&amp;str&gt;&gt;::compare (373 samples, 0.23%)</title><rect x="48.4545%" y="405" width="0.2272%" height="15" fill="rgb(254,105,3)"/><text x="48.7045%" y="415.50"></text></g><g><title>&lt;&amp;[u8] as nom::traits::Compare&lt;&amp;[u8]&gt;&gt;::compare (373 samples, 0.23%)</title><rect x="48.4545%" y="389" width="0.2272%" height="15" fill="rgb(221,225,9)"/><text x="48.7045%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (253 samples, 0.15%)</title><rect x="48.5276%" y="373" width="0.1541%" height="15" fill="rgb(224,227,45)"/><text x="48.7776%" y="383.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (253 samples, 0.15%)</title><rect x="48.5276%" y="357" width="0.1541%" height="15" fill="rgb(229,198,43)"/><text x="48.7776%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (253 samples, 0.15%)</title><rect x="48.5276%" y="341" width="0.1541%" height="15" fill="rgb(206,209,35)"/><text x="48.7776%" y="351.50"></text></g><g><title>core::cmp::min (253 samples, 0.15%)</title><rect x="48.5276%" y="325" width="0.1541%" height="15" fill="rgb(245,195,53)"/><text x="48.7776%" y="335.50"></text></g><g><title>core::cmp::Ord::min (253 samples, 0.15%)</title><rect x="48.5276%" y="309" width="0.1541%" height="15" fill="rgb(240,92,26)"/><text x="48.7776%" y="319.50"></text></g><g><title>core::cmp::min_by (253 samples, 0.15%)</title><rect x="48.5276%" y="293" width="0.1541%" height="15" fill="rgb(207,40,23)"/><text x="48.7776%" y="303.50"></text></g><g><title>compiler::parse::tokens::new_end (1,232 samples, 0.75%)</title><rect x="47.9324%" y="549" width="0.7505%" height="15" fill="rgb(223,111,35)"/><text x="48.1824%" y="559.50"></text></g><g><title>nom::combinator::map::{{closure}} (1,232 samples, 0.75%)</title><rect x="47.9324%" y="533" width="0.7505%" height="15" fill="rgb(229,147,28)"/><text x="48.1824%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,232 samples, 0.75%)</title><rect x="47.9324%" y="517" width="0.7505%" height="15" fill="rgb(211,29,28)"/><text x="48.1824%" y="527.50"></text></g><g><title>nom::combinator::recognize::{{closure}} (1,232 samples, 0.75%)</title><rect x="47.9324%" y="501" width="0.7505%" height="15" fill="rgb(228,72,33)"/><text x="48.1824%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,232 samples, 0.75%)</title><rect x="47.9324%" y="485" width="0.7505%" height="15" fill="rgb(205,214,31)"/><text x="48.1824%" y="495.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (1,232 samples, 0.75%)</title><rect x="47.9324%" y="469" width="0.7505%" height="15" fill="rgb(224,111,15)"/><text x="48.1824%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,232 samples, 0.75%)</title><rect x="47.9324%" y="453" width="0.7505%" height="15" fill="rgb(253,21,26)"/><text x="48.1824%" y="463.50"></text></g><g><title>nom::bytes::complete::tag::{{closure}} (861 samples, 0.52%)</title><rect x="48.1584%" y="437" width="0.5245%" height="15" fill="rgb(245,139,43)"/><text x="48.4084%" y="447.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (271 samples, 0.17%)</title><rect x="50.6153%" y="485" width="0.1651%" height="15" fill="rgb(252,170,7)"/><text x="50.8653%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (18,179 samples, 11.07%)</title><rect x="39.7066%" y="661" width="11.0744%" height="15" fill="rgb(231,118,14)"/><text x="39.9566%" y="671.50">&lt;F as nom::inter..</text></g><g><title>core::ops::function::FnMut::call_mut (18,179 samples, 11.07%)</title><rect x="39.7066%" y="645" width="11.0744%" height="15" fill="rgb(238,83,0)"/><text x="39.9566%" y="655.50">core::ops::funct..</text></g><g><title>compiler::parse::tokens::token (18,179 samples, 11.07%)</title><rect x="39.7066%" y="629" width="11.0744%" height="15" fill="rgb(221,39,39)"/><text x="39.9566%" y="639.50">compiler::parse:..</text></g><g><title>nom::branch::alt::{{closure}} (18,179 samples, 11.07%)</title><rect x="39.7066%" y="613" width="11.0744%" height="15" fill="rgb(222,119,46)"/><text x="39.9566%" y="623.50">nom::branch::alt..</text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (18,179 samples, 11.07%)</title><rect x="39.7066%" y="597" width="11.0744%" height="15" fill="rgb(222,165,49)"/><text x="39.9566%" y="607.50">&lt;(A,B,C,D,E,F,G,..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (18,179 samples, 11.07%)</title><rect x="39.7066%" y="581" width="11.0744%" height="15" fill="rgb(219,113,52)"/><text x="39.9566%" y="591.50">&lt;F as nom::inter..</text></g><g><title>core::ops::function::FnMut::call_mut (18,179 samples, 11.07%)</title><rect x="39.7066%" y="565" width="11.0744%" height="15" fill="rgb(214,7,15)"/><text x="39.9566%" y="575.50">core::ops::funct..</text></g><g><title>compiler::parse::tokens::new_if (3,444 samples, 2.10%)</title><rect x="48.6829%" y="549" width="2.0980%" height="15" fill="rgb(235,32,4)"/><text x="48.9329%" y="559.50">c..</text></g><g><title>nom::combinator::map::{{closure}} (3,444 samples, 2.10%)</title><rect x="48.6829%" y="533" width="2.0980%" height="15" fill="rgb(238,90,54)"/><text x="48.9329%" y="543.50">n..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,444 samples, 2.10%)</title><rect x="48.6829%" y="517" width="2.0980%" height="15" fill="rgb(213,208,19)"/><text x="48.9329%" y="527.50">&lt;..</text></g><g><title>nom::combinator::consumed::{{closure}} (1,719 samples, 1.05%)</title><rect x="49.7338%" y="501" width="1.0472%" height="15" fill="rgb(233,156,4)"/><text x="49.9838%" y="511.50"></text></g><g><title>compiler::parse::tokens::tokens (18,181 samples, 11.08%)</title><rect x="39.7066%" y="693" width="11.0756%" height="15" fill="rgb(207,194,5)"/><text x="39.9566%" y="703.50">compiler::parse:..</text></g><g><title>compiler::parse::tokens::partition_list::{{closure}} (18,181 samples, 11.08%)</title><rect x="39.7066%" y="677" width="11.0756%" height="15" fill="rgb(206,111,30)"/><text x="39.9566%" y="687.50">compiler::parse:..</text></g><g><title>std::rt::lang_start_internal (18,757 samples, 11.43%)</title><rect x="39.4252%" y="853" width="11.4265%" height="15" fill="rgb(243,70,54)"/><text x="39.6752%" y="863.50">std::rt::lang_sta..</text></g><g><title>std::panic::catch_unwind (18,757 samples, 11.43%)</title><rect x="39.4252%" y="837" width="11.4265%" height="15" fill="rgb(242,28,8)"/><text x="39.6752%" y="847.50">std::panic::catch..</text></g><g><title>std::panicking::try (18,757 samples, 11.43%)</title><rect x="39.4252%" y="821" width="11.4265%" height="15" fill="rgb(219,106,18)"/><text x="39.6752%" y="831.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (18,757 samples, 11.43%)</title><rect x="39.4252%" y="805" width="11.4265%" height="15" fill="rgb(244,222,10)"/><text x="39.6752%" y="815.50">std::panicking::t..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (18,757 samples, 11.43%)</title><rect x="39.4252%" y="789" width="11.4265%" height="15" fill="rgb(236,179,52)"/><text x="39.6752%" y="799.50">core::ops::functi..</text></g><g><title>std::rt::lang_start::{{closure}} (18,757 samples, 11.43%)</title><rect x="39.4252%" y="773" width="11.4265%" height="15" fill="rgb(213,23,39)"/><text x="39.6752%" y="783.50">std::rt::lang_sta..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18,757 samples, 11.43%)</title><rect x="39.4252%" y="757" width="11.4265%" height="15" fill="rgb(238,48,10)"/><text x="39.6752%" y="767.50">std::sys_common::..</text></g><g><title>core::ops::function::FnOnce::call_once (18,757 samples, 11.43%)</title><rect x="39.4252%" y="741" width="11.4265%" height="15" fill="rgb(251,196,23)"/><text x="39.6752%" y="751.50">core::ops::functi..</text></g><g><title>bench::main (18,757 samples, 11.43%)</title><rect x="39.4252%" y="725" width="11.4265%" height="15" fill="rgb(250,152,24)"/><text x="39.6752%" y="735.50">bench::main</text></g><g><title>compiler::compile (18,757 samples, 11.43%)</title><rect x="39.4252%" y="709" width="11.4265%" height="15" fill="rgb(209,150,17)"/><text x="39.6752%" y="719.50">compiler::compile</text></g><g><title>[unknown] (83,493 samples, 50.86%)</title><rect x="0.0030%" y="869" width="50.8626%" height="15" fill="rgb(234,202,34)"/><text x="0.2530%" y="879.50">[unknown]</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (272 samples, 0.17%)</title><rect x="51.0642%" y="37" width="0.1657%" height="15" fill="rgb(253,148,53)"/><text x="51.3142%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (309 samples, 0.19%)</title><rect x="51.0435%" y="85" width="0.1882%" height="15" fill="rgb(218,129,16)"/><text x="51.2935%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (308 samples, 0.19%)</title><rect x="51.0441%" y="69" width="0.1876%" height="15" fill="rgb(216,85,19)"/><text x="51.2941%" y="79.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (286 samples, 0.17%)</title><rect x="51.0575%" y="53" width="0.1742%" height="15" fill="rgb(235,228,7)"/><text x="51.3075%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (310 samples, 0.19%)</title><rect x="51.0435%" y="117" width="0.1888%" height="15" fill="rgb(245,175,0)"/><text x="51.2935%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (310 samples, 0.19%)</title><rect x="51.0435%" y="101" width="0.1888%" height="15" fill="rgb(208,168,36)"/><text x="51.2935%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (335 samples, 0.20%)</title><rect x="51.0417%" y="149" width="0.2041%" height="15" fill="rgb(246,171,24)"/><text x="51.2917%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (335 samples, 0.20%)</title><rect x="51.0417%" y="133" width="0.2041%" height="15" fill="rgb(215,142,24)"/><text x="51.2917%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (424 samples, 0.26%)</title><rect x="51.0387%" y="213" width="0.2583%" height="15" fill="rgb(250,187,7)"/><text x="51.2887%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (424 samples, 0.26%)</title><rect x="51.0387%" y="197" width="0.2583%" height="15" fill="rgb(228,66,33)"/><text x="51.2887%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (424 samples, 0.26%)</title><rect x="51.0387%" y="181" width="0.2583%" height="15" fill="rgb(234,215,21)"/><text x="51.2887%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (419 samples, 0.26%)</title><rect x="51.0417%" y="165" width="0.2552%" height="15" fill="rgb(222,191,20)"/><text x="51.2917%" y="175.50"></text></g><g><title>compiler::generate::generator::gen_body (479 samples, 0.29%)</title><rect x="51.0161%" y="229" width="0.2918%" height="15" fill="rgb(245,79,54)"/><text x="51.2661%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (173 samples, 0.11%)</title><rect x="51.4164%" y="149" width="0.1054%" height="15" fill="rgb(240,10,37)"/><text x="51.6664%" y="159.50"></text></g><g><title>core::fmt::Write::write_fmt (236 samples, 0.14%)</title><rect x="51.3962%" y="181" width="0.1438%" height="15" fill="rgb(214,192,32)"/><text x="51.6462%" y="191.50"></text></g><g><title>core::fmt::write (234 samples, 0.14%)</title><rect x="51.3975%" y="165" width="0.1425%" height="15" fill="rgb(209,36,54)"/><text x="51.6475%" y="175.50"></text></g><g><title>alloc::fmt::format (259 samples, 0.16%)</title><rect x="51.3828%" y="197" width="0.1578%" height="15" fill="rgb(220,10,11)"/><text x="51.6328%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (168 samples, 0.10%)</title><rect x="51.6003%" y="149" width="0.1023%" height="15" fill="rgb(221,106,17)"/><text x="51.8503%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (168 samples, 0.10%)</title><rect x="51.6003%" y="133" width="0.1023%" height="15" fill="rgb(251,142,44)"/><text x="51.8503%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (168 samples, 0.10%)</title><rect x="51.6003%" y="117" width="0.1023%" height="15" fill="rgb(238,13,15)"/><text x="51.8503%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (198 samples, 0.12%)</title><rect x="51.5955%" y="181" width="0.1206%" height="15" fill="rgb(208,107,27)"/><text x="51.8455%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (198 samples, 0.12%)</title><rect x="51.5955%" y="165" width="0.1206%" height="15" fill="rgb(205,136,37)"/><text x="51.8455%" y="175.50"></text></g><g><title>compiler::generate::templates::escape_path (199 samples, 0.12%)</title><rect x="51.5955%" y="197" width="0.1212%" height="15" fill="rgb(250,205,27)"/><text x="51.8455%" y="207.50"></text></g><g><title>compiler::generate::templates::guard (608 samples, 0.37%)</title><rect x="51.3768%" y="213" width="0.3704%" height="15" fill="rgb(210,80,43)"/><text x="51.6268%" y="223.50"></text></g><g><title>compiler::generate::templates::expression (639 samples, 0.39%)</title><rect x="51.3627%" y="229" width="0.3893%" height="15" fill="rgb(247,160,36)"/><text x="51.6127%" y="239.50"></text></g><g><title>compiler::generate::templates::indent (271 samples, 0.17%)</title><rect x="51.8154%" y="213" width="0.1651%" height="15" fill="rgb(234,13,49)"/><text x="52.0654%" y="223.50"></text></g><g><title>compiler::generate::templates::if_else (388 samples, 0.24%)</title><rect x="51.7520%" y="229" width="0.2364%" height="15" fill="rgb(234,122,0)"/><text x="52.0020%" y="239.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (1,927 samples, 1.17%)</title><rect x="50.9619%" y="245" width="1.1739%" height="15" fill="rgb(207,146,38)"/><text x="51.2119%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,974 samples, 1.20%)</title><rect x="50.9388%" y="325" width="1.2025%" height="15" fill="rgb(207,177,25)"/><text x="51.1888%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1,974 samples, 1.20%)</title><rect x="50.9388%" y="309" width="1.2025%" height="15" fill="rgb(211,178,42)"/><text x="51.1888%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1,974 samples, 1.20%)</title><rect x="50.9388%" y="293" width="1.2025%" height="15" fill="rgb(230,69,54)"/><text x="51.1888%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,972 samples, 1.20%)</title><rect x="50.9400%" y="277" width="1.2013%" height="15" fill="rgb(214,135,41)"/><text x="51.1900%" y="287.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (1,952 samples, 1.19%)</title><rect x="50.9522%" y="261" width="1.1891%" height="15" fill="rgb(237,67,25)"/><text x="51.2022%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,997 samples, 1.22%)</title><rect x="50.9369%" y="357" width="1.2165%" height="15" fill="rgb(222,189,50)"/><text x="51.1869%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1,997 samples, 1.22%)</title><rect x="50.9369%" y="341" width="1.2165%" height="15" fill="rgb(245,148,34)"/><text x="51.1869%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,052 samples, 1.25%)</title><rect x="50.9363%" y="421" width="1.2500%" height="15" fill="rgb(222,29,6)"/><text x="51.1863%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,052 samples, 1.25%)</title><rect x="50.9363%" y="405" width="1.2500%" height="15" fill="rgb(221,189,43)"/><text x="51.1863%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,052 samples, 1.25%)</title><rect x="50.9363%" y="389" width="1.2500%" height="15" fill="rgb(207,36,27)"/><text x="51.1863%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,052 samples, 1.25%)</title><rect x="50.9363%" y="373" width="1.2500%" height="15" fill="rgb(217,90,24)"/><text x="51.1863%" y="383.50"></text></g><g><title>compiler::generate::generator::gen_body (2,131 samples, 1.30%)</title><rect x="50.9065%" y="437" width="1.2982%" height="15" fill="rgb(224,66,35)"/><text x="51.1565%" y="447.50"></text></g><g><title>compiler::generate::templates::indent (197 samples, 0.12%)</title><rect x="52.2400%" y="421" width="0.1200%" height="15" fill="rgb(221,13,50)"/><text x="52.4900%" y="431.50"></text></g><g><title>compiler::generate::templates::block (260 samples, 0.16%)</title><rect x="52.2046%" y="437" width="0.1584%" height="15" fill="rgb(236,68,49)"/><text x="52.4546%" y="447.50"></text></g><g><title>compiler::generate::templates::guard (190 samples, 0.12%)</title><rect x="52.3776%" y="421" width="0.1157%" height="15" fill="rgb(229,146,28)"/><text x="52.6276%" y="431.50"></text></g><g><title>compiler::generate::templates::expression (203 samples, 0.12%)</title><rect x="52.3722%" y="437" width="0.1237%" height="15" fill="rgb(225,31,38)"/><text x="52.6222%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (169 samples, 0.10%)</title><rect x="52.6329%" y="341" width="0.1030%" height="15" fill="rgb(250,208,3)"/><text x="52.8829%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (169 samples, 0.10%)</title><rect x="52.6329%" y="325" width="0.1030%" height="15" fill="rgb(246,54,23)"/><text x="52.8829%" y="335.50"></text></g><g><title>compiler::generate::templates::indent (237 samples, 0.14%)</title><rect x="52.5939%" y="421" width="0.1444%" height="15" fill="rgb(243,76,11)"/><text x="52.8439%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (175 samples, 0.11%)</title><rect x="52.6317%" y="405" width="0.1066%" height="15" fill="rgb(245,21,50)"/><text x="52.8817%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (175 samples, 0.11%)</title><rect x="52.6317%" y="389" width="0.1066%" height="15" fill="rgb(228,9,43)"/><text x="52.8817%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (175 samples, 0.11%)</title><rect x="52.6317%" y="373" width="0.1066%" height="15" fill="rgb(208,100,47)"/><text x="52.8817%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (173 samples, 0.11%)</title><rect x="52.6329%" y="357" width="0.1054%" height="15" fill="rgb(232,26,8)"/><text x="52.8829%" y="367.50"></text></g><g><title>compiler::generate::templates::iter (276 samples, 0.17%)</title><rect x="52.5732%" y="437" width="0.1681%" height="15" fill="rgb(216,166,38)"/><text x="52.8232%" y="447.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (3,202 samples, 1.95%)</title><rect x="50.8839%" y="453" width="1.9506%" height="15" fill="rgb(251,202,51)"/><text x="51.1339%" y="463.50">c..</text></g><g><title>&lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,216 samples, 1.96%)</title><rect x="50.8766%" y="533" width="1.9591%" height="15" fill="rgb(254,216,34)"/><text x="51.1266%" y="543.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find (3,216 samples, 1.96%)</title><rect x="50.8766%" y="517" width="1.9591%" height="15" fill="rgb(251,32,27)"/><text x="51.1266%" y="527.50">c..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,216 samples, 1.96%)</title><rect x="50.8766%" y="501" width="1.9591%" height="15" fill="rgb(208,127,28)"/><text x="51.1266%" y="511.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,216 samples, 1.96%)</title><rect x="50.8766%" y="485" width="1.9591%" height="15" fill="rgb(224,137,22)"/><text x="51.1266%" y="495.50">c..</text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (3,210 samples, 1.96%)</title><rect x="50.8803%" y="469" width="1.9555%" height="15" fill="rgb(254,70,32)"/><text x="51.1303%" y="479.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,235 samples, 1.97%)</title><rect x="50.8766%" y="565" width="1.9707%" height="15" fill="rgb(229,75,37)"/><text x="51.1266%" y="575.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (3,235 samples, 1.97%)</title><rect x="50.8766%" y="549" width="1.9707%" height="15" fill="rgb(252,64,23)"/><text x="51.1266%" y="559.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,254 samples, 1.98%)</title><rect x="50.8766%" y="629" width="1.9823%" height="15" fill="rgb(232,162,48)"/><text x="51.1266%" y="639.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,254 samples, 1.98%)</title><rect x="50.8766%" y="613" width="1.9823%" height="15" fill="rgb(246,160,12)"/><text x="51.1266%" y="623.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,254 samples, 1.98%)</title><rect x="50.8766%" y="597" width="1.9823%" height="15" fill="rgb(247,166,0)"/><text x="51.1266%" y="607.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,254 samples, 1.98%)</title><rect x="50.8766%" y="581" width="1.9823%" height="15" fill="rgb(249,219,21)"/><text x="51.1266%" y="591.50">&lt;..</text></g><g><title>compiler::generate::generator::gen_body (3,286 samples, 2.00%)</title><rect x="50.8687%" y="645" width="2.0018%" height="15" fill="rgb(205,209,3)"/><text x="51.1187%" y="655.50">c..</text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (275 samples, 0.17%)</title><rect x="52.9545%" y="485" width="0.1675%" height="15" fill="rgb(243,44,1)"/><text x="53.2045%" y="495.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (275 samples, 0.17%)</title><rect x="52.9545%" y="469" width="0.1675%" height="15" fill="rgb(206,159,16)"/><text x="53.2045%" y="479.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (269 samples, 0.16%)</title><rect x="52.9582%" y="453" width="0.1639%" height="15" fill="rgb(244,77,30)"/><text x="53.2082%" y="463.50"></text></g><g><title>core::slice::memchr::memchr (220 samples, 0.13%)</title><rect x="52.9880%" y="437" width="0.1340%" height="15" fill="rgb(218,69,12)"/><text x="53.2380%" y="447.50"></text></g><g><title>core::slice::memchr::memchr_general_case (212 samples, 0.13%)</title><rect x="52.9929%" y="421" width="0.1291%" height="15" fill="rgb(212,87,7)"/><text x="53.2429%" y="431.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (284 samples, 0.17%)</title><rect x="52.9521%" y="517" width="0.1730%" height="15" fill="rgb(245,114,25)"/><text x="53.2021%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (280 samples, 0.17%)</title><rect x="52.9545%" y="501" width="0.1706%" height="15" fill="rgb(210,61,42)"/><text x="53.2045%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (316 samples, 0.19%)</title><rect x="52.9491%" y="549" width="0.1925%" height="15" fill="rgb(211,52,33)"/><text x="53.1991%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (316 samples, 0.19%)</title><rect x="52.9491%" y="533" width="0.1925%" height="15" fill="rgb(234,58,33)"/><text x="53.1991%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (317 samples, 0.19%)</title><rect x="52.9491%" y="613" width="0.1931%" height="15" fill="rgb(220,115,36)"/><text x="53.1991%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (317 samples, 0.19%)</title><rect x="52.9491%" y="597" width="0.1931%" height="15" fill="rgb(243,153,54)"/><text x="53.1991%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (317 samples, 0.19%)</title><rect x="52.9491%" y="581" width="0.1931%" height="15" fill="rgb(251,47,18)"/><text x="53.1991%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (317 samples, 0.19%)</title><rect x="52.9491%" y="565" width="0.1931%" height="15" fill="rgb(242,102,42)"/><text x="53.1991%" y="575.50"></text></g><g><title>compiler::generate::templates::indent (404 samples, 0.25%)</title><rect x="52.8967%" y="629" width="0.2461%" height="15" fill="rgb(234,31,38)"/><text x="53.1467%" y="639.50"></text></g><g><title>compiler::generate::templates::wrapper (449 samples, 0.27%)</title><rect x="52.8705%" y="645" width="0.2735%" height="15" fill="rgb(221,117,51)"/><text x="53.1205%" y="655.50"></text></g><g><title>compiler::generate::generator::generate (3,737 samples, 2.28%)</title><rect x="50.8687%" y="661" width="2.2765%" height="15" fill="rgb(212,20,18)"/><text x="51.1187%" y="671.50">c..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (535 samples, 0.33%)</title><rect x="55.6021%" y="485" width="0.3259%" height="15" fill="rgb(245,133,36)"/><text x="55.8521%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,542 samples, 0.94%)</title><rect x="55.9280%" y="485" width="0.9394%" height="15" fill="rgb(212,6,19)"/><text x="56.1780%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,480 samples, 0.90%)</title><rect x="55.9657%" y="469" width="0.9016%" height="15" fill="rgb(218,1,36)"/><text x="56.2157%" y="479.50"></text></g><g><title>compiler::parse::tokens::interp_escaped (2,642 samples, 1.61%)</title><rect x="55.2926%" y="517" width="1.6095%" height="15" fill="rgb(246,84,54)"/><text x="55.5426%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (2,589 samples, 1.58%)</title><rect x="55.3249%" y="501" width="1.5772%" height="15" fill="rgb(242,110,6)"/><text x="55.5749%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (393 samples, 0.24%)</title><rect x="57.0269%" y="485" width="0.2394%" height="15" fill="rgb(214,47,5)"/><text x="57.2769%" y="495.50"></text></g><g><title>compiler::parse::tokens::interp_raw (2,129 samples, 1.30%)</title><rect x="56.9021%" y="517" width="1.2970%" height="15" fill="rgb(218,159,25)"/><text x="57.1521%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (2,078 samples, 1.27%)</title><rect x="56.9331%" y="501" width="1.2659%" height="15" fill="rgb(215,211,28)"/><text x="57.1831%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,531 samples, 0.93%)</title><rect x="57.2663%" y="485" width="0.9327%" height="15" fill="rgb(238,59,32)"/><text x="57.5163%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,462 samples, 0.89%)</title><rect x="57.3084%" y="469" width="0.8906%" height="15" fill="rgb(226,82,3)"/><text x="57.5584%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (423 samples, 0.26%)</title><rect x="58.3355%" y="485" width="0.2577%" height="15" fill="rgb(240,164,32)"/><text x="58.5855%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,387 samples, 0.84%)</title><rect x="58.5932%" y="485" width="0.8449%" height="15" fill="rgb(232,46,7)"/><text x="58.8432%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,348 samples, 0.82%)</title><rect x="58.6169%" y="469" width="0.8212%" height="15" fill="rgb(229,129,53)"/><text x="58.8669%" y="479.50"></text></g><g><title>compiler::parse::tokens::legacy_begin (2,037 samples, 1.24%)</title><rect x="58.1990%" y="517" width="1.2409%" height="15" fill="rgb(234,188,29)"/><text x="58.4490%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (1,983 samples, 1.21%)</title><rect x="58.2319%" y="501" width="1.2080%" height="15" fill="rgb(246,141,4)"/><text x="58.4819%" y="511.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (276 samples, 0.17%)</title><rect x="61.7676%" y="453" width="0.1681%" height="15" fill="rgb(229,23,39)"/><text x="62.0176%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,894 samples, 2.37%)</title><rect x="59.5642%" y="485" width="2.3722%" height="15" fill="rgb(206,12,3)"/><text x="59.8142%" y="495.50">&lt;F..</text></g><g><title>nom::combinator::recognize::{{closure}} (1,900 samples, 1.16%)</title><rect x="60.7789%" y="469" width="1.1574%" height="15" fill="rgb(252,226,20)"/><text x="61.0289%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (366 samples, 0.22%)</title><rect x="61.9364%" y="485" width="0.2230%" height="15" fill="rgb(216,123,35)"/><text x="62.1864%" y="495.50"></text></g><g><title>compiler::parse::tokens::legacy_else (5,124 samples, 3.12%)</title><rect x="59.4399%" y="517" width="3.1215%" height="15" fill="rgb(212,68,40)"/><text x="59.6899%" y="527.50">com..</text></g><g><title>nom::combinator::map::{{closure}} (5,073 samples, 3.09%)</title><rect x="59.4710%" y="501" width="3.0904%" height="15" fill="rgb(254,125,32)"/><text x="59.7210%" y="511.50">nom..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (660 samples, 0.40%)</title><rect x="62.1593%" y="485" width="0.4021%" height="15" fill="rgb(253,97,22)"/><text x="62.4093%" y="495.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (278 samples, 0.17%)</title><rect x="65.3149%" y="453" width="0.1694%" height="15" fill="rgb(241,101,14)"/><text x="65.5649%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (4,659 samples, 2.84%)</title><rect x="62.6497%" y="485" width="2.8382%" height="15" fill="rgb(238,103,29)"/><text x="62.8997%" y="495.50">&lt;F..</text></g><g><title>nom::combinator::consumed::{{closure}} (2,494 samples, 1.52%)</title><rect x="63.9686%" y="469" width="1.5193%" height="15" fill="rgb(233,195,47)"/><text x="64.2186%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (477 samples, 0.29%)</title><rect x="65.4879%" y="485" width="0.2906%" height="15" fill="rgb(246,218,30)"/><text x="65.7379%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,561 samples, 0.95%)</title><rect x="65.7785%" y="485" width="0.9509%" height="15" fill="rgb(219,145,47)"/><text x="66.0285%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,399 samples, 0.85%)</title><rect x="65.8772%" y="469" width="0.8522%" height="15" fill="rgb(243,12,26)"/><text x="66.1272%" y="479.50"></text></g><g><title>compiler::parse::tokens::legacy_end (6,857 samples, 4.18%)</title><rect x="62.5614%" y="517" width="4.1772%" height="15" fill="rgb(214,87,16)"/><text x="62.8114%" y="527.50">compi..</text></g><g><title>nom::combinator::map::{{closure}} (6,814 samples, 4.15%)</title><rect x="62.5876%" y="501" width="4.1510%" height="15" fill="rgb(208,99,42)"/><text x="62.8376%" y="511.50">nom::..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (438 samples, 0.27%)</title><rect x="66.8988%" y="485" width="0.2668%" height="15" fill="rgb(253,99,2)"/><text x="67.1488%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,424 samples, 0.87%)</title><rect x="67.1656%" y="485" width="0.8675%" height="15" fill="rgb(220,168,23)"/><text x="67.4156%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,382 samples, 0.84%)</title><rect x="67.1912%" y="469" width="0.8419%" height="15" fill="rgb(242,38,24)"/><text x="67.4412%" y="479.50"></text></g><g><title>nom::combinator::map::{{closure}} (2,048 samples, 1.25%)</title><rect x="66.7989%" y="501" width="1.2476%" height="15" fill="rgb(225,182,9)"/><text x="67.0489%" y="511.50"></text></g><g><title>compiler::parse::tokens::legacy_if (2,148 samples, 1.31%)</title><rect x="66.7386%" y="517" width="1.3085%" height="15" fill="rgb(243,178,37)"/><text x="66.9886%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (430 samples, 0.26%)</title><rect x="68.2170%" y="485" width="0.2619%" height="15" fill="rgb(232,139,19)"/><text x="68.4670%" y="495.50"></text></g><g><title>compiler::parse::tokens::new_each (2,112 samples, 1.29%)</title><rect x="68.0471%" y="517" width="1.2866%" height="15" fill="rgb(225,201,24)"/><text x="68.2971%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (2,067 samples, 1.26%)</title><rect x="68.0745%" y="501" width="1.2592%" height="15" fill="rgb(221,47,46)"/><text x="68.3245%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,403 samples, 0.85%)</title><rect x="68.4790%" y="485" width="0.8547%" height="15" fill="rgb(249,23,13)"/><text x="68.7290%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,345 samples, 0.82%)</title><rect x="68.5143%" y="469" width="0.8194%" height="15" fill="rgb(219,9,5)"/><text x="68.7643%" y="479.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (277 samples, 0.17%)</title><rect x="71.5669%" y="453" width="0.1687%" height="15" fill="rgb(254,171,16)"/><text x="71.8169%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,734 samples, 2.27%)</title><rect x="69.4622%" y="485" width="2.2747%" height="15" fill="rgb(230,171,20)"/><text x="69.7122%" y="495.50">&lt;..</text></g><g><title>nom::combinator::recognize::{{closure}} (1,928 samples, 1.17%)</title><rect x="70.5624%" y="469" width="1.1745%" height="15" fill="rgb(210,71,41)"/><text x="70.8124%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (443 samples, 0.27%)</title><rect x="71.7369%" y="485" width="0.2699%" height="15" fill="rgb(206,173,20)"/><text x="71.9869%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (540 samples, 0.33%)</title><rect x="72.0068%" y="485" width="0.3290%" height="15" fill="rgb(233,88,34)"/><text x="72.2568%" y="495.50"></text></g><g><title>compiler::parse::tokens::new_else (4,929 samples, 3.00%)</title><rect x="69.3337%" y="517" width="3.0027%" height="15" fill="rgb(223,209,46)"/><text x="69.5837%" y="527.50">com..</text></g><g><title>nom::combinator::map::{{closure}} (4,871 samples, 2.97%)</title><rect x="69.3690%" y="501" width="2.9673%" height="15" fill="rgb(250,43,18)"/><text x="69.6190%" y="511.50">nom..</text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::clone::Clone&gt;::clone (330 samples, 0.20%)</title><rect x="74.6293%" y="453" width="0.2010%" height="15" fill="rgb(208,13,10)"/><text x="74.8793%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (3,928 samples, 2.39%)</title><rect x="72.4387%" y="485" width="2.3929%" height="15" fill="rgb(212,200,36)"/><text x="72.6887%" y="495.50">&lt;F..</text></g><g><title>nom::combinator::recognize::{{closure}} (1,936 samples, 1.18%)</title><rect x="73.6522%" y="469" width="1.1794%" height="15" fill="rgb(225,90,30)"/><text x="73.9022%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (413 samples, 0.25%)</title><rect x="74.8316%" y="485" width="0.2516%" height="15" fill="rgb(236,182,39)"/><text x="75.0816%" y="495.50"></text></g><g><title>compiler::parse::tokens::new_end (5,129 samples, 3.12%)</title><rect x="72.3363%" y="517" width="3.1245%" height="15" fill="rgb(212,144,35)"/><text x="72.5863%" y="527.50">com..</text></g><g><title>nom::combinator::map::{{closure}} (5,055 samples, 3.08%)</title><rect x="72.3814%" y="501" width="3.0794%" height="15" fill="rgb(228,63,44)"/><text x="72.6314%" y="511.50">nom..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (620 samples, 0.38%)</title><rect x="75.0832%" y="485" width="0.3777%" height="15" fill="rgb(228,109,6)"/><text x="75.3332%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::from_error (433 samples, 0.26%)</title><rect x="75.6119%" y="485" width="0.2638%" height="15" fill="rgb(238,117,24)"/><text x="75.8619%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (1,366 samples, 0.83%)</title><rect x="75.8757%" y="485" width="0.8321%" height="15" fill="rgb(242,26,26)"/><text x="76.1257%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,319 samples, 0.80%)</title><rect x="75.9043%" y="469" width="0.8035%" height="15" fill="rgb(221,92,48)"/><text x="76.1543%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (35,155 samples, 21.42%)</title><rect x="55.2926%" y="549" width="21.4159%" height="15" fill="rgb(209,209,32)"/><text x="55.5426%" y="559.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;..</text></g><g><title>core::ops::function::FnMut::call_mut (35,155 samples, 21.42%)</title><rect x="55.2926%" y="533" width="21.4159%" height="15" fill="rgb(221,70,22)"/><text x="55.5426%" y="543.50">core::ops::function::FnMut::call_m..</text></g><g><title>compiler::parse::tokens::new_if (2,048 samples, 1.25%)</title><rect x="75.4608%" y="517" width="1.2476%" height="15" fill="rgb(248,145,5)"/><text x="75.7108%" y="527.50"></text></g><g><title>nom::combinator::map::{{closure}} (2,004 samples, 1.22%)</title><rect x="75.4877%" y="501" width="1.2208%" height="15" fill="rgb(226,116,26)"/><text x="75.7377%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (38,647 samples, 23.54%)</title><rect x="53.1812%" y="629" width="23.5431%" height="15" fill="rgb(244,5,17)"/><text x="53.4312%" y="639.50">&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::..</text></g><g><title>core::ops::function::FnMut::call_mut (38,363 samples, 23.37%)</title><rect x="53.3542%" y="613" width="23.3701%" height="15" fill="rgb(252,159,33)"/><text x="53.6042%" y="623.50">core::ops::function::FnMut::call_mut</text></g><g><title>compiler::parse::tokens::token (38,363 samples, 23.37%)</title><rect x="53.3542%" y="597" width="23.3701%" height="15" fill="rgb(206,71,0)"/><text x="53.6042%" y="607.50">compiler::parse::tokens::token</text></g><g><title>nom::branch::alt::{{closure}} (38,363 samples, 23.37%)</title><rect x="53.3542%" y="581" width="23.3701%" height="15" fill="rgb(233,118,54)"/><text x="53.6042%" y="591.50">nom::branch::alt::{{closure}}</text></g><g><title>&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch::Alt&lt;Input,Output,Error&gt;&gt;::choice (38,330 samples, 23.35%)</title><rect x="53.3743%" y="565" width="23.3500%" height="15" fill="rgb(234,83,48)"/><text x="53.6243%" y="575.50">&lt;(A,B,C,D,E,F,G,H,I,J) as nom::branch..</text></g><g><title>&lt;&amp;str as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (173 samples, 0.11%)</title><rect x="77.1593%" y="613" width="0.1054%" height="15" fill="rgb(228,3,54)"/><text x="77.4093%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (621 samples, 0.38%)</title><rect x="77.3755%" y="565" width="0.3783%" height="15" fill="rgb(226,155,13)"/><text x="77.6255%" y="575.50"></text></g><g><title>&lt;memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (450 samples, 0.27%)</title><rect x="77.4797%" y="549" width="0.2741%" height="15" fill="rgb(241,28,37)"/><text x="77.7297%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (450 samples, 0.27%)</title><rect x="77.4797%" y="533" width="0.2741%" height="15" fill="rgb(233,93,10)"/><text x="77.7297%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (312 samples, 0.19%)</title><rect x="77.8769%" y="517" width="0.1901%" height="15" fill="rgb(225,113,19)"/><text x="78.1269%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (312 samples, 0.19%)</title><rect x="77.8769%" y="501" width="0.1901%" height="15" fill="rgb(241,2,18)"/><text x="78.1269%" y="511.50"></text></g><g><title>memchr::x86::avx::forward_search1 (3,750 samples, 2.28%)</title><rect x="79.5661%" y="501" width="2.2844%" height="15" fill="rgb(228,207,21)"/><text x="79.8161%" y="511.50">m..</text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (1,370 samples, 0.83%)</title><rect x="81.0160%" y="485" width="0.8346%" height="15" fill="rgb(213,211,35)"/><text x="81.2660%" y="495.50"></text></g><g><title>memchr::x86::sse2::forward_search1 (168 samples, 0.10%)</title><rect x="82.2258%" y="485" width="0.1023%" height="15" fill="rgb(209,83,10)"/><text x="82.4758%" y="495.50"></text></g><g><title>&lt;memchr::iter::Memchr as core::iter::traits::iterator::Iterator&gt;::next (8,142 samples, 4.96%)</title><rect x="77.3755%" y="581" width="4.9600%" height="15" fill="rgb(209,164,1)"/><text x="77.6255%" y="591.50">&lt;memch..</text></g><g><title>memchr::memchr (7,521 samples, 4.58%)</title><rect x="77.7538%" y="565" width="4.5817%" height="15" fill="rgb(213,184,43)"/><text x="78.0038%" y="575.50">memch..</text></g><g><title>memchr::memchr::imp (7,403 samples, 4.51%)</title><rect x="77.8257%" y="549" width="4.5098%" height="15" fill="rgb(231,61,34)"/><text x="78.0757%" y="559.50">memch..</text></g><g><title>memchr::x86::memchr (7,403 samples, 4.51%)</title><rect x="77.8257%" y="533" width="4.5098%" height="15" fill="rgb(235,75,3)"/><text x="78.0757%" y="543.50">memch..</text></g><g><title>memchr::x86::avx::memchr (7,007 samples, 4.27%)</title><rect x="78.0669%" y="517" width="4.2686%" height="15" fill="rgb(220,106,47)"/><text x="78.3169%" y="527.50">memch..</text></g><g><title>memchr::x86::sse2::memchr (796 samples, 0.48%)</title><rect x="81.8506%" y="501" width="0.4849%" height="15" fill="rgb(210,196,33)"/><text x="82.1006%" y="511.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;&amp;str,X&gt; as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (9,254 samples, 5.64%)</title><rect x="76.7243%" y="629" width="5.6374%" height="15" fill="rgb(229,154,42)"/><text x="76.9743%" y="639.50">&lt;nom_lo..</text></g><g><title>core::iter::traits::iterator::Iterator::count (8,185 samples, 4.99%)</title><rect x="77.3755%" y="613" width="4.9862%" height="15" fill="rgb(228,114,26)"/><text x="77.6255%" y="623.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,185 samples, 4.99%)</title><rect x="77.3755%" y="597" width="4.9862%" height="15" fill="rgb(208,144,1)"/><text x="77.6255%" y="607.50">core::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (168 samples, 0.10%)</title><rect x="82.4001%" y="629" width="0.1023%" height="15" fill="rgb(239,112,37)"/><text x="82.6501%" y="639.50"></text></g><g><title>compiler::parse::tokens::tokens (48,277 samples, 29.41%)</title><rect x="53.1452%" y="661" width="29.4096%" height="15" fill="rgb(210,96,50)"/><text x="53.3952%" y="671.50">compiler::parse::tokens::tokens</text></g><g><title>compiler::parse::tokens::partition_list::{{closure}} (48,276 samples, 29.41%)</title><rect x="53.1458%" y="645" width="29.4090%" height="15" fill="rgb(222,178,2)"/><text x="53.3958%" y="655.50">compiler::parse::tokens::partition_list::{{clos..</text></g><g><title>hashbrown::map::make_hash (201 samples, 0.12%)</title><rect x="82.7692%" y="501" width="0.1224%" height="15" fill="rgb(226,74,18)"/><text x="83.0192%" y="511.50"></text></g><g><title>compiler::pre_fixer::combined::{{closure}} (417 samples, 0.25%)</title><rect x="82.7181%" y="581" width="0.2540%" height="15" fill="rgb(225,67,54)"/><text x="82.9681%" y="591.50"></text></g><g><title>regex::re_unicode::Captures::name (359 samples, 0.22%)</title><rect x="82.7534%" y="565" width="0.2187%" height="15" fill="rgb(251,92,32)"/><text x="83.0034%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (333 samples, 0.20%)</title><rect x="82.7692%" y="549" width="0.2029%" height="15" fill="rgb(228,149,22)"/><text x="83.0192%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (333 samples, 0.20%)</title><rect x="82.7692%" y="533" width="0.2029%" height="15" fill="rgb(243,54,13)"/><text x="83.0192%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (333 samples, 0.20%)</title><rect x="82.7692%" y="517" width="0.2029%" height="15" fill="rgb(243,180,28)"/><text x="83.0192%" y="527.50"></text></g><g><title>&lt;F as regex::re_unicode::Replacer&gt;::replace_append (466 samples, 0.28%)</title><rect x="82.6961%" y="597" width="0.2839%" height="15" fill="rgb(208,167,24)"/><text x="82.9461%" y="607.50"></text></g><g><title>__memset_avx2_unaligned_erms (183 samples, 0.11%)</title><rect x="83.1378%" y="405" width="0.1115%" height="15" fill="rgb(245,73,45)"/><text x="83.3878%" y="415.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (334 samples, 0.20%)</title><rect x="83.0464%" y="469" width="0.2035%" height="15" fill="rgb(237,203,48)"/><text x="83.2964%" y="479.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (334 samples, 0.20%)</title><rect x="83.0464%" y="453" width="0.2035%" height="15" fill="rgb(211,197,16)"/><text x="83.2964%" y="463.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (331 samples, 0.20%)</title><rect x="83.0482%" y="437" width="0.2016%" height="15" fill="rgb(243,99,51)"/><text x="83.2982%" y="447.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::clear (190 samples, 0.12%)</title><rect x="83.1341%" y="421" width="0.1157%" height="15" fill="rgb(215,123,29)"/><text x="83.3841%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (484 samples, 0.29%)</title><rect x="83.5593%" y="421" width="0.2948%" height="15" fill="rgb(239,186,37)"/><text x="83.8093%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (355 samples, 0.22%)</title><rect x="83.6379%" y="405" width="0.2163%" height="15" fill="rgb(252,136,39)"/><text x="83.8879%" y="415.50"></text></g><g><title>core::mem::swap (191 samples, 0.12%)</title><rect x="83.8542%" y="421" width="0.1164%" height="15" fill="rgb(223,213,32)"/><text x="84.1042%" y="431.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (191 samples, 0.12%)</title><rect x="83.8542%" y="405" width="0.1164%" height="15" fill="rgb(233,115,5)"/><text x="84.1042%" y="415.50"></text></g><g><title>core::ptr::swap_nonoverlapping (191 samples, 0.12%)</title><rect x="83.8542%" y="389" width="0.1164%" height="15" fill="rgb(207,226,44)"/><text x="84.1042%" y="399.50"></text></g><g><title>core::ptr::swap_nonoverlapping_bytes (191 samples, 0.12%)</title><rect x="83.8542%" y="373" width="0.1164%" height="15" fill="rgb(208,126,0)"/><text x="84.1042%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (191 samples, 0.12%)</title><rect x="83.8542%" y="357" width="0.1164%" height="15" fill="rgb(244,66,21)"/><text x="84.1042%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (1,755 samples, 1.07%)</title><rect x="84.5072%" y="405" width="1.0691%" height="15" fill="rgb(222,97,12)"/><text x="84.7572%" y="415.50"></text></g><g><title>core::ptr::read (1,217 samples, 0.74%)</title><rect x="84.8350%" y="389" width="0.7414%" height="15" fill="rgb(219,213,19)"/><text x="85.0850%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (746 samples, 0.45%)</title><rect x="87.9832%" y="389" width="0.4545%" height="15" fill="rgb(252,169,30)"/><text x="88.2332%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (746 samples, 0.45%)</title><rect x="87.9832%" y="373" width="0.4545%" height="15" fill="rgb(206,32,51)"/><text x="88.2332%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (380 samples, 0.23%)</title><rect x="88.4456%" y="389" width="0.2315%" height="15" fill="rgb(250,172,42)"/><text x="88.6956%" y="399.50"></text></g><g><title>regex::pikevm::Threads::caps (209 samples, 0.13%)</title><rect x="88.7624%" y="389" width="0.1273%" height="15" fill="rgb(209,34,43)"/><text x="89.0124%" y="399.50"></text></g><g><title>regex::sparse::SparseSet::contains (960 samples, 0.58%)</title><rect x="88.8897%" y="389" width="0.5848%" height="15" fill="rgb(223,11,35)"/><text x="89.1397%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (658 samples, 0.40%)</title><rect x="89.0737%" y="373" width="0.4008%" height="15" fill="rgb(251,219,26)"/><text x="89.3237%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (658 samples, 0.40%)</title><rect x="89.0737%" y="357" width="0.4008%" height="15" fill="rgb(231,119,3)"/><text x="89.3237%" y="367.50"></text></g><g><title>regex::pikevm::Fsm&lt;I&gt;::add (9,323 samples, 5.68%)</title><rect x="83.9772%" y="421" width="5.6794%" height="15" fill="rgb(216,97,11)"/><text x="84.2272%" y="431.50">regex::..</text></g><g><title>regex::pikevm::Fsm&lt;I&gt;::add_step (6,559 samples, 4.00%)</title><rect x="85.6610%" y="405" width="3.9956%" height="15" fill="rgb(223,59,9)"/><text x="85.9110%" y="415.50">rege..</text></g><g><title>regex::sparse::SparseSet::insert (299 samples, 0.18%)</title><rect x="89.4745%" y="389" width="0.1821%" height="15" fill="rgb(233,93,31)"/><text x="89.7245%" y="399.50"></text></g><g><title>&lt;regex::prog::Program as core::ops::deref::Deref&gt;::deref (166 samples, 0.10%)</title><rect x="90.7636%" y="405" width="0.1011%" height="15" fill="rgb(239,81,33)"/><text x="91.0136%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (166 samples, 0.10%)</title><rect x="90.7636%" y="389" width="0.1011%" height="15" fill="rgb(213,120,34)"/><text x="91.0136%" y="399.50"></text></g><g><title>regex::input::&lt;impl core::cmp::PartialEq&lt;regex::input::Char&gt; for char&gt;::eq (267 samples, 0.16%)</title><rect x="90.8659%" y="405" width="0.1627%" height="15" fill="rgb(243,49,53)"/><text x="91.1159%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::pop (316 samples, 0.19%)</title><rect x="91.2119%" y="389" width="0.1925%" height="15" fill="rgb(247,216,33)"/><text x="91.4619%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (214 samples, 0.13%)</title><rect x="91.8034%" y="373" width="0.1304%" height="15" fill="rgb(226,26,14)"/><text x="92.0534%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (214 samples, 0.13%)</title><rect x="91.8034%" y="357" width="0.1304%" height="15" fill="rgb(215,49,53)"/><text x="92.0534%" y="367.50"></text></g><g><title>regex::sparse::SparseSet::contains (185 samples, 0.11%)</title><rect x="92.0039%" y="373" width="0.1127%" height="15" fill="rgb(245,162,40)"/><text x="92.2539%" y="383.50"></text></g><g><title>regex::pikevm::Fsm&lt;I&gt;::add (1,842 samples, 1.12%)</title><rect x="91.0285%" y="405" width="1.1221%" height="15" fill="rgb(229,68,17)"/><text x="91.2785%" y="415.50"></text></g><g><title>regex::pikevm::Fsm&lt;I&gt;::add_step (1,069 samples, 0.65%)</title><rect x="91.4994%" y="389" width="0.6512%" height="15" fill="rgb(213,182,10)"/><text x="91.7494%" y="399.50"></text></g><g><title>regex::pikevm::Fsm&lt;I&gt;::step (4,283 samples, 2.61%)</title><rect x="89.6567%" y="421" width="2.6091%" height="15" fill="rgb(245,125,30)"/><text x="89.9067%" y="431.50">re..</text></g><g><title>regex::prog::InstRanges::matches (189 samples, 0.12%)</title><rect x="92.1507%" y="405" width="0.1151%" height="15" fill="rgb(232,202,2)"/><text x="92.4007%" y="415.50"></text></g><g><title>regex::pikevm::Threads::caps (552 samples, 0.34%)</title><rect x="92.2658%" y="421" width="0.3363%" height="15" fill="rgb(237,140,51)"/><text x="92.5158%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (244 samples, 0.15%)</title><rect x="92.4534%" y="405" width="0.1486%" height="15" fill="rgb(236,157,25)"/><text x="92.7034%" y="415.50"></text></g><g><title>regex::pikevm::Fsm&lt;I&gt;::exec_ (15,372 samples, 9.36%)</title><rect x="83.2566%" y="437" width="9.3644%" height="15" fill="rgb(219,209,0)"/><text x="83.5066%" y="447.50">regex::pikevm..</text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (15,739 samples, 9.59%)</title><rect x="83.0336%" y="501" width="9.5879%" height="15" fill="rgb(240,116,54)"/><text x="83.2836%" y="511.50">regex::exec::E..</text></g><g><title>regex::exec::ExecNoSync::exec_nfa (15,732 samples, 9.58%)</title><rect x="83.0379%" y="485" width="9.5837%" height="15" fill="rgb(216,10,36)"/><text x="83.2879%" y="495.50">regex::exec::E..</text></g><g><title>regex::exec::ExecNoSync::exec_pikevm (15,384 samples, 9.37%)</title><rect x="83.2499%" y="469" width="9.3717%" height="15" fill="rgb(222,72,44)"/><text x="83.4999%" y="479.50">regex::exec::..</text></g><g><title>regex::pikevm::Fsm&lt;I&gt;::exec (15,384 samples, 9.37%)</title><rect x="83.2499%" y="453" width="9.3717%" height="15" fill="rgb(232,159,9)"/><text x="83.4999%" y="463.50">regex::pikevm..</text></g><g><title>aho_corasick::packed::api::Searcher::find (226 samples, 0.14%)</title><rect x="92.7769%" y="421" width="0.1377%" height="15" fill="rgb(210,39,32)"/><text x="93.0269%" y="431.50"></text></g><g><title>aho_corasick::packed::api::Searcher::find_at (226 samples, 0.14%)</title><rect x="92.7769%" y="405" width="0.1377%" height="15" fill="rgb(216,194,45)"/><text x="93.0269%" y="415.50"></text></g><g><title>aho_corasick::packed::teddy::runtime::Teddy::find_at (226 samples, 0.14%)</title><rect x="92.7769%" y="389" width="0.1377%" height="15" fill="rgb(218,18,35)"/><text x="93.0269%" y="399.50"></text></g><g><title>aho_corasick::packed::teddy::runtime::TeddySlim1Mask256::find_at (220 samples, 0.13%)</title><rect x="92.7806%" y="373" width="0.1340%" height="15" fill="rgb(207,83,51)"/><text x="93.0306%" y="383.50"></text></g><g><title>regex::dfa::Fsm::exec_at (480 samples, 0.29%)</title><rect x="92.6246%" y="469" width="0.2924%" height="15" fill="rgb(225,63,43)"/><text x="92.8746%" y="479.50"></text></g><g><title>regex::dfa::Fsm::prefix_at (246 samples, 0.15%)</title><rect x="92.7672%" y="453" width="0.1499%" height="15" fill="rgb(207,57,36)"/><text x="93.0172%" y="463.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::find (240 samples, 0.15%)</title><rect x="92.7708%" y="437" width="0.1462%" height="15" fill="rgb(216,99,33)"/><text x="93.0208%" y="447.50"></text></g><g><title>regex::dfa::Fsm::forward (494 samples, 0.30%)</title><rect x="92.6228%" y="485" width="0.3009%" height="15" fill="rgb(225,42,16)"/><text x="92.8728%" y="495.50"></text></g><g><title>regex::dfa::Fsm::next_si (230 samples, 0.14%)</title><rect x="92.9743%" y="453" width="0.1401%" height="15" fill="rgb(220,201,45)"/><text x="93.2243%" y="463.50"></text></g><g><title>regex::dfa::Transitions::next_unchecked (211 samples, 0.13%)</title><rect x="92.9859%" y="437" width="0.1285%" height="15" fill="rgb(225,33,4)"/><text x="93.2359%" y="447.50"></text></g><g><title>regex::dfa::Fsm::exec_at_reverse (321 samples, 0.20%)</title><rect x="92.9298%" y="469" width="0.1955%" height="15" fill="rgb(224,33,50)"/><text x="93.1798%" y="479.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (856 samples, 0.52%)</title><rect x="92.6216%" y="501" width="0.5215%" height="15" fill="rgb(246,198,51)"/><text x="92.8716%" y="511.50"></text></g><g><title>regex::dfa::Fsm::reverse (360 samples, 0.22%)</title><rect x="92.9237%" y="485" width="0.2193%" height="15" fill="rgb(205,22,4)"/><text x="93.1737%" y="495.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (16,646 samples, 10.14%)</title><rect x="83.0068%" y="533" width="10.1405%" height="15" fill="rgb(206,3,8)"/><text x="83.2568%" y="543.50">&lt;regex::exec::E..</text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (16,646 samples, 10.14%)</title><rect x="83.0068%" y="517" width="10.1405%" height="15" fill="rgb(251,23,15)"/><text x="83.2568%" y="527.50">&lt;regex::exec::E..</text></g><g><title>&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,713 samples, 10.18%)</title><rect x="82.9983%" y="549" width="10.1813%" height="15" fill="rgb(252,88,28)"/><text x="83.2483%" y="559.50">&lt;regex::re_trai..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,772 samples, 10.22%)</title><rect x="82.9800%" y="581" width="10.2172%" height="15" fill="rgb(212,127,14)"/><text x="83.2300%" y="591.50">&lt;core::iter::ad..</text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (16,745 samples, 10.20%)</title><rect x="82.9965%" y="565" width="10.2008%" height="15" fill="rgb(247,145,37)"/><text x="83.2465%" y="575.50">&lt;regex::re_unic..</text></g><g><title>&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16,777 samples, 10.22%)</title><rect x="82.9800%" y="597" width="10.2203%" height="15" fill="rgb(209,117,53)"/><text x="83.2300%" y="607.50">&lt;core::iter::ad..</text></g><g><title>compiler::pre_fixer::combined (17,465 samples, 10.64%)</title><rect x="82.6833%" y="645" width="10.6394%" height="15" fill="rgb(212,90,42)"/><text x="82.9333%" y="655.50">compiler::pre_fi..</text></g><g><title>regex::re_unicode::Regex::replace_all (17,464 samples, 10.64%)</title><rect x="82.6839%" y="629" width="10.6388%" height="15" fill="rgb(218,164,37)"/><text x="82.9339%" y="639.50">regex::re_unicod..</text></g><g><title>regex::re_unicode::Regex::replacen (17,464 samples, 10.64%)</title><rect x="82.6839%" y="613" width="10.6388%" height="15" fill="rgb(246,65,34)"/><text x="82.9339%" y="623.50">regex::re_unicod..</text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (390 samples, 0.24%)</title><rect x="93.4829%" y="69" width="0.2376%" height="15" fill="rgb(231,100,33)"/><text x="93.7329%" y="79.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (390 samples, 0.24%)</title><rect x="93.4829%" y="53" width="0.2376%" height="15" fill="rgb(228,126,14)"/><text x="93.7329%" y="63.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (396 samples, 0.24%)</title><rect x="93.4823%" y="149" width="0.2412%" height="15" fill="rgb(215,173,21)"/><text x="93.7323%" y="159.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (396 samples, 0.24%)</title><rect x="93.4823%" y="133" width="0.2412%" height="15" fill="rgb(210,6,40)"/><text x="93.7323%" y="143.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (396 samples, 0.24%)</title><rect x="93.4823%" y="117" width="0.2412%" height="15" fill="rgb(212,48,18)"/><text x="93.7323%" y="127.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (396 samples, 0.24%)</title><rect x="93.4823%" y="101" width="0.2412%" height="15" fill="rgb(230,214,11)"/><text x="93.7323%" y="111.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (396 samples, 0.24%)</title><rect x="93.4823%" y="85" width="0.2412%" height="15" fill="rgb(254,105,39)"/><text x="93.7323%" y="95.50"></text></g><g><title>&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (652 samples, 0.40%)</title><rect x="93.4811%" y="197" width="0.3972%" height="15" fill="rgb(245,158,5)"/><text x="93.7311%" y="207.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (652 samples, 0.40%)</title><rect x="93.4811%" y="181" width="0.3972%" height="15" fill="rgb(249,208,11)"/><text x="93.7311%" y="191.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (652 samples, 0.40%)</title><rect x="93.4811%" y="165" width="0.3972%" height="15" fill="rgb(210,39,28)"/><text x="93.7311%" y="175.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (254 samples, 0.15%)</title><rect x="93.7236%" y="149" width="0.1547%" height="15" fill="rgb(211,56,53)"/><text x="93.9736%" y="159.50"></text></g><g><title>regex::dfa::Fsm::reverse (169 samples, 0.10%)</title><rect x="93.7754%" y="133" width="0.1030%" height="15" fill="rgb(226,201,30)"/><text x="94.0254%" y="143.50"></text></g><g><title>regex::dfa::Fsm::exec_at_reverse (169 samples, 0.10%)</title><rect x="93.7754%" y="117" width="0.1030%" height="15" fill="rgb(239,101,34)"/><text x="94.0254%" y="127.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek (653 samples, 0.40%)</title><rect x="93.4811%" y="277" width="0.3978%" height="15" fill="rgb(226,209,5)"/><text x="93.7311%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (653 samples, 0.40%)</title><rect x="93.4811%" y="261" width="0.3978%" height="15" fill="rgb(250,105,47)"/><text x="93.7311%" y="271.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek::{{closure}} (653 samples, 0.40%)</title><rect x="93.4811%" y="245" width="0.3978%" height="15" fill="rgb(230,72,3)"/><text x="93.7311%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 0.40%)</title><rect x="93.4811%" y="229" width="0.3978%" height="15" fill="rgb(232,218,39)"/><text x="93.7311%" y="239.50"></text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 0.40%)</title><rect x="93.4811%" y="213" width="0.3978%" height="15" fill="rgb(248,166,6)"/><text x="93.7311%" y="223.50"></text></g><g><title>compiler::pre_fixer::fix_iter (756 samples, 0.46%)</title><rect x="93.4196%" y="325" width="0.4605%" height="15" fill="rgb(247,89,20)"/><text x="93.6696%" y="335.50"></text></g><g><title>regex::re_unicode::Regex::replace (756 samples, 0.46%)</title><rect x="93.4196%" y="309" width="0.4605%" height="15" fill="rgb(248,130,54)"/><text x="93.6696%" y="319.50"></text></g><g><title>regex::re_unicode::Regex::replacen (756 samples, 0.46%)</title><rect x="93.4196%" y="293" width="0.4605%" height="15" fill="rgb(234,196,4)"/><text x="93.6696%" y="303.50"></text></g><g><title>&lt;F as regex::re_unicode::Replacer&gt;::replace_append (781 samples, 0.48%)</title><rect x="93.4056%" y="357" width="0.4758%" height="15" fill="rgb(250,143,31)"/><text x="93.6556%" y="367.50"></text></g><g><title>compiler::pre_fixer::fix_iter::{{closure}} (776 samples, 0.47%)</title><rect x="93.4086%" y="341" width="0.4727%" height="15" fill="rgb(211,110,34)"/><text x="93.6586%" y="351.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (244 samples, 0.15%)</title><rect x="94.1007%" y="117" width="0.1486%" height="15" fill="rgb(215,124,48)"/><text x="94.3507%" y="127.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (722 samples, 0.44%)</title><rect x="93.8856%" y="149" width="0.4398%" height="15" fill="rgb(216,46,13)"/><text x="94.1356%" y="159.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (720 samples, 0.44%)</title><rect x="93.8868%" y="133" width="0.4386%" height="15" fill="rgb(205,184,25)"/><text x="94.1368%" y="143.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (725 samples, 0.44%)</title><rect x="93.8856%" y="229" width="0.4417%" height="15" fill="rgb(228,1,10)"/><text x="94.1356%" y="239.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (725 samples, 0.44%)</title><rect x="93.8856%" y="213" width="0.4417%" height="15" fill="rgb(213,116,27)"/><text x="94.1356%" y="223.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (725 samples, 0.44%)</title><rect x="93.8856%" y="197" width="0.4417%" height="15" fill="rgb(241,95,50)"/><text x="94.1356%" y="207.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (725 samples, 0.44%)</title><rect x="93.8856%" y="181" width="0.4417%" height="15" fill="rgb(238,48,32)"/><text x="94.1356%" y="191.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (725 samples, 0.44%)</title><rect x="93.8856%" y="165" width="0.4417%" height="15" fill="rgb(235,113,49)"/><text x="94.1356%" y="175.50"></text></g><g><title>regex::dfa::Fsm::forward (223 samples, 0.14%)</title><rect x="94.3279%" y="213" width="0.1358%" height="15" fill="rgb(205,127,43)"/><text x="94.5779%" y="223.50"></text></g><g><title>regex::dfa::Fsm::exec_at (223 samples, 0.14%)</title><rect x="94.3279%" y="197" width="0.1358%" height="15" fill="rgb(250,162,2)"/><text x="94.5779%" y="207.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek (1,246 samples, 0.76%)</title><rect x="93.8850%" y="357" width="0.7590%" height="15" fill="rgb(220,13,41)"/><text x="94.1350%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1,246 samples, 0.76%)</title><rect x="93.8850%" y="341" width="0.7590%" height="15" fill="rgb(249,221,25)"/><text x="94.1350%" y="351.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek::{{closure}} (1,245 samples, 0.76%)</title><rect x="93.8856%" y="325" width="0.7584%" height="15" fill="rgb(215,208,19)"/><text x="94.1356%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,245 samples, 0.76%)</title><rect x="93.8856%" y="309" width="0.7584%" height="15" fill="rgb(236,175,2)"/><text x="94.1356%" y="319.50"></text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (1,245 samples, 0.76%)</title><rect x="93.8856%" y="293" width="0.7584%" height="15" fill="rgb(241,52,2)"/><text x="94.1356%" y="303.50"></text></g><g><title>&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,245 samples, 0.76%)</title><rect x="93.8856%" y="277" width="0.7584%" height="15" fill="rgb(248,140,14)"/><text x="94.1356%" y="287.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (1,245 samples, 0.76%)</title><rect x="93.8856%" y="261" width="0.7584%" height="15" fill="rgb(253,22,42)"/><text x="94.1356%" y="271.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (1,245 samples, 0.76%)</title><rect x="93.8856%" y="245" width="0.7584%" height="15" fill="rgb(234,61,47)"/><text x="94.1356%" y="255.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (520 samples, 0.32%)</title><rect x="94.3273%" y="229" width="0.3168%" height="15" fill="rgb(208,226,15)"/><text x="94.5773%" y="239.50"></text></g><g><title>regex::dfa::Fsm::reverse (296 samples, 0.18%)</title><rect x="94.4637%" y="213" width="0.1803%" height="15" fill="rgb(217,221,4)"/><text x="94.7137%" y="223.50"></text></g><g><title>regex::dfa::Fsm::exec_at_reverse (296 samples, 0.18%)</title><rect x="94.4637%" y="197" width="0.1803%" height="15" fill="rgb(212,174,34)"/><text x="94.7137%" y="207.50"></text></g><g><title>regex::dfa::Fsm::next_si (219 samples, 0.13%)</title><rect x="94.5106%" y="181" width="0.1334%" height="15" fill="rgb(253,83,4)"/><text x="94.7606%" y="191.50"></text></g><g><title>regex::dfa::Transitions::next_unchecked (219 samples, 0.13%)</title><rect x="94.5106%" y="165" width="0.1334%" height="15" fill="rgb(250,195,49)"/><text x="94.7606%" y="175.50"></text></g><g><title>compiler::pre_fixer::fix_iter (2,035 samples, 1.24%)</title><rect x="93.4050%" y="405" width="1.2397%" height="15" fill="rgb(241,192,25)"/><text x="93.6550%" y="415.50"></text></g><g><title>regex::re_unicode::Regex::replace (2,034 samples, 1.24%)</title><rect x="93.4056%" y="389" width="1.2391%" height="15" fill="rgb(208,124,10)"/><text x="93.6556%" y="399.50"></text></g><g><title>regex::re_unicode::Regex::replacen (2,034 samples, 1.24%)</title><rect x="93.4056%" y="373" width="1.2391%" height="15" fill="rgb(222,33,0)"/><text x="93.6556%" y="383.50"></text></g><g><title>&lt;F as regex::re_unicode::Replacer&gt;::replace_append (2,063 samples, 1.26%)</title><rect x="93.3910%" y="437" width="1.2567%" height="15" fill="rgb(234,209,28)"/><text x="93.6410%" y="447.50"></text></g><g><title>compiler::pre_fixer::fix_iter::{{closure}} (2,057 samples, 1.25%)</title><rect x="93.3946%" y="421" width="1.2531%" height="15" fill="rgb(224,11,23)"/><text x="93.6446%" y="431.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::at (180 samples, 0.11%)</title><rect x="94.9267%" y="197" width="0.1097%" height="15" fill="rgb(232,99,1)"/><text x="95.1767%" y="207.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (476 samples, 0.29%)</title><rect x="95.0961%" y="197" width="0.2900%" height="15" fill="rgb(237,95,45)"/><text x="95.3461%" y="207.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (1,449 samples, 0.88%)</title><rect x="94.6508%" y="229" width="0.8827%" height="15" fill="rgb(208,109,11)"/><text x="94.9008%" y="239.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (1,449 samples, 0.88%)</title><rect x="94.6508%" y="213" width="0.8827%" height="15" fill="rgb(216,190,48)"/><text x="94.9008%" y="223.50"></text></g><g><title>regex::prog::InstRanges::matches (242 samples, 0.15%)</title><rect x="95.3860%" y="197" width="0.1474%" height="15" fill="rgb(251,171,36)"/><text x="95.6360%" y="207.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (1,605 samples, 0.98%)</title><rect x="94.6501%" y="309" width="0.9777%" height="15" fill="rgb(230,62,22)"/><text x="94.9001%" y="319.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (1,605 samples, 0.98%)</title><rect x="94.6501%" y="293" width="0.9777%" height="15" fill="rgb(225,114,35)"/><text x="94.9001%" y="303.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (1,605 samples, 0.98%)</title><rect x="94.6501%" y="277" width="0.9777%" height="15" fill="rgb(215,118,42)"/><text x="94.9001%" y="287.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (1,605 samples, 0.98%)</title><rect x="94.6501%" y="261" width="0.9777%" height="15" fill="rgb(243,119,21)"/><text x="94.9001%" y="271.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (1,604 samples, 0.98%)</title><rect x="94.6508%" y="245" width="0.9771%" height="15" fill="rgb(252,177,53)"/><text x="94.9008%" y="255.50"></text></g><g><title>regex::dfa::Fsm::exec_at (413 samples, 0.25%)</title><rect x="95.6279%" y="277" width="0.2516%" height="15" fill="rgb(237,209,29)"/><text x="95.8779%" y="287.50"></text></g><g><title>regex::dfa::Fsm::forward (414 samples, 0.25%)</title><rect x="95.6279%" y="293" width="0.2522%" height="15" fill="rgb(212,65,23)"/><text x="95.8779%" y="303.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (2,325 samples, 1.42%)</title><rect x="94.6495%" y="341" width="1.4164%" height="15" fill="rgb(230,222,46)"/><text x="94.8995%" y="351.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (2,325 samples, 1.42%)</title><rect x="94.6495%" y="325" width="1.4164%" height="15" fill="rgb(215,135,32)"/><text x="94.8995%" y="335.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (719 samples, 0.44%)</title><rect x="95.6279%" y="309" width="0.4380%" height="15" fill="rgb(246,101,22)"/><text x="95.8779%" y="319.50"></text></g><g><title>regex::dfa::Fsm::reverse (305 samples, 0.19%)</title><rect x="95.8801%" y="293" width="0.1858%" height="15" fill="rgb(206,107,13)"/><text x="96.1301%" y="303.50"></text></g><g><title>regex::dfa::Fsm::exec_at_reverse (305 samples, 0.19%)</title><rect x="95.8801%" y="277" width="0.1858%" height="15" fill="rgb(250,100,44)"/><text x="96.1301%" y="287.50"></text></g><g><title>regex::dfa::Fsm::next_si (233 samples, 0.14%)</title><rect x="95.9239%" y="261" width="0.1419%" height="15" fill="rgb(231,147,38)"/><text x="96.1739%" y="271.50"></text></g><g><title>regex::dfa::Transitions::next_unchecked (232 samples, 0.14%)</title><rect x="95.9246%" y="245" width="0.1413%" height="15" fill="rgb(229,8,40)"/><text x="96.1746%" y="255.50"></text></g><g><title>compiler::pre_fixer::fix_iter (4,393 samples, 2.68%)</title><rect x="93.3910%" y="485" width="2.6761%" height="15" fill="rgb(221,135,30)"/><text x="93.6410%" y="495.50">co..</text></g><g><title>regex::re_unicode::Regex::replace (4,393 samples, 2.68%)</title><rect x="93.3910%" y="469" width="2.6761%" height="15" fill="rgb(249,193,18)"/><text x="93.6410%" y="479.50">re..</text></g><g><title>regex::re_unicode::Regex::replacen (4,393 samples, 2.68%)</title><rect x="93.3910%" y="453" width="2.6761%" height="15" fill="rgb(209,133,39)"/><text x="93.6410%" y="463.50">re..</text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek (2,327 samples, 1.42%)</title><rect x="94.6495%" y="437" width="1.4176%" height="15" fill="rgb(232,100,14)"/><text x="94.8995%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2,327 samples, 1.42%)</title><rect x="94.6495%" y="421" width="1.4176%" height="15" fill="rgb(224,185,1)"/><text x="94.8995%" y="431.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek::{{closure}} (2,327 samples, 1.42%)</title><rect x="94.6495%" y="405" width="1.4176%" height="15" fill="rgb(223,139,8)"/><text x="94.8995%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,327 samples, 1.42%)</title><rect x="94.6495%" y="389" width="1.4176%" height="15" fill="rgb(232,213,38)"/><text x="94.8995%" y="399.50"></text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (2,327 samples, 1.42%)</title><rect x="94.6495%" y="373" width="1.4176%" height="15" fill="rgb(207,94,22)"/><text x="94.8995%" y="383.50"></text></g><g><title>&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,327 samples, 1.42%)</title><rect x="94.6495%" y="357" width="1.4176%" height="15" fill="rgb(219,183,54)"/><text x="94.8995%" y="367.50"></text></g><g><title>compiler::pre_fixer::fix_iter::{{closure}} (4,468 samples, 2.72%)</title><rect x="93.3465%" y="501" width="2.7218%" height="15" fill="rgb(216,185,54)"/><text x="93.5965%" y="511.50">co..</text></g><g><title>&lt;F as regex::re_unicode::Replacer&gt;::replace_append (4,476 samples, 2.73%)</title><rect x="93.3422%" y="517" width="2.7267%" height="15" fill="rgb(254,217,39)"/><text x="93.5922%" y="527.50">&lt;F..</text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::at (231 samples, 0.14%)</title><rect x="96.3894%" y="277" width="0.1407%" height="15" fill="rgb(240,178,23)"/><text x="96.6394%" y="287.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (548 samples, 0.33%)</title><rect x="96.5880%" y="277" width="0.3338%" height="15" fill="rgb(218,11,47)"/><text x="96.8380%" y="287.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (1,680 samples, 1.02%)</title><rect x="96.0732%" y="309" width="1.0234%" height="15" fill="rgb(218,51,51)"/><text x="96.3232%" y="319.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (1,680 samples, 1.02%)</title><rect x="96.0732%" y="293" width="1.0234%" height="15" fill="rgb(238,126,27)"/><text x="96.3232%" y="303.50"></text></g><g><title>regex::prog::InstRanges::matches (286 samples, 0.17%)</title><rect x="96.9224%" y="277" width="0.1742%" height="15" fill="rgb(249,202,22)"/><text x="97.1724%" y="287.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (1,692 samples, 1.03%)</title><rect x="96.0726%" y="389" width="1.0307%" height="15" fill="rgb(254,195,49)"/><text x="96.3226%" y="399.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (1,692 samples, 1.03%)</title><rect x="96.0726%" y="373" width="1.0307%" height="15" fill="rgb(208,123,14)"/><text x="96.3226%" y="383.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (1,692 samples, 1.03%)</title><rect x="96.0726%" y="357" width="1.0307%" height="15" fill="rgb(224,200,8)"/><text x="96.3226%" y="367.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (1,692 samples, 1.03%)</title><rect x="96.0726%" y="341" width="1.0307%" height="15" fill="rgb(217,61,36)"/><text x="96.3226%" y="351.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (1,691 samples, 1.03%)</title><rect x="96.0732%" y="325" width="1.0301%" height="15" fill="rgb(206,35,45)"/><text x="96.3232%" y="335.50"></text></g><g><title>regex::dfa::Fsm::forward (598 samples, 0.36%)</title><rect x="97.1033%" y="373" width="0.3643%" height="15" fill="rgb(217,65,33)"/><text x="97.3533%" y="383.50"></text></g><g><title>regex::dfa::Fsm::exec_at (597 samples, 0.36%)</title><rect x="97.1039%" y="357" width="0.3637%" height="15" fill="rgb(222,158,48)"/><text x="97.3539%" y="367.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (2,667 samples, 1.62%)</title><rect x="96.0714%" y="421" width="1.6247%" height="15" fill="rgb(254,2,54)"/><text x="96.3214%" y="431.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (2,667 samples, 1.62%)</title><rect x="96.0714%" y="405" width="1.6247%" height="15" fill="rgb(250,143,38)"/><text x="96.3214%" y="415.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (973 samples, 0.59%)</title><rect x="97.1033%" y="389" width="0.5927%" height="15" fill="rgb(248,25,0)"/><text x="97.3533%" y="399.50"></text></g><g><title>regex::dfa::Fsm::reverse (375 samples, 0.23%)</title><rect x="97.4676%" y="373" width="0.2284%" height="15" fill="rgb(206,152,27)"/><text x="97.7176%" y="383.50"></text></g><g><title>regex::dfa::Fsm::exec_at_reverse (375 samples, 0.23%)</title><rect x="97.4676%" y="357" width="0.2284%" height="15" fill="rgb(240,77,30)"/><text x="97.7176%" y="367.50"></text></g><g><title>regex::dfa::Fsm::next_si (290 samples, 0.18%)</title><rect x="97.5194%" y="341" width="0.1767%" height="15" fill="rgb(231,5,3)"/><text x="97.7694%" y="351.50"></text></g><g><title>regex::dfa::Transitions::next_unchecked (288 samples, 0.18%)</title><rect x="97.5206%" y="325" width="0.1754%" height="15" fill="rgb(207,226,32)"/><text x="97.7706%" y="335.50"></text></g><g><title>compiler::pre_fixer::fix_iter (7,150 samples, 4.36%)</title><rect x="93.3410%" y="565" width="4.3557%" height="15" fill="rgb(222,207,47)"/><text x="93.5910%" y="575.50">compi..</text></g><g><title>regex::re_unicode::Regex::replace (7,148 samples, 4.35%)</title><rect x="93.3422%" y="549" width="4.3544%" height="15" fill="rgb(229,115,45)"/><text x="93.5922%" y="559.50">regex..</text></g><g><title>regex::re_unicode::Regex::replacen (7,148 samples, 4.35%)</title><rect x="93.3422%" y="533" width="4.3544%" height="15" fill="rgb(224,191,6)"/><text x="93.5922%" y="543.50">regex..</text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek (2,670 samples, 1.63%)</title><rect x="96.0702%" y="517" width="1.6265%" height="15" fill="rgb(230,227,24)"/><text x="96.3202%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2,670 samples, 1.63%)</title><rect x="96.0702%" y="501" width="1.6265%" height="15" fill="rgb(228,80,19)"/><text x="96.3202%" y="511.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek::{{closure}} (2,670 samples, 1.63%)</title><rect x="96.0702%" y="485" width="1.6265%" height="15" fill="rgb(247,229,0)"/><text x="96.3202%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,670 samples, 1.63%)</title><rect x="96.0702%" y="469" width="1.6265%" height="15" fill="rgb(237,194,15)"/><text x="96.3202%" y="479.50"></text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (2,668 samples, 1.63%)</title><rect x="96.0714%" y="453" width="1.6253%" height="15" fill="rgb(219,203,20)"/><text x="96.3214%" y="463.50"></text></g><g><title>&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,668 samples, 1.63%)</title><rect x="96.0714%" y="437" width="1.6253%" height="15" fill="rgb(234,128,8)"/><text x="96.3214%" y="447.50"></text></g><g><title>compiler::pre_fixer::fix_iter::{{closure}} (7,175 samples, 4.37%)</title><rect x="93.3270%" y="581" width="4.3709%" height="15" fill="rgb(248,202,8)"/><text x="93.5770%" y="591.50">compi..</text></g><g><title>&lt;F as regex::re_unicode::Replacer&gt;::replace_append (7,183 samples, 4.38%)</title><rect x="93.3227%" y="597" width="4.3758%" height="15" fill="rgb(206,104,37)"/><text x="93.5727%" y="607.50">&lt;F as..</text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::at (298 samples, 0.18%)</title><rect x="98.0585%" y="357" width="0.1815%" height="15" fill="rgb(223,8,27)"/><text x="98.3085%" y="367.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (701 samples, 0.43%)</title><rect x="98.3162%" y="357" width="0.4270%" height="15" fill="rgb(216,217,28)"/><text x="98.5662%" y="367.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (2,065 samples, 1.26%)</title><rect x="97.7046%" y="389" width="1.2580%" height="15" fill="rgb(249,199,1)"/><text x="97.9546%" y="399.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (2,064 samples, 1.26%)</title><rect x="97.7052%" y="373" width="1.2574%" height="15" fill="rgb(240,85,17)"/><text x="97.9552%" y="383.50"></text></g><g><title>regex::prog::InstRanges::matches (359 samples, 0.22%)</title><rect x="98.7439%" y="357" width="0.2187%" height="15" fill="rgb(206,108,45)"/><text x="98.9939%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (464 samples, 0.28%)</title><rect x="98.9650%" y="373" width="0.2827%" height="15" fill="rgb(245,210,41)"/><text x="99.2150%" y="383.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (2,574 samples, 1.57%)</title><rect x="97.7034%" y="469" width="1.5680%" height="15" fill="rgb(206,13,37)"/><text x="97.9534%" y="479.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (2,574 samples, 1.57%)</title><rect x="97.7034%" y="453" width="1.5680%" height="15" fill="rgb(250,61,18)"/><text x="97.9534%" y="463.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (2,574 samples, 1.57%)</title><rect x="97.7034%" y="437" width="1.5680%" height="15" fill="rgb(235,172,48)"/><text x="97.9534%" y="447.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (2,574 samples, 1.57%)</title><rect x="97.7034%" y="421" width="1.5680%" height="15" fill="rgb(249,201,17)"/><text x="97.9534%" y="431.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (2,573 samples, 1.57%)</title><rect x="97.7040%" y="405" width="1.5674%" height="15" fill="rgb(219,208,6)"/><text x="97.9540%" y="415.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::clear (507 samples, 0.31%)</title><rect x="98.9626%" y="389" width="0.3089%" height="15" fill="rgb(248,31,23)"/><text x="99.2126%" y="399.50"></text></g><g><title>regex::dfa::Fsm::forward (726 samples, 0.44%)</title><rect x="99.2714%" y="453" width="0.4423%" height="15" fill="rgb(245,15,42)"/><text x="99.5214%" y="463.50"></text></g><g><title>regex::dfa::Fsm::exec_at (726 samples, 0.44%)</title><rect x="99.2714%" y="437" width="0.4423%" height="15" fill="rgb(222,217,39)"/><text x="99.5214%" y="447.50"></text></g><g><title>regex::exec::ExecNoSync::find_dfa_forward (1,144 samples, 0.70%)</title><rect x="99.2714%" y="469" width="0.6969%" height="15" fill="rgb(210,219,27)"/><text x="99.5214%" y="479.50"></text></g><g><title>regex::dfa::Fsm::reverse (418 samples, 0.25%)</title><rect x="99.7137%" y="453" width="0.2546%" height="15" fill="rgb(252,166,36)"/><text x="99.9637%" y="463.50"></text></g><g><title>regex::dfa::Fsm::exec_at_reverse (418 samples, 0.25%)</title><rect x="99.7137%" y="437" width="0.2546%" height="15" fill="rgb(245,132,34)"/><text x="99.9637%" y="447.50"></text></g><g><title>regex::dfa::Fsm::next_si (315 samples, 0.19%)</title><rect x="99.7764%" y="421" width="0.1919%" height="15" fill="rgb(236,54,3)"/><text x="100.0264%" y="431.50"></text></g><g><title>regex::dfa::Transitions::next_unchecked (312 samples, 0.19%)</title><rect x="99.7783%" y="405" width="0.1901%" height="15" fill="rgb(241,173,43)"/><text x="100.0283%" y="415.50"></text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek (3,721 samples, 2.27%)</title><rect x="97.7022%" y="597" width="2.2668%" height="15" fill="rgb(215,190,9)"/><text x="97.9522%" y="607.50">c..</text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (3,721 samples, 2.27%)</title><rect x="97.7022%" y="581" width="2.2668%" height="15" fill="rgb(242,101,16)"/><text x="97.9522%" y="591.50">c..</text></g><g><title>core::iter::adapters::Peekable&lt;I&gt;::peek::{{closure}} (3,720 samples, 2.27%)</title><rect x="97.7028%" y="565" width="2.2662%" height="15" fill="rgb(223,190,21)"/><text x="97.9528%" y="575.50">c..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,720 samples, 2.27%)</title><rect x="97.7028%" y="549" width="2.2662%" height="15" fill="rgb(215,228,25)"/><text x="97.9528%" y="559.50">&lt;..</text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (3,720 samples, 2.27%)</title><rect x="97.7028%" y="533" width="2.2662%" height="15" fill="rgb(225,36,22)"/><text x="97.9528%" y="543.50">&lt;..</text></g><g><title>&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,720 samples, 2.27%)</title><rect x="97.7028%" y="517" width="2.2662%" height="15" fill="rgb(251,106,46)"/><text x="97.9528%" y="527.50">&lt;..</text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (3,720 samples, 2.27%)</title><rect x="97.7028%" y="501" width="2.2662%" height="15" fill="rgb(208,90,1)"/><text x="97.9528%" y="511.50">&lt;..</text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (3,720 samples, 2.27%)</title><rect x="97.7028%" y="485" width="2.2662%" height="15" fill="rgb(243,10,4)"/><text x="97.9528%" y="495.50">&lt;..</text></g><g><title>compiler::pre_fixer::pre_fix (28,378 samples, 17.29%)</title><rect x="82.6833%" y="661" width="17.2874%" height="15" fill="rgb(212,137,27)"/><text x="82.9333%" y="671.50">compiler::pre_fixer::pre_fix</text></g><g><title>compiler::pre_fixer::fix_iter (10,913 samples, 6.65%)</title><rect x="93.3227%" y="645" width="6.6480%" height="15" fill="rgb(231,220,49)"/><text x="93.5727%" y="655.50">compiler:..</text></g><g><title>regex::re_unicode::Regex::replace (10,913 samples, 6.65%)</title><rect x="93.3227%" y="629" width="6.6480%" height="15" fill="rgb(237,96,20)"/><text x="93.5727%" y="639.50">regex::re..</text></g><g><title>regex::re_unicode::Regex::replacen (10,913 samples, 6.65%)</title><rect x="93.3227%" y="613" width="6.6480%" height="15" fill="rgb(239,229,30)"/><text x="93.5727%" y="623.50">regex::re..</text></g><g><title>compiler::compile (80,608 samples, 49.11%)</title><rect x="50.8675%" y="677" width="49.1051%" height="15" fill="rgb(219,65,33)"/><text x="51.1175%" y="687.50">compiler::compile</text></g><g><title>__libc_start_main (80,646 samples, 49.13%)</title><rect x="50.8675%" y="853" width="49.1283%" height="15" fill="rgb(243,134,7)"/><text x="51.1175%" y="863.50">__libc_start_main</text></g><g><title>main (80,646 samples, 49.13%)</title><rect x="50.8675%" y="837" width="49.1283%" height="15" fill="rgb(216,177,54)"/><text x="51.1175%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (80,646 samples, 49.13%)</title><rect x="50.8675%" y="821" width="49.1283%" height="15" fill="rgb(211,160,20)"/><text x="51.1175%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (80,646 samples, 49.13%)</title><rect x="50.8675%" y="805" width="49.1283%" height="15" fill="rgb(239,85,39)"/><text x="51.1175%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (80,646 samples, 49.13%)</title><rect x="50.8675%" y="789" width="49.1283%" height="15" fill="rgb(232,125,22)"/><text x="51.1175%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (80,646 samples, 49.13%)</title><rect x="50.8675%" y="773" width="49.1283%" height="15" fill="rgb(244,57,34)"/><text x="51.1175%" y="783.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (80,646 samples, 49.13%)</title><rect x="50.8675%" y="757" width="49.1283%" height="15" fill="rgb(214,203,32)"/><text x="51.1175%" y="767.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_on..</text></g><g><title>std::rt::lang_start::{{closure}} (80,646 samples, 49.13%)</title><rect x="50.8675%" y="741" width="49.1283%" height="15" fill="rgb(207,58,43)"/><text x="51.1175%" y="751.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (80,646 samples, 49.13%)</title><rect x="50.8675%" y="725" width="49.1283%" height="15" fill="rgb(215,193,15)"/><text x="51.1175%" y="735.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (80,646 samples, 49.13%)</title><rect x="50.8675%" y="709" width="49.1283%" height="15" fill="rgb(232,15,44)"/><text x="51.1175%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>bench::main (80,646 samples, 49.13%)</title><rect x="50.8675%" y="693" width="49.1283%" height="15" fill="rgb(212,3,48)"/><text x="51.1175%" y="703.50">bench::main</text></g><g><title>bench (164,148 samples, 100.00%)</title><rect x="0.0000%" y="885" width="99.9963%" height="15" fill="rgb(218,128,7)"/><text x="0.2500%" y="895.50">bench</text></g><g><title>_start (80,647 samples, 49.13%)</title><rect x="50.8675%" y="869" width="49.1289%" height="15" fill="rgb(226,216,39)"/><text x="51.1175%" y="879.50">_start</text></g><g><title>all (164,154 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(243,47,51)"/><text x="0.2500%" y="911.50"></text></g></svg></svg>