<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="661.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (89 samples, 0.80%)</title><rect x="0.0452%" y="533" width="0.8047%" height="15" fill="rgb(227,0,7)"/><text x="0.2952%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (47 samples, 0.42%)</title><rect x="0.4250%" y="517" width="0.4250%" height="15" fill="rgb(217,0,24)"/><text x="0.6750%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (25 samples, 0.23%)</title><rect x="1.0579%" y="501" width="0.2260%" height="15" fill="rgb(221,193,54)"/><text x="1.3079%" y="511.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (49 samples, 0.44%)</title><rect x="0.8499%" y="533" width="0.4430%" height="15" fill="rgb(248,212,6)"/><text x="1.0999%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (36 samples, 0.33%)</title><rect x="0.9675%" y="517" width="0.3255%" height="15" fill="rgb(208,68,35)"/><text x="1.2175%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (156 samples, 1.41%)</title><rect x="0.0452%" y="581" width="1.4105%" height="15" fill="rgb(232,128,0)"/><text x="0.2952%" y="591.50"></text></g><g><title>nom::branch::alt::{{closure}} (156 samples, 1.41%)</title><rect x="0.0452%" y="565" width="1.4105%" height="15" fill="rgb(207,160,47)"/><text x="0.2952%" y="575.50"></text></g><g><title>nom::branch::alt::{{closure}} (156 samples, 1.41%)</title><rect x="0.0452%" y="549" width="1.4105%" height="15" fill="rgb(228,23,34)"/><text x="0.2952%" y="559.50"></text></g><g><title>nom::combinator::map::{{closure}} (18 samples, 0.16%)</title><rect x="1.2929%" y="533" width="0.1627%" height="15" fill="rgb(218,30,26)"/><text x="1.5429%" y="543.50"></text></g><g><title>nom::sequence::pair::{{closure}} (13 samples, 0.12%)</title><rect x="1.3382%" y="517" width="0.1175%" height="15" fill="rgb(220,122,19)"/><text x="1.5882%" y="527.50"></text></g><g><title>alloc::fmt::format (22 samples, 0.20%)</title><rect x="1.4557%" y="405" width="0.1989%" height="15" fill="rgb(250,228,42)"/><text x="1.7057%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (22 samples, 0.20%)</title><rect x="1.4557%" y="389" width="0.1989%" height="15" fill="rgb(240,193,28)"/><text x="1.7057%" y="399.50"></text></g><g><title>core::fmt::write (22 samples, 0.20%)</title><rect x="1.4557%" y="373" width="0.1989%" height="15" fill="rgb(216,20,37)"/><text x="1.7057%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (22 samples, 0.20%)</title><rect x="1.4557%" y="357" width="0.1989%" height="15" fill="rgb(206,188,39)"/><text x="1.7057%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (22 samples, 0.20%)</title><rect x="1.4557%" y="341" width="0.1989%" height="15" fill="rgb(217,207,13)"/><text x="1.7057%" y="351.50"></text></g><g><title>alloc::string::String::push_str (22 samples, 0.20%)</title><rect x="1.4557%" y="325" width="0.1989%" height="15" fill="rgb(231,73,38)"/><text x="1.7057%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (22 samples, 0.20%)</title><rect x="1.4557%" y="309" width="0.1989%" height="15" fill="rgb(225,20,46)"/><text x="1.7057%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (22 samples, 0.20%)</title><rect x="1.4557%" y="293" width="0.1989%" height="15" fill="rgb(210,31,41)"/><text x="1.7057%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (22 samples, 0.20%)</title><rect x="1.4557%" y="277" width="0.1989%" height="15" fill="rgb(221,200,47)"/><text x="1.7057%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (22 samples, 0.20%)</title><rect x="1.4557%" y="261" width="0.1989%" height="15" fill="rgb(226,26,5)"/><text x="1.7057%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.20%)</title><rect x="1.4557%" y="245" width="0.1989%" height="15" fill="rgb(249,33,26)"/><text x="1.7057%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (22 samples, 0.20%)</title><rect x="1.4557%" y="229" width="0.1989%" height="15" fill="rgb(235,183,28)"/><text x="1.7057%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (22 samples, 0.20%)</title><rect x="1.4557%" y="213" width="0.1989%" height="15" fill="rgb(221,5,38)"/><text x="1.7057%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.20%)</title><rect x="1.4557%" y="197" width="0.1989%" height="15" fill="rgb(247,18,42)"/><text x="1.7057%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (21 samples, 0.19%)</title><rect x="1.4647%" y="181" width="0.1899%" height="15" fill="rgb(241,131,45)"/><text x="1.7147%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 0.19%)</title><rect x="1.4647%" y="165" width="0.1899%" height="15" fill="rgb(249,31,29)"/><text x="1.7147%" y="175.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.19%)</title><rect x="1.4647%" y="149" width="0.1899%" height="15" fill="rgb(225,111,53)"/><text x="1.7147%" y="159.50"></text></g><g><title>__rdl_realloc (21 samples, 0.19%)</title><rect x="1.4647%" y="133" width="0.1899%" height="15" fill="rgb(238,160,17)"/><text x="1.7147%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (21 samples, 0.19%)</title><rect x="1.4647%" y="117" width="0.1899%" height="15" fill="rgb(214,148,48)"/><text x="1.7147%" y="127.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.19%)</title><rect x="1.4647%" y="101" width="0.1899%" height="15" fill="rgb(232,36,49)"/><text x="1.7147%" y="111.50"></text></g><g><title>_int_realloc (18 samples, 0.16%)</title><rect x="1.4919%" y="85" width="0.1627%" height="15" fill="rgb(209,103,24)"/><text x="1.7419%" y="95.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (95 samples, 0.86%)</title><rect x="1.8807%" y="389" width="0.8590%" height="15" fill="rgb(229,88,8)"/><text x="2.1307%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.17%)</title><rect x="2.8662%" y="389" width="0.1718%" height="15" fill="rgb(213,181,19)"/><text x="3.1162%" y="399.50"></text></g><g><title>compiler::generate::templates::indent (160 samples, 1.45%)</title><rect x="1.7360%" y="405" width="1.4467%" height="15" fill="rgb(254,191,54)"/><text x="1.9860%" y="415.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.17%)</title><rect x="3.1826%" y="389" width="0.1718%" height="15" fill="rgb(241,83,37)"/><text x="3.4326%" y="399.50"></text></g><g><title>_int_malloc (19 samples, 0.17%)</title><rect x="3.1826%" y="373" width="0.1718%" height="15" fill="rgb(233,36,39)"/><text x="3.4326%" y="383.50"></text></g><g><title>malloc_consolidate (19 samples, 0.17%)</title><rect x="3.1826%" y="357" width="0.1718%" height="15" fill="rgb(226,3,54)"/><text x="3.4326%" y="367.50"></text></g><g><title>compiler::generate::generator::gen_body (328 samples, 2.97%)</title><rect x="1.4557%" y="501" width="2.9656%" height="15" fill="rgb(245,192,40)"/><text x="1.7057%" y="511.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (328 samples, 2.97%)</title><rect x="1.4557%" y="485" width="2.9656%" height="15" fill="rgb(238,167,29)"/><text x="1.7057%" y="495.50">com..</text></g><g><title>compiler::generate::generator::gen_body (328 samples, 2.97%)</title><rect x="1.4557%" y="469" width="2.9656%" height="15" fill="rgb(232,182,51)"/><text x="1.7057%" y="479.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (328 samples, 2.97%)</title><rect x="1.4557%" y="453" width="2.9656%" height="15" fill="rgb(231,60,39)"/><text x="1.7057%" y="463.50">com..</text></g><g><title>compiler::generate::generator::gen_body (328 samples, 2.97%)</title><rect x="1.4557%" y="437" width="2.9656%" height="15" fill="rgb(208,69,12)"/><text x="1.7057%" y="447.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (328 samples, 2.97%)</title><rect x="1.4557%" y="421" width="2.9656%" height="15" fill="rgb(235,93,37)"/><text x="1.7057%" y="431.50">com..</text></g><g><title>json::value::JsonValue::dump (137 samples, 1.24%)</title><rect x="3.1826%" y="405" width="1.2387%" height="15" fill="rgb(213,116,39)"/><text x="3.4326%" y="415.50"></text></g><g><title>json::codegen::Generator::write_json (118 samples, 1.07%)</title><rect x="3.3544%" y="389" width="1.0669%" height="15" fill="rgb(222,207,29)"/><text x="3.6044%" y="399.50"></text></g><g><title>json::codegen::Generator::write_string_complex (118 samples, 1.07%)</title><rect x="3.3544%" y="373" width="1.0669%" height="15" fill="rgb(206,96,30)"/><text x="3.6044%" y="383.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;&amp;str,X&gt; as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (15 samples, 0.14%)</title><rect x="4.7107%" y="437" width="0.1356%" height="15" fill="rgb(218,138,4)"/><text x="4.9607%" y="447.50"></text></g><g><title>__libc_start_main (377 samples, 3.41%)</title><rect x="1.4557%" y="581" width="3.4087%" height="15" fill="rgb(250,191,14)"/><text x="1.7057%" y="591.50">__l..</text></g><g><title>main (377 samples, 3.41%)</title><rect x="1.4557%" y="565" width="3.4087%" height="15" fill="rgb(239,60,40)"/><text x="1.7057%" y="575.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (377 samples, 3.41%)</title><rect x="1.4557%" y="549" width="3.4087%" height="15" fill="rgb(206,27,48)"/><text x="1.7057%" y="559.50">std..</text></g><g><title>bench::main (377 samples, 3.41%)</title><rect x="1.4557%" y="533" width="3.4087%" height="15" fill="rgb(225,35,8)"/><text x="1.7057%" y="543.50">ben..</text></g><g><title>compiler::compile (377 samples, 3.41%)</title><rect x="1.4557%" y="517" width="3.4087%" height="15" fill="rgb(250,213,24)"/><text x="1.7057%" y="527.50">com..</text></g><g><title>compiler::parse::tokens::tokens (49 samples, 0.44%)</title><rect x="4.4213%" y="501" width="0.4430%" height="15" fill="rgb(247,123,22)"/><text x="4.6713%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (49 samples, 0.44%)</title><rect x="4.4213%" y="485" width="0.4430%" height="15" fill="rgb(231,138,38)"/><text x="4.6713%" y="495.50"></text></g><g><title>nom::sequence::delimited::{{closure}} (49 samples, 0.44%)</title><rect x="4.4213%" y="469" width="0.4430%" height="15" fill="rgb(231,145,46)"/><text x="4.6713%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (49 samples, 0.44%)</title><rect x="4.4213%" y="453" width="0.4430%" height="15" fill="rgb(251,118,11)"/><text x="4.6713%" y="463.50"></text></g><g><title>_int_free (16 samples, 0.14%)</title><rect x="4.9096%" y="437" width="0.1447%" height="15" fill="rgb(217,147,25)"/><text x="5.1596%" y="447.50"></text></g><g><title>compiler::generate::generator::gen_body (35 samples, 0.32%)</title><rect x="4.8734%" y="453" width="0.3165%" height="15" fill="rgb(247,81,37)"/><text x="5.1234%" y="463.50"></text></g><g><title>__GI___libc_realloc (35 samples, 0.32%)</title><rect x="5.1899%" y="421" width="0.3165%" height="15" fill="rgb(209,12,38)"/><text x="5.4399%" y="431.50"></text></g><g><title>_int_realloc (35 samples, 0.32%)</title><rect x="5.1899%" y="405" width="0.3165%" height="15" fill="rgb(227,1,9)"/><text x="5.4399%" y="415.50"></text></g><g><title>_int_malloc (13 samples, 0.12%)</title><rect x="5.3888%" y="389" width="0.1175%" height="15" fill="rgb(248,47,43)"/><text x="5.6388%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.24%)</title><rect x="5.9403%" y="213" width="0.2351%" height="15" fill="rgb(221,10,30)"/><text x="6.1903%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (16 samples, 0.14%)</title><rect x="6.0307%" y="197" width="0.1447%" height="15" fill="rgb(210,229,1)"/><text x="6.2807%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (16 samples, 0.14%)</title><rect x="6.0307%" y="181" width="0.1447%" height="15" fill="rgb(222,148,37)"/><text x="6.2807%" y="191.50"></text></g><g><title>alloc::alloc::realloc (16 samples, 0.14%)</title><rect x="6.0307%" y="165" width="0.1447%" height="15" fill="rgb(234,67,33)"/><text x="6.2807%" y="175.50"></text></g><g><title>__rdl_realloc (16 samples, 0.14%)</title><rect x="6.0307%" y="149" width="0.1447%" height="15" fill="rgb(247,98,35)"/><text x="6.2807%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (16 samples, 0.14%)</title><rect x="6.0307%" y="133" width="0.1447%" height="15" fill="rgb(247,138,52)"/><text x="6.2807%" y="143.50"></text></g><g><title>__GI___libc_realloc (16 samples, 0.14%)</title><rect x="6.0307%" y="117" width="0.1447%" height="15" fill="rgb(213,79,30)"/><text x="6.2807%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (37 samples, 0.33%)</title><rect x="5.8680%" y="277" width="0.3345%" height="15" fill="rgb(246,177,23)"/><text x="6.1180%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (34 samples, 0.31%)</title><rect x="5.8951%" y="261" width="0.3074%" height="15" fill="rgb(230,62,27)"/><text x="6.1451%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (34 samples, 0.31%)</title><rect x="5.8951%" y="245" width="0.3074%" height="15" fill="rgb(216,154,8)"/><text x="6.1451%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (33 samples, 0.30%)</title><rect x="5.9042%" y="229" width="0.2984%" height="15" fill="rgb(244,35,45)"/><text x="6.1542%" y="239.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (70 samples, 0.63%)</title><rect x="5.7324%" y="373" width="0.6329%" height="15" fill="rgb(251,115,12)"/><text x="5.9824%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (55 samples, 0.50%)</title><rect x="5.8680%" y="357" width="0.4973%" height="15" fill="rgb(240,54,50)"/><text x="6.1180%" y="367.50"></text></g><g><title>alloc::string::String::push_str (55 samples, 0.50%)</title><rect x="5.8680%" y="341" width="0.4973%" height="15" fill="rgb(233,84,52)"/><text x="6.1180%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (55 samples, 0.50%)</title><rect x="5.8680%" y="325" width="0.4973%" height="15" fill="rgb(207,117,47)"/><text x="6.1180%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (55 samples, 0.50%)</title><rect x="5.8680%" y="309" width="0.4973%" height="15" fill="rgb(249,43,39)"/><text x="6.1180%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (55 samples, 0.50%)</title><rect x="5.8680%" y="293" width="0.4973%" height="15" fill="rgb(209,38,44)"/><text x="6.1180%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.16%)</title><rect x="6.2025%" y="277" width="0.1627%" height="15" fill="rgb(236,212,23)"/><text x="6.4525%" y="287.50"></text></g><g><title>alloc::fmt::format (112 samples, 1.01%)</title><rect x="5.5063%" y="421" width="1.0127%" height="15" fill="rgb(242,79,21)"/><text x="5.7563%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (112 samples, 1.01%)</title><rect x="5.5063%" y="405" width="1.0127%" height="15" fill="rgb(211,96,35)"/><text x="5.7563%" y="415.50"></text></g><g><title>core::fmt::write (112 samples, 1.01%)</title><rect x="5.5063%" y="389" width="1.0127%" height="15" fill="rgb(253,215,40)"/><text x="5.7563%" y="399.50"></text></g><g><title>__GI___libc_free (12 samples, 0.11%)</title><rect x="7.1157%" y="405" width="0.1085%" height="15" fill="rgb(211,81,21)"/><text x="7.3657%" y="415.50"></text></g><g><title>_int_free (13 samples, 0.12%)</title><rect x="7.3056%" y="405" width="0.1175%" height="15" fill="rgb(208,190,38)"/><text x="7.5556%" y="415.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.30%)</title><rect x="7.5136%" y="389" width="0.2984%" height="15" fill="rgb(235,213,38)"/><text x="7.7636%" y="399.50"></text></g><g><title>compiler::generate::generator::gen_body (332 samples, 3.00%)</title><rect x="4.8734%" y="549" width="3.0018%" height="15" fill="rgb(237,122,38)"/><text x="5.1234%" y="559.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (332 samples, 3.00%)</title><rect x="4.8734%" y="533" width="3.0018%" height="15" fill="rgb(244,218,35)"/><text x="5.1234%" y="543.50">com..</text></g><g><title>compiler::generate::generator::gen_body (332 samples, 3.00%)</title><rect x="4.8734%" y="517" width="3.0018%" height="15" fill="rgb(240,68,47)"/><text x="5.1234%" y="527.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (332 samples, 3.00%)</title><rect x="4.8734%" y="501" width="3.0018%" height="15" fill="rgb(210,16,53)"/><text x="5.1234%" y="511.50">com..</text></g><g><title>compiler::generate::generator::gen_body (332 samples, 3.00%)</title><rect x="4.8734%" y="485" width="3.0018%" height="15" fill="rgb(235,124,12)"/><text x="5.1234%" y="495.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (332 samples, 3.00%)</title><rect x="4.8734%" y="469" width="3.0018%" height="15" fill="rgb(224,169,11)"/><text x="5.1234%" y="479.50">com..</text></g><g><title>compiler::generate::templates::expression (297 samples, 2.69%)</title><rect x="5.1899%" y="453" width="2.6854%" height="15" fill="rgb(250,166,2)"/><text x="5.4399%" y="463.50">co..</text></g><g><title>compiler::generate::templates::guard (297 samples, 2.69%)</title><rect x="5.1899%" y="437" width="2.6854%" height="15" fill="rgb(242,216,29)"/><text x="5.4399%" y="447.50">co..</text></g><g><title>compiler::generate::templates::escape_path (150 samples, 1.36%)</title><rect x="6.5190%" y="421" width="1.3562%" height="15" fill="rgb(230,116,27)"/><text x="6.7690%" y="431.50"></text></g><g><title>compiler::generate::templates::escape_path::{{closure}} (50 samples, 0.45%)</title><rect x="7.4231%" y="405" width="0.4521%" height="15" fill="rgb(228,99,48)"/><text x="7.6731%" y="415.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;&amp;str,X&gt; as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (14 samples, 0.13%)</title><rect x="7.8752%" y="485" width="0.1266%" height="15" fill="rgb(253,11,6)"/><text x="8.1252%" y="495.50"></text></g><g><title>compiler::parse::tokens::tokens (16 samples, 0.14%)</title><rect x="7.8752%" y="549" width="0.1447%" height="15" fill="rgb(247,143,39)"/><text x="8.1252%" y="559.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (16 samples, 0.14%)</title><rect x="7.8752%" y="533" width="0.1447%" height="15" fill="rgb(236,97,10)"/><text x="8.1252%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (16 samples, 0.14%)</title><rect x="7.8752%" y="517" width="0.1447%" height="15" fill="rgb(233,208,19)"/><text x="8.1252%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (16 samples, 0.14%)</title><rect x="7.8752%" y="501" width="0.1447%" height="15" fill="rgb(216,164,2)"/><text x="8.1252%" y="511.50"></text></g><g><title>bench::main (369 samples, 3.34%)</title><rect x="4.8734%" y="581" width="3.3363%" height="15" fill="rgb(220,129,5)"/><text x="5.1234%" y="591.50">ben..</text></g><g><title>compiler::compile (369 samples, 3.34%)</title><rect x="4.8734%" y="565" width="3.3363%" height="15" fill="rgb(242,17,10)"/><text x="5.1234%" y="575.50">com..</text></g><g><title>compiler::parse::tree::tree (21 samples, 0.19%)</title><rect x="8.0199%" y="549" width="0.1899%" height="15" fill="rgb(242,107,0)"/><text x="8.2699%" y="559.50"></text></g><g><title>compiler::parse::tree::tree (21 samples, 0.19%)</title><rect x="8.0199%" y="533" width="0.1899%" height="15" fill="rgb(251,28,31)"/><text x="8.2699%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (14 samples, 0.13%)</title><rect x="8.6890%" y="293" width="0.1266%" height="15" fill="rgb(233,223,10)"/><text x="8.9390%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.13%)</title><rect x="8.6890%" y="277" width="0.1266%" height="15" fill="rgb(215,21,27)"/><text x="8.9390%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (14 samples, 0.13%)</title><rect x="8.6890%" y="261" width="0.1266%" height="15" fill="rgb(232,23,21)"/><text x="8.9390%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.13%)</title><rect x="8.6890%" y="245" width="0.1266%" height="15" fill="rgb(244,5,23)"/><text x="8.9390%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.13%)</title><rect x="8.6890%" y="229" width="0.1266%" height="15" fill="rgb(226,81,46)"/><text x="8.9390%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (13 samples, 0.12%)</title><rect x="8.6980%" y="213" width="0.1175%" height="15" fill="rgb(247,70,30)"/><text x="8.9480%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (13 samples, 0.12%)</title><rect x="8.6980%" y="197" width="0.1175%" height="15" fill="rgb(212,68,19)"/><text x="8.9480%" y="207.50"></text></g><g><title>alloc::alloc::realloc (13 samples, 0.12%)</title><rect x="8.6980%" y="181" width="0.1175%" height="15" fill="rgb(240,187,13)"/><text x="8.9480%" y="191.50"></text></g><g><title>__rdl_realloc (13 samples, 0.12%)</title><rect x="8.6980%" y="165" width="0.1175%" height="15" fill="rgb(223,113,26)"/><text x="8.9480%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13 samples, 0.12%)</title><rect x="8.6980%" y="149" width="0.1175%" height="15" fill="rgb(206,192,2)"/><text x="8.9480%" y="159.50"></text></g><g><title>__GI___libc_realloc (13 samples, 0.12%)</title><rect x="8.6980%" y="133" width="0.1175%" height="15" fill="rgb(241,108,4)"/><text x="8.9480%" y="143.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (30 samples, 0.27%)</title><rect x="8.6618%" y="389" width="0.2712%" height="15" fill="rgb(247,173,49)"/><text x="8.9118%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (28 samples, 0.25%)</title><rect x="8.6799%" y="373" width="0.2532%" height="15" fill="rgb(224,114,35)"/><text x="8.9299%" y="383.50"></text></g><g><title>alloc::string::String::push_str (28 samples, 0.25%)</title><rect x="8.6799%" y="357" width="0.2532%" height="15" fill="rgb(245,159,27)"/><text x="8.9299%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (28 samples, 0.25%)</title><rect x="8.6799%" y="341" width="0.2532%" height="15" fill="rgb(245,172,44)"/><text x="8.9299%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (28 samples, 0.25%)</title><rect x="8.6799%" y="325" width="0.2532%" height="15" fill="rgb(236,23,11)"/><text x="8.9299%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (28 samples, 0.25%)</title><rect x="8.6799%" y="309" width="0.2532%" height="15" fill="rgb(205,117,38)"/><text x="8.9299%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.12%)</title><rect x="8.8156%" y="293" width="0.1175%" height="15" fill="rgb(237,72,25)"/><text x="9.0656%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (44 samples, 0.40%)</title><rect x="8.5986%" y="421" width="0.3978%" height="15" fill="rgb(244,70,9)"/><text x="8.8486%" y="431.50"></text></g><g><title>core::fmt::write (42 samples, 0.38%)</title><rect x="8.6166%" y="405" width="0.3797%" height="15" fill="rgb(217,125,39)"/><text x="8.8666%" y="415.50"></text></g><g><title>alloc::fmt::format (48 samples, 0.43%)</title><rect x="8.5714%" y="437" width="0.4340%" height="15" fill="rgb(235,36,10)"/><text x="8.8214%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (38 samples, 0.34%)</title><rect x="9.2586%" y="421" width="0.3436%" height="15" fill="rgb(251,123,47)"/><text x="9.5086%" y="431.50"></text></g><g><title>compiler::generate::templates::indent (101 samples, 0.91%)</title><rect x="9.0687%" y="437" width="0.9132%" height="15" fill="rgb(221,13,13)"/><text x="9.3187%" y="447.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.17%)</title><rect x="10.0090%" y="421" width="0.1718%" height="15" fill="rgb(238,131,9)"/><text x="10.2590%" y="431.50"></text></g><g><title>_int_malloc (16 samples, 0.14%)</title><rect x="10.0362%" y="405" width="0.1447%" height="15" fill="rgb(211,50,8)"/><text x="10.2862%" y="415.50"></text></g><g><title>compiler::generate::generator::gen_body (247 samples, 2.23%)</title><rect x="8.2098%" y="469" width="2.2333%" height="15" fill="rgb(245,182,24)"/><text x="8.4598%" y="479.50">c..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (233 samples, 2.11%)</title><rect x="8.3363%" y="453" width="2.1067%" height="15" fill="rgb(242,14,37)"/><text x="8.5863%" y="463.50">c..</text></g><g><title>json::value::JsonValue::dump (49 samples, 0.44%)</title><rect x="10.0000%" y="437" width="0.4430%" height="15" fill="rgb(246,228,12)"/><text x="10.2500%" y="447.50"></text></g><g><title>json::codegen::Generator::write_json (29 samples, 0.26%)</title><rect x="10.1808%" y="421" width="0.2622%" height="15" fill="rgb(213,55,15)"/><text x="10.4308%" y="431.50"></text></g><g><title>json::codegen::Generator::write_string_complex (21 samples, 0.19%)</title><rect x="10.2532%" y="405" width="0.1899%" height="15" fill="rgb(209,9,3)"/><text x="10.5032%" y="415.50"></text></g><g><title>_int_free (19 samples, 0.17%)</title><rect x="10.5606%" y="101" width="0.1718%" height="15" fill="rgb(230,59,30)"/><text x="10.8106%" y="111.50"></text></g><g><title>alloc::fmt::format (63 samples, 0.57%)</title><rect x="10.4430%" y="437" width="0.5696%" height="15" fill="rgb(209,121,21)"/><text x="10.6930%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (63 samples, 0.57%)</title><rect x="10.4430%" y="421" width="0.5696%" height="15" fill="rgb(220,109,13)"/><text x="10.6930%" y="431.50"></text></g><g><title>core::fmt::write (63 samples, 0.57%)</title><rect x="10.4430%" y="405" width="0.5696%" height="15" fill="rgb(232,18,1)"/><text x="10.6930%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (62 samples, 0.56%)</title><rect x="10.4521%" y="389" width="0.5606%" height="15" fill="rgb(215,41,42)"/><text x="10.7021%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (62 samples, 0.56%)</title><rect x="10.4521%" y="373" width="0.5606%" height="15" fill="rgb(224,123,36)"/><text x="10.7021%" y="383.50"></text></g><g><title>alloc::string::String::push_str (62 samples, 0.56%)</title><rect x="10.4521%" y="357" width="0.5606%" height="15" fill="rgb(240,125,3)"/><text x="10.7021%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (62 samples, 0.56%)</title><rect x="10.4521%" y="341" width="0.5606%" height="15" fill="rgb(205,98,50)"/><text x="10.7021%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (62 samples, 0.56%)</title><rect x="10.4521%" y="325" width="0.5606%" height="15" fill="rgb(205,185,37)"/><text x="10.7021%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (62 samples, 0.56%)</title><rect x="10.4521%" y="309" width="0.5606%" height="15" fill="rgb(238,207,15)"/><text x="10.7021%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (62 samples, 0.56%)</title><rect x="10.4521%" y="293" width="0.5606%" height="15" fill="rgb(213,199,42)"/><text x="10.7021%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (62 samples, 0.56%)</title><rect x="10.4521%" y="277" width="0.5606%" height="15" fill="rgb(235,201,11)"/><text x="10.7021%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (62 samples, 0.56%)</title><rect x="10.4521%" y="261" width="0.5606%" height="15" fill="rgb(207,46,11)"/><text x="10.7021%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (62 samples, 0.56%)</title><rect x="10.4521%" y="245" width="0.5606%" height="15" fill="rgb(241,35,35)"/><text x="10.7021%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (62 samples, 0.56%)</title><rect x="10.4521%" y="229" width="0.5606%" height="15" fill="rgb(243,32,47)"/><text x="10.7021%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (62 samples, 0.56%)</title><rect x="10.4521%" y="213" width="0.5606%" height="15" fill="rgb(247,202,23)"/><text x="10.7021%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (62 samples, 0.56%)</title><rect x="10.4521%" y="197" width="0.5606%" height="15" fill="rgb(219,102,11)"/><text x="10.7021%" y="207.50"></text></g><g><title>alloc::alloc::realloc (62 samples, 0.56%)</title><rect x="10.4521%" y="181" width="0.5606%" height="15" fill="rgb(243,110,44)"/><text x="10.7021%" y="191.50"></text></g><g><title>__rdl_realloc (62 samples, 0.56%)</title><rect x="10.4521%" y="165" width="0.5606%" height="15" fill="rgb(222,74,54)"/><text x="10.7021%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (62 samples, 0.56%)</title><rect x="10.4521%" y="149" width="0.5606%" height="15" fill="rgb(216,99,12)"/><text x="10.7021%" y="159.50"></text></g><g><title>__GI___libc_realloc (62 samples, 0.56%)</title><rect x="10.4521%" y="133" width="0.5606%" height="15" fill="rgb(226,22,26)"/><text x="10.7021%" y="143.50"></text></g><g><title>_int_realloc (62 samples, 0.56%)</title><rect x="10.4521%" y="117" width="0.5606%" height="15" fill="rgb(217,163,10)"/><text x="10.7021%" y="127.50"></text></g><g><title>_int_malloc (31 samples, 0.28%)</title><rect x="10.7324%" y="101" width="0.2803%" height="15" fill="rgb(213,25,53)"/><text x="10.9824%" y="111.50"></text></g><g><title>compiler::generate::generator::gen_body (312 samples, 2.82%)</title><rect x="8.2098%" y="565" width="2.8210%" height="15" fill="rgb(252,105,26)"/><text x="8.4598%" y="575.50">co..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (312 samples, 2.82%)</title><rect x="8.2098%" y="549" width="2.8210%" height="15" fill="rgb(220,39,43)"/><text x="8.4598%" y="559.50">co..</text></g><g><title>compiler::generate::generator::gen_body (312 samples, 2.82%)</title><rect x="8.2098%" y="533" width="2.8210%" height="15" fill="rgb(229,68,48)"/><text x="8.4598%" y="543.50">co..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (312 samples, 2.82%)</title><rect x="8.2098%" y="517" width="2.8210%" height="15" fill="rgb(252,8,32)"/><text x="8.4598%" y="527.50">co..</text></g><g><title>compiler::generate::generator::gen_body (312 samples, 2.82%)</title><rect x="8.2098%" y="501" width="2.8210%" height="15" fill="rgb(223,20,43)"/><text x="8.4598%" y="511.50">co..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (312 samples, 2.82%)</title><rect x="8.2098%" y="485" width="2.8210%" height="15" fill="rgb(229,81,49)"/><text x="8.4598%" y="495.50">co..</text></g><g><title>compiler::generate::templates::expression (65 samples, 0.59%)</title><rect x="10.4430%" y="469" width="0.5877%" height="15" fill="rgb(236,28,36)"/><text x="10.6930%" y="479.50"></text></g><g><title>compiler::generate::templates::guard (65 samples, 0.59%)</title><rect x="10.4430%" y="453" width="0.5877%" height="15" fill="rgb(249,185,26)"/><text x="10.6930%" y="463.50"></text></g><g><title>compiler::compile (325 samples, 2.94%)</title><rect x="8.2098%" y="581" width="2.9385%" height="15" fill="rgb(249,174,33)"/><text x="8.4598%" y="591.50">co..</text></g><g><title>compiler::parse::tree::tree (13 samples, 0.12%)</title><rect x="11.0307%" y="565" width="0.1175%" height="15" fill="rgb(233,201,37)"/><text x="11.2807%" y="575.50"></text></g><g><title>compiler::parse::tree::tree (13 samples, 0.12%)</title><rect x="11.0307%" y="549" width="0.1175%" height="15" fill="rgb(221,78,26)"/><text x="11.2807%" y="559.50"></text></g><g><title>_int_free (14 samples, 0.13%)</title><rect x="11.5009%" y="437" width="0.1266%" height="15" fill="rgb(250,127,30)"/><text x="11.7509%" y="447.50"></text></g><g><title>_int_realloc (27 samples, 0.24%)</title><rect x="11.8897%" y="117" width="0.2441%" height="15" fill="rgb(230,49,44)"/><text x="12.1397%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (34 samples, 0.31%)</title><rect x="11.8354%" y="229" width="0.3074%" height="15" fill="rgb(229,67,23)"/><text x="12.0854%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (32 samples, 0.29%)</title><rect x="11.8535%" y="213" width="0.2893%" height="15" fill="rgb(249,83,47)"/><text x="12.1035%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (32 samples, 0.29%)</title><rect x="11.8535%" y="197" width="0.2893%" height="15" fill="rgb(215,43,3)"/><text x="12.1035%" y="207.50"></text></g><g><title>alloc::alloc::realloc (32 samples, 0.29%)</title><rect x="11.8535%" y="181" width="0.2893%" height="15" fill="rgb(238,154,13)"/><text x="12.1035%" y="191.50"></text></g><g><title>__rdl_realloc (32 samples, 0.29%)</title><rect x="11.8535%" y="165" width="0.2893%" height="15" fill="rgb(219,56,2)"/><text x="12.1035%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (32 samples, 0.29%)</title><rect x="11.8535%" y="149" width="0.2893%" height="15" fill="rgb(233,0,4)"/><text x="12.1035%" y="159.50"></text></g><g><title>__GI___libc_realloc (32 samples, 0.29%)</title><rect x="11.8535%" y="133" width="0.2893%" height="15" fill="rgb(235,30,7)"/><text x="12.1035%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (45 samples, 0.41%)</title><rect x="11.8083%" y="293" width="0.4069%" height="15" fill="rgb(250,79,13)"/><text x="12.0583%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (43 samples, 0.39%)</title><rect x="11.8264%" y="277" width="0.3888%" height="15" fill="rgb(211,146,34)"/><text x="12.0764%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (43 samples, 0.39%)</title><rect x="11.8264%" y="261" width="0.3888%" height="15" fill="rgb(228,22,38)"/><text x="12.0764%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (43 samples, 0.39%)</title><rect x="11.8264%" y="245" width="0.3888%" height="15" fill="rgb(235,168,5)"/><text x="12.0764%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (62 samples, 0.56%)</title><rect x="11.7631%" y="389" width="0.5606%" height="15" fill="rgb(221,155,16)"/><text x="12.0131%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (59 samples, 0.53%)</title><rect x="11.7902%" y="373" width="0.5335%" height="15" fill="rgb(215,215,53)"/><text x="12.0402%" y="383.50"></text></g><g><title>alloc::string::String::push_str (59 samples, 0.53%)</title><rect x="11.7902%" y="357" width="0.5335%" height="15" fill="rgb(223,4,10)"/><text x="12.0402%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (59 samples, 0.53%)</title><rect x="11.7902%" y="341" width="0.5335%" height="15" fill="rgb(234,103,6)"/><text x="12.0402%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (59 samples, 0.53%)</title><rect x="11.7902%" y="325" width="0.5335%" height="15" fill="rgb(227,97,0)"/><text x="12.0402%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (59 samples, 0.53%)</title><rect x="11.7902%" y="309" width="0.5335%" height="15" fill="rgb(234,150,53)"/><text x="12.0402%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.11%)</title><rect x="12.2152%" y="293" width="0.1085%" height="15" fill="rgb(228,201,54)"/><text x="12.4652%" y="303.50"></text></g><g><title>alloc::fmt::format (81 samples, 0.73%)</title><rect x="11.6275%" y="437" width="0.7324%" height="15" fill="rgb(222,22,37)"/><text x="11.8775%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (77 samples, 0.70%)</title><rect x="11.6637%" y="421" width="0.6962%" height="15" fill="rgb(237,53,32)"/><text x="11.9137%" y="431.50"></text></g><g><title>core::fmt::write (76 samples, 0.69%)</title><rect x="11.6727%" y="405" width="0.6872%" height="15" fill="rgb(233,25,53)"/><text x="11.9227%" y="415.50"></text></g><g><title>compiler::generate::templates::expression (21 samples, 0.19%)</title><rect x="12.3599%" y="437" width="0.1899%" height="15" fill="rgb(210,40,34)"/><text x="12.6099%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (36 samples, 0.33%)</title><rect x="12.7034%" y="421" width="0.3255%" height="15" fill="rgb(241,220,44)"/><text x="12.9534%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.12%)</title><rect x="13.1736%" y="421" width="0.1175%" height="15" fill="rgb(235,28,35)"/><text x="13.4236%" y="431.50"></text></g><g><title>compiler::generate::templates::indent (95 samples, 0.86%)</title><rect x="12.5497%" y="437" width="0.8590%" height="15" fill="rgb(210,56,17)"/><text x="12.7997%" y="447.50"></text></g><g><title>malloc_consolidate (17 samples, 0.15%)</title><rect x="13.7432%" y="389" width="0.1537%" height="15" fill="rgb(224,130,29)"/><text x="13.9932%" y="399.50"></text></g><g><title>_int_malloc (45 samples, 0.41%)</title><rect x="13.4991%" y="405" width="0.4069%" height="15" fill="rgb(235,212,8)"/><text x="13.7491%" y="415.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.42%)</title><rect x="13.4901%" y="421" width="0.4250%" height="15" fill="rgb(223,33,50)"/><text x="13.7401%" y="431.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (366 samples, 3.31%)</title><rect x="11.1483%" y="581" width="3.3092%" height="15" fill="rgb(219,149,13)"/><text x="11.3983%" y="591.50">com..</text></g><g><title>compiler::generate::generator::gen_body (366 samples, 3.31%)</title><rect x="11.1483%" y="565" width="3.3092%" height="15" fill="rgb(250,156,29)"/><text x="11.3983%" y="575.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (366 samples, 3.31%)</title><rect x="11.1483%" y="549" width="3.3092%" height="15" fill="rgb(216,193,19)"/><text x="11.3983%" y="559.50">com..</text></g><g><title>compiler::generate::generator::gen_body (366 samples, 3.31%)</title><rect x="11.1483%" y="533" width="3.3092%" height="15" fill="rgb(216,135,14)"/><text x="11.3983%" y="543.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (366 samples, 3.31%)</title><rect x="11.1483%" y="517" width="3.3092%" height="15" fill="rgb(241,47,5)"/><text x="11.3983%" y="527.50">com..</text></g><g><title>compiler::generate::generator::gen_body (366 samples, 3.31%)</title><rect x="11.1483%" y="501" width="3.3092%" height="15" fill="rgb(233,42,35)"/><text x="11.3983%" y="511.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (366 samples, 3.31%)</title><rect x="11.1483%" y="485" width="3.3092%" height="15" fill="rgb(231,13,6)"/><text x="11.3983%" y="495.50">com..</text></g><g><title>compiler::generate::generator::gen_body (366 samples, 3.31%)</title><rect x="11.1483%" y="469" width="3.3092%" height="15" fill="rgb(207,181,40)"/><text x="11.3983%" y="479.50">com..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (366 samples, 3.31%)</title><rect x="11.1483%" y="453" width="3.3092%" height="15" fill="rgb(254,173,49)"/><text x="11.3983%" y="463.50">com..</text></g><g><title>json::value::JsonValue::dump (110 samples, 0.99%)</title><rect x="13.4629%" y="437" width="0.9946%" height="15" fill="rgb(221,1,38)"/><text x="13.7129%" y="447.50"></text></g><g><title>json::codegen::Generator::write_json (60 samples, 0.54%)</title><rect x="13.9150%" y="421" width="0.5425%" height="15" fill="rgb(206,124,46)"/><text x="14.1650%" y="431.50"></text></g><g><title>json::codegen::Generator::write_string_complex (48 samples, 0.43%)</title><rect x="14.0235%" y="405" width="0.4340%" height="15" fill="rgb(249,21,11)"/><text x="14.2735%" y="415.50"></text></g><g><title>alloc::fmt::format (45 samples, 0.41%)</title><rect x="14.4575%" y="453" width="0.4069%" height="15" fill="rgb(222,201,40)"/><text x="14.7075%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (45 samples, 0.41%)</title><rect x="14.4575%" y="437" width="0.4069%" height="15" fill="rgb(235,61,29)"/><text x="14.7075%" y="447.50"></text></g><g><title>core::fmt::write (45 samples, 0.41%)</title><rect x="14.4575%" y="421" width="0.4069%" height="15" fill="rgb(219,207,3)"/><text x="14.7075%" y="431.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (45 samples, 0.41%)</title><rect x="14.4575%" y="405" width="0.4069%" height="15" fill="rgb(222,56,46)"/><text x="14.7075%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (45 samples, 0.41%)</title><rect x="14.4575%" y="389" width="0.4069%" height="15" fill="rgb(239,76,54)"/><text x="14.7075%" y="399.50"></text></g><g><title>alloc::string::String::push_str (45 samples, 0.41%)</title><rect x="14.4575%" y="373" width="0.4069%" height="15" fill="rgb(231,124,27)"/><text x="14.7075%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (45 samples, 0.41%)</title><rect x="14.4575%" y="357" width="0.4069%" height="15" fill="rgb(249,195,6)"/><text x="14.7075%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (45 samples, 0.41%)</title><rect x="14.4575%" y="341" width="0.4069%" height="15" fill="rgb(237,174,47)"/><text x="14.7075%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (45 samples, 0.41%)</title><rect x="14.4575%" y="325" width="0.4069%" height="15" fill="rgb(206,201,31)"/><text x="14.7075%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (45 samples, 0.41%)</title><rect x="14.4575%" y="309" width="0.4069%" height="15" fill="rgb(231,57,52)"/><text x="14.7075%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (45 samples, 0.41%)</title><rect x="14.4575%" y="293" width="0.4069%" height="15" fill="rgb(248,177,22)"/><text x="14.7075%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (45 samples, 0.41%)</title><rect x="14.4575%" y="277" width="0.4069%" height="15" fill="rgb(215,211,37)"/><text x="14.7075%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 0.41%)</title><rect x="14.4575%" y="261" width="0.4069%" height="15" fill="rgb(241,128,51)"/><text x="14.7075%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (45 samples, 0.41%)</title><rect x="14.4575%" y="245" width="0.4069%" height="15" fill="rgb(227,165,31)"/><text x="14.7075%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (45 samples, 0.41%)</title><rect x="14.4575%" y="229" width="0.4069%" height="15" fill="rgb(228,167,24)"/><text x="14.7075%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (45 samples, 0.41%)</title><rect x="14.4575%" y="213" width="0.4069%" height="15" fill="rgb(228,143,12)"/><text x="14.7075%" y="223.50"></text></g><g><title>alloc::alloc::realloc (45 samples, 0.41%)</title><rect x="14.4575%" y="197" width="0.4069%" height="15" fill="rgb(249,149,8)"/><text x="14.7075%" y="207.50"></text></g><g><title>__rdl_realloc (45 samples, 0.41%)</title><rect x="14.4575%" y="181" width="0.4069%" height="15" fill="rgb(243,35,44)"/><text x="14.7075%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (45 samples, 0.41%)</title><rect x="14.4575%" y="165" width="0.4069%" height="15" fill="rgb(246,89,9)"/><text x="14.7075%" y="175.50"></text></g><g><title>__GI___libc_realloc (45 samples, 0.41%)</title><rect x="14.4575%" y="149" width="0.4069%" height="15" fill="rgb(233,213,13)"/><text x="14.7075%" y="159.50"></text></g><g><title>_int_realloc (45 samples, 0.41%)</title><rect x="14.4575%" y="133" width="0.4069%" height="15" fill="rgb(233,141,41)"/><text x="14.7075%" y="143.50"></text></g><g><title>_int_malloc (45 samples, 0.41%)</title><rect x="14.4575%" y="117" width="0.4069%" height="15" fill="rgb(239,167,4)"/><text x="14.7075%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (23 samples, 0.21%)</title><rect x="15.1266%" y="437" width="0.2080%" height="15" fill="rgb(209,217,16)"/><text x="15.3766%" y="447.50"></text></g><g><title>_int_malloc (13 samples, 0.12%)</title><rect x="15.4702%" y="405" width="0.1175%" height="15" fill="rgb(219,88,35)"/><text x="15.7202%" y="415.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.14%)</title><rect x="15.4521%" y="421" width="0.1447%" height="15" fill="rgb(220,193,23)"/><text x="15.7021%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (31 samples, 0.28%)</title><rect x="15.4250%" y="437" width="0.2803%" height="15" fill="rgb(230,90,52)"/><text x="15.6750%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (23 samples, 0.21%)</title><rect x="15.7052%" y="437" width="0.2080%" height="15" fill="rgb(252,106,19)"/><text x="15.9552%" y="447.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.19%)</title><rect x="15.7233%" y="421" width="0.1899%" height="15" fill="rgb(206,74,20)"/><text x="15.9733%" y="431.50"></text></g><g><title>_int_realloc (19 samples, 0.17%)</title><rect x="15.7414%" y="405" width="0.1718%" height="15" fill="rgb(230,138,44)"/><text x="15.9914%" y="415.50"></text></g><g><title>compiler::generate::generator::gen_body (117 samples, 1.06%)</title><rect x="14.8644%" y="453" width="1.0579%" height="15" fill="rgb(235,182,43)"/><text x="15.1144%" y="463.50"></text></g><g><title>__GI___libc_realloc (70 samples, 0.63%)</title><rect x="16.3110%" y="421" width="0.6329%" height="15" fill="rgb(242,16,51)"/><text x="16.5610%" y="431.50"></text></g><g><title>_int_realloc (58 samples, 0.52%)</title><rect x="16.4195%" y="405" width="0.5244%" height="15" fill="rgb(248,9,4)"/><text x="16.6695%" y="415.50"></text></g><g><title>_int_malloc (32 samples, 0.29%)</title><rect x="16.6546%" y="389" width="0.2893%" height="15" fill="rgb(210,31,22)"/><text x="16.9046%" y="399.50"></text></g><g><title>_int_free (33 samples, 0.30%)</title><rect x="17.0253%" y="421" width="0.2984%" height="15" fill="rgb(239,54,39)"/><text x="17.2753%" y="431.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (17 samples, 0.15%)</title><rect x="17.3508%" y="405" width="0.1537%" height="15" fill="rgb(230,99,41)"/><text x="17.6008%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (14 samples, 0.13%)</title><rect x="18.2098%" y="197" width="0.1266%" height="15" fill="rgb(253,106,12)"/><text x="18.4598%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.13%)</title><rect x="18.2098%" y="181" width="0.1266%" height="15" fill="rgb(213,46,41)"/><text x="18.4598%" y="191.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.13%)</title><rect x="18.2098%" y="165" width="0.1266%" height="15" fill="rgb(215,133,35)"/><text x="18.4598%" y="175.50"></text></g><g><title>__rdl_alloc (14 samples, 0.13%)</title><rect x="18.2098%" y="149" width="0.1266%" height="15" fill="rgb(213,28,5)"/><text x="18.4598%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.13%)</title><rect x="18.2098%" y="133" width="0.1266%" height="15" fill="rgb(215,77,49)"/><text x="18.4598%" y="143.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.13%)</title><rect x="18.2098%" y="117" width="0.1266%" height="15" fill="rgb(248,100,22)"/><text x="18.4598%" y="127.50"></text></g><g><title>_int_free (14 samples, 0.13%)</title><rect x="18.7975%" y="85" width="0.1266%" height="15" fill="rgb(208,67,9)"/><text x="19.0475%" y="95.50"></text></g><g><title>_int_realloc (78 samples, 0.71%)</title><rect x="18.5624%" y="101" width="0.7052%" height="15" fill="rgb(219,133,21)"/><text x="18.8124%" y="111.50"></text></g><g><title>_int_malloc (38 samples, 0.34%)</title><rect x="18.9241%" y="85" width="0.3436%" height="15" fill="rgb(246,46,29)"/><text x="19.1741%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (119 samples, 1.08%)</title><rect x="18.2007%" y="213" width="1.0759%" height="15" fill="rgb(246,185,52)"/><text x="18.4507%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (104 samples, 0.94%)</title><rect x="18.3363%" y="197" width="0.9403%" height="15" fill="rgb(252,136,11)"/><text x="18.5863%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (104 samples, 0.94%)</title><rect x="18.3363%" y="181" width="0.9403%" height="15" fill="rgb(219,138,53)"/><text x="18.5863%" y="191.50"></text></g><g><title>alloc::alloc::realloc (104 samples, 0.94%)</title><rect x="18.3363%" y="165" width="0.9403%" height="15" fill="rgb(211,51,23)"/><text x="18.5863%" y="175.50"></text></g><g><title>__rdl_realloc (104 samples, 0.94%)</title><rect x="18.3363%" y="149" width="0.9403%" height="15" fill="rgb(247,221,28)"/><text x="18.5863%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (104 samples, 0.94%)</title><rect x="18.3363%" y="133" width="0.9403%" height="15" fill="rgb(251,222,45)"/><text x="18.5863%" y="143.50"></text></g><g><title>__GI___libc_realloc (104 samples, 0.94%)</title><rect x="18.3363%" y="117" width="0.9403%" height="15" fill="rgb(217,162,53)"/><text x="18.5863%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (143 samples, 1.29%)</title><rect x="18.0199%" y="277" width="1.2929%" height="15" fill="rgb(229,93,14)"/><text x="18.2699%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (133 samples, 1.20%)</title><rect x="18.1103%" y="261" width="1.2025%" height="15" fill="rgb(209,67,49)"/><text x="18.3603%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (133 samples, 1.20%)</title><rect x="18.1103%" y="245" width="1.2025%" height="15" fill="rgb(213,87,29)"/><text x="18.3603%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (127 samples, 1.15%)</title><rect x="18.1646%" y="229" width="1.1483%" height="15" fill="rgb(205,151,52)"/><text x="18.4146%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned (12 samples, 0.11%)</title><rect x="19.3219%" y="261" width="0.1085%" height="15" fill="rgb(253,215,39)"/><text x="19.5719%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (198 samples, 1.79%)</title><rect x="17.7577%" y="373" width="1.7902%" height="15" fill="rgb(221,220,41)"/><text x="18.0077%" y="383.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (179 samples, 1.62%)</title><rect x="17.9295%" y="357" width="1.6184%" height="15" fill="rgb(218,133,21)"/><text x="18.1795%" y="367.50"></text></g><g><title>alloc::string::String::push_str (179 samples, 1.62%)</title><rect x="17.9295%" y="341" width="1.6184%" height="15" fill="rgb(221,193,43)"/><text x="18.1795%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (179 samples, 1.62%)</title><rect x="17.9295%" y="325" width="1.6184%" height="15" fill="rgb(240,128,52)"/><text x="18.1795%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (179 samples, 1.62%)</title><rect x="17.9295%" y="309" width="1.6184%" height="15" fill="rgb(253,114,12)"/><text x="18.1795%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (179 samples, 1.62%)</title><rect x="17.9295%" y="293" width="1.6184%" height="15" fill="rgb(215,223,47)"/><text x="18.1795%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.24%)</title><rect x="19.3128%" y="277" width="0.2351%" height="15" fill="rgb(248,225,23)"/><text x="19.5628%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.12%)</title><rect x="19.4304%" y="261" width="0.1175%" height="15" fill="rgb(250,108,0)"/><text x="19.6804%" y="271.50"></text></g><g><title>alloc::fmt::format (268 samples, 2.42%)</title><rect x="17.3237%" y="421" width="2.4231%" height="15" fill="rgb(228,208,7)"/><text x="17.5737%" y="431.50">al..</text></g><g><title>core::fmt::Write::write_fmt (248 samples, 2.24%)</title><rect x="17.5045%" y="405" width="2.2423%" height="15" fill="rgb(244,45,10)"/><text x="17.7545%" y="415.50">c..</text></g><g><title>core::fmt::write (241 samples, 2.18%)</title><rect x="17.5678%" y="389" width="2.1790%" height="15" fill="rgb(207,125,25)"/><text x="17.8178%" y="399.50">c..</text></g><g><title>core::fmt::Formatter::pad (14 samples, 0.13%)</title><rect x="19.6203%" y="373" width="0.1266%" height="15" fill="rgb(210,195,18)"/><text x="19.8703%" y="383.50"></text></g><g><title>__GI___libc_free (16 samples, 0.14%)</title><rect x="20.5425%" y="405" width="0.1447%" height="15" fill="rgb(249,80,12)"/><text x="20.7925%" y="415.50"></text></g><g><title>_int_free (31 samples, 0.28%)</title><rect x="20.8137%" y="405" width="0.2803%" height="15" fill="rgb(221,65,9)"/><text x="21.0637%" y="415.50"></text></g><g><title>__GI___libc_malloc (50 samples, 0.45%)</title><rect x="21.3201%" y="389" width="0.4521%" height="15" fill="rgb(235,49,36)"/><text x="21.5701%" y="399.50"></text></g><g><title>compiler::generate::templates::expression (652 samples, 5.90%)</title><rect x="15.9222%" y="453" width="5.8951%" height="15" fill="rgb(225,32,20)"/><text x="16.1722%" y="463.50">compile..</text></g><g><title>compiler::generate::templates::guard (652 samples, 5.90%)</title><rect x="15.9222%" y="437" width="5.8951%" height="15" fill="rgb(215,141,46)"/><text x="16.1722%" y="447.50">compile..</text></g><g><title>compiler::generate::templates::escape_path (229 samples, 2.07%)</title><rect x="19.7468%" y="421" width="2.0705%" height="15" fill="rgb(250,160,47)"/><text x="19.9968%" y="431.50">c..</text></g><g><title>compiler::generate::templates::escape_path::{{closure}} (80 samples, 0.72%)</title><rect x="21.0940%" y="405" width="0.7233%" height="15" fill="rgb(216,222,40)"/><text x="21.3440%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (15 samples, 0.14%)</title><rect x="21.8354%" y="389" width="0.1356%" height="15" fill="rgb(234,217,39)"/><text x="22.0854%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (15 samples, 0.14%)</title><rect x="21.8354%" y="373" width="0.1356%" height="15" fill="rgb(207,178,40)"/><text x="22.0854%" y="383.50"></text></g><g><title>alloc::string::String::push_str (15 samples, 0.14%)</title><rect x="21.8354%" y="357" width="0.1356%" height="15" fill="rgb(221,136,13)"/><text x="22.0854%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (15 samples, 0.14%)</title><rect x="21.8354%" y="341" width="0.1356%" height="15" fill="rgb(249,199,10)"/><text x="22.0854%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (15 samples, 0.14%)</title><rect x="21.8354%" y="325" width="0.1356%" height="15" fill="rgb(249,222,13)"/><text x="22.0854%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (15 samples, 0.14%)</title><rect x="21.8354%" y="309" width="0.1356%" height="15" fill="rgb(244,185,38)"/><text x="22.0854%" y="319.50"></text></g><g><title>alloc::fmt::format (16 samples, 0.14%)</title><rect x="21.8354%" y="437" width="0.1447%" height="15" fill="rgb(236,202,9)"/><text x="22.0854%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (16 samples, 0.14%)</title><rect x="21.8354%" y="421" width="0.1447%" height="15" fill="rgb(250,229,37)"/><text x="22.0854%" y="431.50"></text></g><g><title>core::fmt::write (16 samples, 0.14%)</title><rect x="21.8354%" y="405" width="0.1447%" height="15" fill="rgb(206,174,23)"/><text x="22.0854%" y="415.50"></text></g><g><title>compiler::generate::generator::gen_body (853 samples, 7.71%)</title><rect x="14.4575%" y="581" width="7.7125%" height="15" fill="rgb(211,33,43)"/><text x="14.7075%" y="591.50">compiler::g..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (853 samples, 7.71%)</title><rect x="14.4575%" y="565" width="7.7125%" height="15" fill="rgb(245,58,50)"/><text x="14.7075%" y="575.50">compiler::g..</text></g><g><title>compiler::generate::generator::gen_body (853 samples, 7.71%)</title><rect x="14.4575%" y="549" width="7.7125%" height="15" fill="rgb(244,68,36)"/><text x="14.7075%" y="559.50">compiler::g..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (853 samples, 7.71%)</title><rect x="14.4575%" y="533" width="7.7125%" height="15" fill="rgb(232,229,15)"/><text x="14.7075%" y="543.50">compiler::g..</text></g><g><title>compiler::generate::generator::gen_body (853 samples, 7.71%)</title><rect x="14.4575%" y="517" width="7.7125%" height="15" fill="rgb(254,30,23)"/><text x="14.7075%" y="527.50">compiler::g..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (853 samples, 7.71%)</title><rect x="14.4575%" y="501" width="7.7125%" height="15" fill="rgb(235,160,14)"/><text x="14.7075%" y="511.50">compiler::g..</text></g><g><title>compiler::generate::generator::gen_body (853 samples, 7.71%)</title><rect x="14.4575%" y="485" width="7.7125%" height="15" fill="rgb(212,155,44)"/><text x="14.7075%" y="495.50">compiler::g..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (853 samples, 7.71%)</title><rect x="14.4575%" y="469" width="7.7125%" height="15" fill="rgb(226,2,50)"/><text x="14.7075%" y="479.50">compiler::g..</text></g><g><title>compiler::generate::templates::indent (39 samples, 0.35%)</title><rect x="21.8174%" y="453" width="0.3526%" height="15" fill="rgb(234,177,6)"/><text x="22.0674%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (21 samples, 0.19%)</title><rect x="21.9801%" y="437" width="0.1899%" height="15" fill="rgb(217,24,9)"/><text x="22.2301%" y="447.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.19%)</title><rect x="21.9801%" y="421" width="0.1899%" height="15" fill="rgb(220,13,46)"/><text x="22.2301%" y="431.50"></text></g><g><title>_int_realloc (21 samples, 0.19%)</title><rect x="21.9801%" y="405" width="0.1899%" height="15" fill="rgb(239,221,27)"/><text x="22.2301%" y="415.50"></text></g><g><title>_int_malloc (12 samples, 0.11%)</title><rect x="22.0615%" y="389" width="0.1085%" height="15" fill="rgb(222,198,25)"/><text x="22.3115%" y="399.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (92 samples, 0.83%)</title><rect x="23.9331%" y="517" width="0.8318%" height="15" fill="rgb(211,99,13)"/><text x="24.1831%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (171 samples, 1.55%)</title><rect x="23.2369%" y="533" width="1.5461%" height="15" fill="rgb(232,111,31)"/><text x="23.4869%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.14%)</title><rect x="24.9638%" y="533" width="0.1447%" height="15" fill="rgb(245,82,37)"/><text x="25.2138%" y="543.50"></text></g><g><title>nom::branch::alt::{{closure}} (75 samples, 0.68%)</title><rect x="25.2170%" y="533" width="0.6781%" height="15" fill="rgb(227,149,46)"/><text x="25.4670%" y="543.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (66 samples, 0.60%)</title><rect x="25.8951%" y="533" width="0.5967%" height="15" fill="rgb(218,36,50)"/><text x="26.1451%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (44 samples, 0.40%)</title><rect x="26.0940%" y="517" width="0.3978%" height="15" fill="rgb(226,80,48)"/><text x="26.3440%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (31 samples, 0.28%)</title><rect x="26.2116%" y="501" width="0.2803%" height="15" fill="rgb(238,224,15)"/><text x="26.4616%" y="511.50"></text></g><g><title>nom::branch::alt::{{closure}} (512 samples, 4.63%)</title><rect x="22.1700%" y="549" width="4.6293%" height="15" fill="rgb(241,136,10)"/><text x="22.4200%" y="559.50">nom::..</text></g><g><title>nom::combinator::map::{{closure}} (34 samples, 0.31%)</title><rect x="26.4919%" y="533" width="0.3074%" height="15" fill="rgb(208,32,45)"/><text x="26.7419%" y="543.50"></text></g><g><title>nom::sequence::pair::{{closure}} (23 samples, 0.21%)</title><rect x="26.5913%" y="517" width="0.2080%" height="15" fill="rgb(207,135,9)"/><text x="26.8413%" y="527.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;&amp;str,X&gt; as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (28 samples, 0.25%)</title><rect x="30.9855%" y="485" width="0.2532%" height="15" fill="rgb(206,86,44)"/><text x="31.2355%" y="495.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (167 samples, 1.51%)</title><rect x="29.7920%" y="501" width="1.5099%" height="15" fill="rgb(245,177,15)"/><text x="30.0420%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (289 samples, 2.61%)</title><rect x="28.6980%" y="517" width="2.6130%" height="15" fill="rgb(206,64,50)"/><text x="28.9480%" y="527.50">&lt;F..</text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 0.24%)</title><rect x="31.4738%" y="517" width="0.2441%" height="15" fill="rgb(234,36,40)"/><text x="31.7238%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (31 samples, 0.28%)</title><rect x="31.7269%" y="517" width="0.2803%" height="15" fill="rgb(213,64,8)"/><text x="31.9769%" y="527.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.25%)</title><rect x="31.7541%" y="501" width="0.2532%" height="15" fill="rgb(210,75,36)"/><text x="32.0041%" y="511.50"></text></g><g><title>_int_malloc (27 samples, 0.24%)</title><rect x="31.7631%" y="485" width="0.2441%" height="15" fill="rgb(229,88,21)"/><text x="32.0131%" y="495.50"></text></g><g><title>nom::combinator::consumed::{{closure}} (133 samples, 1.20%)</title><rect x="32.0072%" y="517" width="1.2025%" height="15" fill="rgb(252,204,47)"/><text x="32.2572%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (85 samples, 0.77%)</title><rect x="32.4412%" y="501" width="0.7685%" height="15" fill="rgb(208,77,27)"/><text x="32.6912%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (64 samples, 0.58%)</title><rect x="32.6311%" y="485" width="0.5787%" height="15" fill="rgb(221,76,26)"/><text x="32.8811%" y="495.50"></text></g><g><title>compiler::parse::tokens::tokens (1,272 samples, 11.50%)</title><rect x="22.1700%" y="581" width="11.5009%" height="15" fill="rgb(225,139,18)"/><text x="22.4200%" y="591.50">compiler::parse::..</text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,272 samples, 11.50%)</title><rect x="22.1700%" y="565" width="11.5009%" height="15" fill="rgb(230,137,11)"/><text x="22.4200%" y="575.50">&lt;F as nom::intern..</text></g><g><title>nom::sequence::delimited::{{closure}} (760 samples, 6.87%)</title><rect x="26.7993%" y="549" width="6.8716%" height="15" fill="rgb(212,28,1)"/><text x="27.0493%" y="559.50">nom::sequ..</text></g><g><title>nom::branch::alt::{{closure}} (760 samples, 6.87%)</title><rect x="26.7993%" y="533" width="6.8716%" height="15" fill="rgb(248,164,17)"/><text x="27.0493%" y="543.50">nom::bran..</text></g><g><title>nom::combinator::map::{{closure}} (51 samples, 0.46%)</title><rect x="33.2098%" y="517" width="0.4611%" height="15" fill="rgb(222,171,42)"/><text x="33.4598%" y="527.50"></text></g><g><title>nom::sequence::pair::{{closure}} (36 samples, 0.33%)</title><rect x="33.3454%" y="501" width="0.3255%" height="15" fill="rgb(243,84,45)"/><text x="33.5954%" y="511.50"></text></g><g><title>&lt;compiler::parse::expression::Expression as core::clone::Clone&gt;::clone (24 samples, 0.22%)</title><rect x="33.9241%" y="501" width="0.2170%" height="15" fill="rgb(252,49,23)"/><text x="34.1741%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.20%)</title><rect x="33.9421%" y="485" width="0.1989%" height="15" fill="rgb(215,19,7)"/><text x="34.1921%" y="495.50"></text></g><g><title>__GI___libc_malloc (18 samples, 0.16%)</title><rect x="33.9783%" y="469" width="0.1627%" height="15" fill="rgb(238,81,41)"/><text x="34.2283%" y="479.50"></text></g><g><title>_int_malloc (15 samples, 0.14%)</title><rect x="34.0054%" y="453" width="0.1356%" height="15" fill="rgb(210,199,37)"/><text x="34.2554%" y="463.50"></text></g><g><title>_int_malloc (35 samples, 0.32%)</title><rect x="34.4575%" y="469" width="0.3165%" height="15" fill="rgb(244,192,49)"/><text x="34.7075%" y="479.50"></text></g><g><title>__GI___libc_malloc (44 samples, 0.40%)</title><rect x="34.3942%" y="485" width="0.3978%" height="15" fill="rgb(226,211,11)"/><text x="34.6442%" y="495.50"></text></g><g><title>&lt;compiler::parse::expression::Expression as core::clone::Clone&gt;::clone (105 samples, 0.95%)</title><rect x="33.8879%" y="517" width="0.9494%" height="15" fill="rgb(236,162,54)"/><text x="34.1379%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (68 samples, 0.61%)</title><rect x="34.2224%" y="501" width="0.6148%" height="15" fill="rgb(220,229,9)"/><text x="34.4724%" y="511.50"></text></g><g><title>&lt;compiler::parse::tokens::Token as core::clone::Clone&gt;::clone (133 samples, 1.20%)</title><rect x="33.7523%" y="533" width="1.2025%" height="15" fill="rgb(250,87,22)"/><text x="34.0023%" y="543.50"></text></g><g><title>_int_malloc (27 samples, 0.24%)</title><rect x="34.9729%" y="517" width="0.2441%" height="15" fill="rgb(239,43,17)"/><text x="35.2229%" y="527.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.26%)</title><rect x="34.9638%" y="533" width="0.2622%" height="15" fill="rgb(231,177,25)"/><text x="35.2138%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (102 samples, 0.92%)</title><rect x="35.3797%" y="533" width="0.9222%" height="15" fill="rgb(219,179,1)"/><text x="35.6297%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (15 samples, 0.14%)</title><rect x="36.4919%" y="517" width="0.1356%" height="15" fill="rgb(238,219,53)"/><text x="36.7419%" y="527.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.13%)</title><rect x="36.5009%" y="501" width="0.1266%" height="15" fill="rgb(232,167,36)"/><text x="36.7509%" y="511.50"></text></g><g><title>_int_realloc (13 samples, 0.12%)</title><rect x="36.5099%" y="485" width="0.1175%" height="15" fill="rgb(244,19,51)"/><text x="36.7599%" y="495.50"></text></g><g><title>compiler::parse::tree::resolve_expression_paths (36 samples, 0.33%)</title><rect x="36.3110%" y="533" width="0.3255%" height="15" fill="rgb(224,6,22)"/><text x="36.5610%" y="543.50"></text></g><g><title>_int_free (29 samples, 0.26%)</title><rect x="36.8535%" y="517" width="0.2622%" height="15" fill="rgb(224,145,5)"/><text x="37.1035%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (78 samples, 0.71%)</title><rect x="36.6365%" y="533" width="0.7052%" height="15" fill="rgb(234,130,49)"/><text x="36.8865%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (25 samples, 0.23%)</title><rect x="37.1157%" y="517" width="0.2260%" height="15" fill="rgb(254,6,2)"/><text x="37.3657%" y="527.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (247 samples, 2.23%)</title><rect x="37.3599%" y="405" width="2.2333%" height="15" fill="rgb(208,96,46)"/><text x="37.6099%" y="415.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (247 samples, 2.23%)</title><rect x="37.3599%" y="389" width="2.2333%" height="15" fill="rgb(239,3,39)"/><text x="37.6099%" y="399.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (247 samples, 2.23%)</title><rect x="37.3599%" y="373" width="2.2333%" height="15" fill="rgb(233,210,1)"/><text x="37.6099%" y="383.50">&lt;..</text></g><g><title>std::io::Write::write_all (247 samples, 2.23%)</title><rect x="37.3599%" y="357" width="2.2333%" height="15" fill="rgb(244,137,37)"/><text x="37.6099%" y="367.50">s..</text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (247 samples, 2.23%)</title><rect x="37.3599%" y="341" width="2.2333%" height="15" fill="rgb(240,136,2)"/><text x="37.6099%" y="351.50">&lt;..</text></g><g><title>std::sys::unix::fd::FileDesc::write (247 samples, 2.23%)</title><rect x="37.3599%" y="325" width="2.2333%" height="15" fill="rgb(239,18,37)"/><text x="37.6099%" y="335.50">s..</text></g><g><title>__libc_write (247 samples, 2.23%)</title><rect x="37.3599%" y="309" width="2.2333%" height="15" fill="rgb(218,185,22)"/><text x="37.6099%" y="319.50">_..</text></g><g><title>[unknown] (246 samples, 2.22%)</title><rect x="37.3689%" y="293" width="2.2242%" height="15" fill="rgb(225,218,4)"/><text x="37.6189%" y="303.50">[..</text></g><g><title>[unknown] (238 samples, 2.15%)</title><rect x="37.4412%" y="277" width="2.1519%" height="15" fill="rgb(230,182,32)"/><text x="37.6912%" y="287.50">[..</text></g><g><title>[unknown] (237 samples, 2.14%)</title><rect x="37.4503%" y="261" width="2.1429%" height="15" fill="rgb(242,56,43)"/><text x="37.7003%" y="271.50">[..</text></g><g><title>[unknown] (236 samples, 2.13%)</title><rect x="37.4593%" y="245" width="2.1338%" height="15" fill="rgb(233,99,24)"/><text x="37.7093%" y="255.50">[..</text></g><g><title>[unknown] (235 samples, 2.12%)</title><rect x="37.4684%" y="229" width="2.1248%" height="15" fill="rgb(234,209,42)"/><text x="37.7184%" y="239.50">[..</text></g><g><title>[unknown] (228 samples, 2.06%)</title><rect x="37.5316%" y="213" width="2.0615%" height="15" fill="rgb(227,7,12)"/><text x="37.7816%" y="223.50">[..</text></g><g><title>[unknown] (224 samples, 2.03%)</title><rect x="37.5678%" y="197" width="2.0253%" height="15" fill="rgb(245,203,43)"/><text x="37.8178%" y="207.50">[..</text></g><g><title>[unknown] (218 samples, 1.97%)</title><rect x="37.6221%" y="181" width="1.9711%" height="15" fill="rgb(238,205,33)"/><text x="37.8721%" y="191.50">[..</text></g><g><title>[unknown] (174 samples, 1.57%)</title><rect x="38.0199%" y="165" width="1.5732%" height="15" fill="rgb(231,56,7)"/><text x="38.2699%" y="175.50"></text></g><g><title>[unknown] (157 samples, 1.42%)</title><rect x="38.1736%" y="149" width="1.4195%" height="15" fill="rgb(244,186,29)"/><text x="38.4236%" y="159.50"></text></g><g><title>[unknown] (120 samples, 1.08%)</title><rect x="38.5081%" y="133" width="1.0850%" height="15" fill="rgb(234,111,31)"/><text x="38.7581%" y="143.50"></text></g><g><title>[unknown] (94 samples, 0.85%)</title><rect x="38.7432%" y="117" width="0.8499%" height="15" fill="rgb(241,149,10)"/><text x="38.9932%" y="127.50"></text></g><g><title>[unknown] (64 samples, 0.58%)</title><rect x="39.0145%" y="101" width="0.5787%" height="15" fill="rgb(249,206,44)"/><text x="39.2645%" y="111.50"></text></g><g><title>[unknown] (57 samples, 0.52%)</title><rect x="39.0778%" y="85" width="0.5154%" height="15" fill="rgb(251,153,30)"/><text x="39.3278%" y="95.50"></text></g><g><title>[unknown] (57 samples, 0.52%)</title><rect x="39.0778%" y="69" width="0.5154%" height="15" fill="rgb(239,152,38)"/><text x="39.3278%" y="79.50"></text></g><g><title>[unknown] (28 samples, 0.25%)</title><rect x="39.3400%" y="53" width="0.2532%" height="15" fill="rgb(249,139,47)"/><text x="39.5900%" y="63.50"></text></g><g><title>[unknown] (14 samples, 0.13%)</title><rect x="39.4665%" y="37" width="0.1266%" height="15" fill="rgb(244,64,35)"/><text x="39.7165%" y="47.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (35 samples, 0.32%)</title><rect x="39.7197%" y="373" width="0.3165%" height="15" fill="rgb(216,46,15)"/><text x="39.9697%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (35 samples, 0.32%)</title><rect x="39.7197%" y="357" width="0.3165%" height="15" fill="rgb(250,74,19)"/><text x="39.9697%" y="367.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (35 samples, 0.32%)</title><rect x="39.7197%" y="341" width="0.3165%" height="15" fill="rgb(249,42,33)"/><text x="39.9697%" y="351.50"></text></g><g><title>std::io::Write::write_all (35 samples, 0.32%)</title><rect x="39.7197%" y="325" width="0.3165%" height="15" fill="rgb(242,149,17)"/><text x="39.9697%" y="335.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (35 samples, 0.32%)</title><rect x="39.7197%" y="309" width="0.3165%" height="15" fill="rgb(244,29,21)"/><text x="39.9697%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (35 samples, 0.32%)</title><rect x="39.7197%" y="293" width="0.3165%" height="15" fill="rgb(220,130,37)"/><text x="39.9697%" y="303.50"></text></g><g><title>__libc_write (35 samples, 0.32%)</title><rect x="39.7197%" y="277" width="0.3165%" height="15" fill="rgb(211,67,2)"/><text x="39.9697%" y="287.50"></text></g><g><title>[unknown] (35 samples, 0.32%)</title><rect x="39.7197%" y="261" width="0.3165%" height="15" fill="rgb(235,68,52)"/><text x="39.9697%" y="271.50"></text></g><g><title>[unknown] (35 samples, 0.32%)</title><rect x="39.7197%" y="245" width="0.3165%" height="15" fill="rgb(246,142,3)"/><text x="39.9697%" y="255.50"></text></g><g><title>[unknown] (34 samples, 0.31%)</title><rect x="39.7288%" y="229" width="0.3074%" height="15" fill="rgb(241,25,7)"/><text x="39.9788%" y="239.50"></text></g><g><title>[unknown] (34 samples, 0.31%)</title><rect x="39.7288%" y="213" width="0.3074%" height="15" fill="rgb(242,119,39)"/><text x="39.9788%" y="223.50"></text></g><g><title>[unknown] (34 samples, 0.31%)</title><rect x="39.7288%" y="197" width="0.3074%" height="15" fill="rgb(241,98,45)"/><text x="39.9788%" y="207.50"></text></g><g><title>[unknown] (34 samples, 0.31%)</title><rect x="39.7288%" y="181" width="0.3074%" height="15" fill="rgb(254,28,30)"/><text x="39.9788%" y="191.50"></text></g><g><title>[unknown] (34 samples, 0.31%)</title><rect x="39.7288%" y="165" width="0.3074%" height="15" fill="rgb(241,142,54)"/><text x="39.9788%" y="175.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="39.7378%" y="149" width="0.2984%" height="15" fill="rgb(222,85,15)"/><text x="39.9878%" y="159.50"></text></g><g><title>[unknown] (27 samples, 0.24%)</title><rect x="39.7920%" y="133" width="0.2441%" height="15" fill="rgb(210,85,47)"/><text x="40.0420%" y="143.50"></text></g><g><title>[unknown] (27 samples, 0.24%)</title><rect x="39.7920%" y="117" width="0.2441%" height="15" fill="rgb(224,206,25)"/><text x="40.0420%" y="127.50"></text></g><g><title>[unknown] (19 samples, 0.17%)</title><rect x="39.8644%" y="101" width="0.1718%" height="15" fill="rgb(243,201,19)"/><text x="40.1144%" y="111.50"></text></g><g><title>[unknown] (14 samples, 0.13%)</title><rect x="39.9096%" y="85" width="0.1266%" height="15" fill="rgb(236,59,4)"/><text x="40.1596%" y="95.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::fmt::Display&gt;::fmt (41 samples, 0.37%)</title><rect x="39.7107%" y="389" width="0.3707%" height="15" fill="rgb(254,179,45)"/><text x="39.9607%" y="399.50"></text></g><g><title>__libc_write (37 samples, 0.33%)</title><rect x="40.0814%" y="293" width="0.3345%" height="15" fill="rgb(226,14,10)"/><text x="40.3314%" y="303.50"></text></g><g><title>[unknown] (37 samples, 0.33%)</title><rect x="40.0814%" y="277" width="0.3345%" height="15" fill="rgb(244,27,41)"/><text x="40.3314%" y="287.50"></text></g><g><title>[unknown] (37 samples, 0.33%)</title><rect x="40.0814%" y="261" width="0.3345%" height="15" fill="rgb(235,35,32)"/><text x="40.3314%" y="271.50"></text></g><g><title>[unknown] (36 samples, 0.33%)</title><rect x="40.0904%" y="245" width="0.3255%" height="15" fill="rgb(218,68,31)"/><text x="40.3404%" y="255.50"></text></g><g><title>[unknown] (36 samples, 0.33%)</title><rect x="40.0904%" y="229" width="0.3255%" height="15" fill="rgb(207,120,37)"/><text x="40.3404%" y="239.50"></text></g><g><title>[unknown] (36 samples, 0.33%)</title><rect x="40.0904%" y="213" width="0.3255%" height="15" fill="rgb(227,98,0)"/><text x="40.3404%" y="223.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="40.1175%" y="197" width="0.2984%" height="15" fill="rgb(207,7,3)"/><text x="40.3675%" y="207.50"></text></g><g><title>[unknown] (32 samples, 0.29%)</title><rect x="40.1266%" y="181" width="0.2893%" height="15" fill="rgb(206,98,19)"/><text x="40.3766%" y="191.50"></text></g><g><title>[unknown] (31 samples, 0.28%)</title><rect x="40.1356%" y="165" width="0.2803%" height="15" fill="rgb(217,5,26)"/><text x="40.3856%" y="175.50"></text></g><g><title>[unknown] (24 samples, 0.22%)</title><rect x="40.1989%" y="149" width="0.2170%" height="15" fill="rgb(235,190,38)"/><text x="40.4489%" y="159.50"></text></g><g><title>[unknown] (19 samples, 0.17%)</title><rect x="40.2441%" y="133" width="0.1718%" height="15" fill="rgb(247,86,24)"/><text x="40.4941%" y="143.50"></text></g><g><title>[unknown] (14 samples, 0.13%)</title><rect x="40.2893%" y="117" width="0.1266%" height="15" fill="rgb(205,101,16)"/><text x="40.5393%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (38 samples, 0.34%)</title><rect x="40.0814%" y="389" width="0.3436%" height="15" fill="rgb(246,168,33)"/><text x="40.3314%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (38 samples, 0.34%)</title><rect x="40.0814%" y="373" width="0.3436%" height="15" fill="rgb(231,114,1)"/><text x="40.3314%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (38 samples, 0.34%)</title><rect x="40.0814%" y="357" width="0.3436%" height="15" fill="rgb(207,184,53)"/><text x="40.3314%" y="367.50"></text></g><g><title>std::io::Write::write_all (38 samples, 0.34%)</title><rect x="40.0814%" y="341" width="0.3436%" height="15" fill="rgb(224,95,51)"/><text x="40.3314%" y="351.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (38 samples, 0.34%)</title><rect x="40.0814%" y="325" width="0.3436%" height="15" fill="rgb(212,188,45)"/><text x="40.3314%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (38 samples, 0.34%)</title><rect x="40.0814%" y="309" width="0.3436%" height="15" fill="rgb(223,154,38)"/><text x="40.3314%" y="319.50"></text></g><g><title>compiler::parse::tree::tree::{{closure}} (788 samples, 7.12%)</title><rect x="33.6709%" y="581" width="7.1248%" height="15" fill="rgb(251,22,52)"/><text x="33.9209%" y="591.50">compiler::..</text></g><g><title>compiler::parse::tree::tree (788 samples, 7.12%)</title><rect x="33.6709%" y="565" width="7.1248%" height="15" fill="rgb(229,209,22)"/><text x="33.9209%" y="575.50">compiler::..</text></g><g><title>compiler::parse::tree::tree (788 samples, 7.12%)</title><rect x="33.6709%" y="549" width="7.1248%" height="15" fill="rgb(234,138,34)"/><text x="33.9209%" y="559.50">compiler::..</text></g><g><title>std::io::stdio::_eprint (382 samples, 3.45%)</title><rect x="37.3418%" y="533" width="3.4539%" height="15" fill="rgb(212,95,11)"/><text x="37.5918%" y="543.50">std..</text></g><g><title>std::io::stdio::print_to (382 samples, 3.45%)</title><rect x="37.3418%" y="517" width="3.4539%" height="15" fill="rgb(240,179,47)"/><text x="37.5918%" y="527.50">std..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (382 samples, 3.45%)</title><rect x="37.3418%" y="501" width="3.4539%" height="15" fill="rgb(240,163,11)"/><text x="37.5918%" y="511.50">cor..</text></g><g><title>std::io::stdio::print_to::{{closure}} (382 samples, 3.45%)</title><rect x="37.3418%" y="485" width="3.4539%" height="15" fill="rgb(236,37,12)"/><text x="37.5918%" y="495.50">std..</text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (382 samples, 3.45%)</title><rect x="37.3418%" y="469" width="3.4539%" height="15" fill="rgb(232,164,16)"/><text x="37.5918%" y="479.50">&lt;st..</text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (382 samples, 3.45%)</title><rect x="37.3418%" y="453" width="3.4539%" height="15" fill="rgb(244,205,15)"/><text x="37.5918%" y="463.50">&lt;&amp;s..</text></g><g><title>std::io::Write::write_fmt (382 samples, 3.45%)</title><rect x="37.3418%" y="437" width="3.4539%" height="15" fill="rgb(223,117,47)"/><text x="37.5918%" y="447.50">std..</text></g><g><title>core::fmt::write (382 samples, 3.45%)</title><rect x="37.3418%" y="421" width="3.4539%" height="15" fill="rgb(244,107,35)"/><text x="37.5918%" y="431.50">cor..</text></g><g><title>core::fmt::run (120 samples, 1.08%)</title><rect x="39.7107%" y="405" width="1.0850%" height="15" fill="rgb(205,140,8)"/><text x="39.9607%" y="415.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (41 samples, 0.37%)</title><rect x="40.4250%" y="389" width="0.3707%" height="15" fill="rgb(228,84,46)"/><text x="40.6750%" y="399.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (41 samples, 0.37%)</title><rect x="40.4250%" y="373" width="0.3707%" height="15" fill="rgb(254,188,9)"/><text x="40.6750%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral (41 samples, 0.37%)</title><rect x="40.4250%" y="357" width="0.3707%" height="15" fill="rgb(206,112,54)"/><text x="40.6750%" y="367.50"></text></g><g><title>core::fmt::Formatter::padding (33 samples, 0.30%)</title><rect x="40.4973%" y="341" width="0.2984%" height="15" fill="rgb(216,84,49)"/><text x="40.7473%" y="351.50"></text></g><g><title>core::fmt::Write::write_char (33 samples, 0.30%)</title><rect x="40.4973%" y="325" width="0.2984%" height="15" fill="rgb(214,194,35)"/><text x="40.7473%" y="335.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (33 samples, 0.30%)</title><rect x="40.4973%" y="309" width="0.2984%" height="15" fill="rgb(249,28,3)"/><text x="40.7473%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (33 samples, 0.30%)</title><rect x="40.4973%" y="293" width="0.2984%" height="15" fill="rgb(222,56,52)"/><text x="40.7473%" y="303.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (33 samples, 0.30%)</title><rect x="40.4973%" y="277" width="0.2984%" height="15" fill="rgb(245,217,50)"/><text x="40.7473%" y="287.50"></text></g><g><title>std::io::Write::write_all (33 samples, 0.30%)</title><rect x="40.4973%" y="261" width="0.2984%" height="15" fill="rgb(213,201,24)"/><text x="40.7473%" y="271.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (33 samples, 0.30%)</title><rect x="40.4973%" y="245" width="0.2984%" height="15" fill="rgb(248,116,28)"/><text x="40.7473%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (33 samples, 0.30%)</title><rect x="40.4973%" y="229" width="0.2984%" height="15" fill="rgb(219,72,43)"/><text x="40.7473%" y="239.50"></text></g><g><title>__libc_write (33 samples, 0.30%)</title><rect x="40.4973%" y="213" width="0.2984%" height="15" fill="rgb(209,138,14)"/><text x="40.7473%" y="223.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="40.4973%" y="197" width="0.2984%" height="15" fill="rgb(222,18,33)"/><text x="40.7473%" y="207.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="40.4973%" y="181" width="0.2984%" height="15" fill="rgb(213,199,7)"/><text x="40.7473%" y="191.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="40.4973%" y="165" width="0.2984%" height="15" fill="rgb(250,110,10)"/><text x="40.7473%" y="175.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="40.4973%" y="149" width="0.2984%" height="15" fill="rgb(248,123,6)"/><text x="40.7473%" y="159.50"></text></g><g><title>[unknown] (33 samples, 0.30%)</title><rect x="40.4973%" y="133" width="0.2984%" height="15" fill="rgb(206,91,31)"/><text x="40.7473%" y="143.50"></text></g><g><title>[unknown] (32 samples, 0.29%)</title><rect x="40.5063%" y="117" width="0.2893%" height="15" fill="rgb(211,154,13)"/><text x="40.7563%" y="127.50"></text></g><g><title>[unknown] (31 samples, 0.28%)</title><rect x="40.5154%" y="101" width="0.2803%" height="15" fill="rgb(225,148,7)"/><text x="40.7654%" y="111.50"></text></g><g><title>[unknown] (31 samples, 0.28%)</title><rect x="40.5154%" y="85" width="0.2803%" height="15" fill="rgb(220,160,43)"/><text x="40.7654%" y="95.50"></text></g><g><title>[unknown] (26 samples, 0.24%)</title><rect x="40.5606%" y="69" width="0.2351%" height="15" fill="rgb(213,52,39)"/><text x="40.8106%" y="79.50"></text></g><g><title>[unknown] (25 samples, 0.23%)</title><rect x="40.5696%" y="53" width="0.2260%" height="15" fill="rgb(243,137,7)"/><text x="40.8196%" y="63.50"></text></g><g><title>[unknown] (14 samples, 0.13%)</title><rect x="40.6691%" y="37" width="0.1266%" height="15" fill="rgb(230,79,13)"/><text x="40.9191%" y="47.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.21%)</title><rect x="40.9132%" y="533" width="0.2080%" height="15" fill="rgb(247,105,23)"/><text x="41.1632%" y="543.50"></text></g><g><title>_int_realloc (23 samples, 0.21%)</title><rect x="40.9132%" y="517" width="0.2080%" height="15" fill="rgb(223,179,41)"/><text x="41.1632%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (55 samples, 0.50%)</title><rect x="41.1754%" y="533" width="0.4973%" height="15" fill="rgb(218,9,34)"/><text x="41.4254%" y="543.50"></text></g><g><title>_int_free (14 samples, 0.13%)</title><rect x="41.9439%" y="517" width="0.1266%" height="15" fill="rgb(222,106,8)"/><text x="42.1939%" y="527.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.12%)</title><rect x="42.1338%" y="501" width="0.1175%" height="15" fill="rgb(211,220,0)"/><text x="42.3838%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.22%)</title><rect x="42.0705%" y="517" width="0.2170%" height="15" fill="rgb(229,52,16)"/><text x="42.3205%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (38 samples, 0.34%)</title><rect x="42.2875%" y="517" width="0.3436%" height="15" fill="rgb(212,155,18)"/><text x="42.5375%" y="527.50"></text></g><g><title>__GI___libc_realloc (32 samples, 0.29%)</title><rect x="42.3418%" y="501" width="0.2893%" height="15" fill="rgb(242,21,14)"/><text x="42.5918%" y="511.50"></text></g><g><title>_int_realloc (30 samples, 0.27%)</title><rect x="42.3599%" y="485" width="0.2712%" height="15" fill="rgb(222,19,48)"/><text x="42.6099%" y="495.50"></text></g><g><title>_int_malloc (18 samples, 0.16%)</title><rect x="42.4684%" y="469" width="0.1627%" height="15" fill="rgb(232,45,27)"/><text x="42.7184%" y="479.50"></text></g><g><title>compiler::parse::tree::tree::{{closure}} (213 samples, 1.93%)</title><rect x="40.7957%" y="565" width="1.9259%" height="15" fill="rgb(249,103,42)"/><text x="41.0457%" y="575.50">c..</text></g><g><title>compiler::parse::tree::tree (213 samples, 1.93%)</title><rect x="40.7957%" y="549" width="1.9259%" height="15" fill="rgb(246,81,33)"/><text x="41.0457%" y="559.50">c..</text></g><g><title>compiler::parse::tree::resolve_expression_paths (116 samples, 1.05%)</title><rect x="41.6727%" y="533" width="1.0488%" height="15" fill="rgb(252,33,42)"/><text x="41.9227%" y="543.50"></text></g><g><title>compiler::parse::tree::resolve_expression_paths (17 samples, 0.15%)</title><rect x="42.7215%" y="549" width="0.1537%" height="15" fill="rgb(209,212,41)"/><text x="42.9715%" y="559.50"></text></g><g><title>compiler::parse::tree::resolve_expression_paths (17 samples, 0.15%)</title><rect x="42.7215%" y="533" width="0.1537%" height="15" fill="rgb(207,154,6)"/><text x="42.9715%" y="543.50"></text></g><g><title>compiler::parse::tree::tree (18 samples, 0.16%)</title><rect x="42.8752%" y="549" width="0.1627%" height="15" fill="rgb(223,64,47)"/><text x="43.1252%" y="559.50"></text></g><g><title>compiler::parse::tree::tree::{{closure}} (20 samples, 0.18%)</title><rect x="43.0380%" y="549" width="0.1808%" height="15" fill="rgb(211,161,38)"/><text x="43.2880%" y="559.50"></text></g><g><title>_int_malloc (17 samples, 0.15%)</title><rect x="43.3816%" y="469" width="0.1537%" height="15" fill="rgb(219,138,40)"/><text x="43.6316%" y="479.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.18%)</title><rect x="43.3635%" y="485" width="0.1808%" height="15" fill="rgb(241,228,46)"/><text x="43.6135%" y="495.50"></text></g><g><title>&lt;compiler::parse::expression::Expression as core::clone::Clone&gt;::clone (33 samples, 0.30%)</title><rect x="43.2550%" y="517" width="0.2984%" height="15" fill="rgb(223,209,38)"/><text x="43.5050%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.24%)</title><rect x="43.3092%" y="501" width="0.2441%" height="15" fill="rgb(236,164,45)"/><text x="43.5592%" y="511.50"></text></g><g><title>&lt;compiler::parse::tokens::Token as core::clone::Clone&gt;::clone (42 samples, 0.38%)</title><rect x="43.2188%" y="533" width="0.3797%" height="15" fill="rgb(231,15,5)"/><text x="43.4688%" y="543.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.25%)</title><rect x="43.6076%" y="533" width="0.2532%" height="15" fill="rgb(252,35,15)"/><text x="43.8576%" y="543.50"></text></g><g><title>_int_malloc (26 samples, 0.24%)</title><rect x="43.6257%" y="517" width="0.2351%" height="15" fill="rgb(248,181,18)"/><text x="43.8757%" y="527.50"></text></g><g><title>__memmove_avx_unaligned_erms (53 samples, 0.48%)</title><rect x="43.9693%" y="533" width="0.4792%" height="15" fill="rgb(233,39,42)"/><text x="44.2193%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.11%)</title><rect x="44.5660%" y="517" width="0.1085%" height="15" fill="rgb(238,110,33)"/><text x="44.8160%" y="527.50"></text></g><g><title>compiler::parse::tree::resolve_expression_paths (28 samples, 0.25%)</title><rect x="44.4575%" y="533" width="0.2532%" height="15" fill="rgb(233,195,10)"/><text x="44.7075%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.12%)</title><rect x="44.7197%" y="533" width="0.1175%" height="15" fill="rgb(254,105,3)"/><text x="44.9697%" y="543.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (116 samples, 1.05%)</title><rect x="44.8644%" y="405" width="1.0488%" height="15" fill="rgb(221,225,9)"/><text x="45.1144%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (116 samples, 1.05%)</title><rect x="44.8644%" y="389" width="1.0488%" height="15" fill="rgb(224,227,45)"/><text x="45.1144%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (116 samples, 1.05%)</title><rect x="44.8644%" y="373" width="1.0488%" height="15" fill="rgb(229,198,43)"/><text x="45.1144%" y="383.50"></text></g><g><title>std::io::Write::write_all (116 samples, 1.05%)</title><rect x="44.8644%" y="357" width="1.0488%" height="15" fill="rgb(206,209,35)"/><text x="45.1144%" y="367.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (114 samples, 1.03%)</title><rect x="44.8825%" y="341" width="1.0307%" height="15" fill="rgb(245,195,53)"/><text x="45.1325%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (114 samples, 1.03%)</title><rect x="44.8825%" y="325" width="1.0307%" height="15" fill="rgb(240,92,26)"/><text x="45.1325%" y="335.50"></text></g><g><title>__libc_write (114 samples, 1.03%)</title><rect x="44.8825%" y="309" width="1.0307%" height="15" fill="rgb(207,40,23)"/><text x="45.1325%" y="319.50"></text></g><g><title>[unknown] (114 samples, 1.03%)</title><rect x="44.8825%" y="293" width="1.0307%" height="15" fill="rgb(223,111,35)"/><text x="45.1325%" y="303.50"></text></g><g><title>[unknown] (107 samples, 0.97%)</title><rect x="44.9458%" y="277" width="0.9675%" height="15" fill="rgb(229,147,28)"/><text x="45.1958%" y="287.50"></text></g><g><title>[unknown] (105 samples, 0.95%)</title><rect x="44.9638%" y="261" width="0.9494%" height="15" fill="rgb(211,29,28)"/><text x="45.2138%" y="271.50"></text></g><g><title>[unknown] (105 samples, 0.95%)</title><rect x="44.9638%" y="245" width="0.9494%" height="15" fill="rgb(228,72,33)"/><text x="45.2138%" y="255.50"></text></g><g><title>[unknown] (105 samples, 0.95%)</title><rect x="44.9638%" y="229" width="0.9494%" height="15" fill="rgb(205,214,31)"/><text x="45.2138%" y="239.50"></text></g><g><title>[unknown] (101 samples, 0.91%)</title><rect x="45.0000%" y="213" width="0.9132%" height="15" fill="rgb(224,111,15)"/><text x="45.2500%" y="223.50"></text></g><g><title>[unknown] (100 samples, 0.90%)</title><rect x="45.0090%" y="197" width="0.9042%" height="15" fill="rgb(253,21,26)"/><text x="45.2590%" y="207.50"></text></g><g><title>[unknown] (97 samples, 0.88%)</title><rect x="45.0362%" y="181" width="0.8770%" height="15" fill="rgb(245,139,43)"/><text x="45.2862%" y="191.50"></text></g><g><title>[unknown] (72 samples, 0.65%)</title><rect x="45.2622%" y="165" width="0.6510%" height="15" fill="rgb(252,170,7)"/><text x="45.5122%" y="175.50"></text></g><g><title>[unknown] (70 samples, 0.63%)</title><rect x="45.2803%" y="149" width="0.6329%" height="15" fill="rgb(231,118,14)"/><text x="45.5303%" y="159.50"></text></g><g><title>[unknown] (57 samples, 0.52%)</title><rect x="45.3978%" y="133" width="0.5154%" height="15" fill="rgb(238,83,0)"/><text x="45.6478%" y="143.50"></text></g><g><title>[unknown] (46 samples, 0.42%)</title><rect x="45.4973%" y="117" width="0.4159%" height="15" fill="rgb(221,39,39)"/><text x="45.7473%" y="127.50"></text></g><g><title>[unknown] (25 samples, 0.23%)</title><rect x="45.6872%" y="101" width="0.2260%" height="15" fill="rgb(222,119,46)"/><text x="45.9372%" y="111.50"></text></g><g><title>[unknown] (24 samples, 0.22%)</title><rect x="45.6962%" y="85" width="0.2170%" height="15" fill="rgb(222,165,49)"/><text x="45.9462%" y="95.50"></text></g><g><title>[unknown] (23 samples, 0.21%)</title><rect x="45.7052%" y="69" width="0.2080%" height="15" fill="rgb(219,113,52)"/><text x="45.9552%" y="79.50"></text></g><g><title>[unknown] (12 samples, 0.11%)</title><rect x="45.8047%" y="53" width="0.1085%" height="15" fill="rgb(214,7,15)"/><text x="46.0547%" y="63.50"></text></g><g><title>__libc_write (30 samples, 0.27%)</title><rect x="46.0127%" y="277" width="0.2712%" height="15" fill="rgb(235,32,4)"/><text x="46.2627%" y="287.50"></text></g><g><title>[unknown] (30 samples, 0.27%)</title><rect x="46.0127%" y="261" width="0.2712%" height="15" fill="rgb(238,90,54)"/><text x="46.2627%" y="271.50"></text></g><g><title>[unknown] (30 samples, 0.27%)</title><rect x="46.0127%" y="245" width="0.2712%" height="15" fill="rgb(213,208,19)"/><text x="46.2627%" y="255.50"></text></g><g><title>[unknown] (30 samples, 0.27%)</title><rect x="46.0127%" y="229" width="0.2712%" height="15" fill="rgb(233,156,4)"/><text x="46.2627%" y="239.50"></text></g><g><title>[unknown] (30 samples, 0.27%)</title><rect x="46.0127%" y="213" width="0.2712%" height="15" fill="rgb(207,194,5)"/><text x="46.2627%" y="223.50"></text></g><g><title>[unknown] (30 samples, 0.27%)</title><rect x="46.0127%" y="197" width="0.2712%" height="15" fill="rgb(206,111,30)"/><text x="46.2627%" y="207.50"></text></g><g><title>[unknown] (30 samples, 0.27%)</title><rect x="46.0127%" y="181" width="0.2712%" height="15" fill="rgb(243,70,54)"/><text x="46.2627%" y="191.50"></text></g><g><title>[unknown] (30 samples, 0.27%)</title><rect x="46.0127%" y="165" width="0.2712%" height="15" fill="rgb(242,28,8)"/><text x="46.2627%" y="175.50"></text></g><g><title>[unknown] (29 samples, 0.26%)</title><rect x="46.0217%" y="149" width="0.2622%" height="15" fill="rgb(219,106,18)"/><text x="46.2717%" y="159.50"></text></g><g><title>[unknown] (21 samples, 0.19%)</title><rect x="46.0940%" y="133" width="0.1899%" height="15" fill="rgb(244,222,10)"/><text x="46.3440%" y="143.50"></text></g><g><title>[unknown] (20 samples, 0.18%)</title><rect x="46.1031%" y="117" width="0.1808%" height="15" fill="rgb(236,179,52)"/><text x="46.3531%" y="127.50"></text></g><g><title>[unknown] (15 samples, 0.14%)</title><rect x="46.1483%" y="101" width="0.1356%" height="15" fill="rgb(213,23,39)"/><text x="46.3983%" y="111.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (31 samples, 0.28%)</title><rect x="46.0127%" y="373" width="0.2803%" height="15" fill="rgb(238,48,10)"/><text x="46.2627%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (31 samples, 0.28%)</title><rect x="46.0127%" y="357" width="0.2803%" height="15" fill="rgb(251,196,23)"/><text x="46.2627%" y="367.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (31 samples, 0.28%)</title><rect x="46.0127%" y="341" width="0.2803%" height="15" fill="rgb(250,152,24)"/><text x="46.2627%" y="351.50"></text></g><g><title>std::io::Write::write_all (31 samples, 0.28%)</title><rect x="46.0127%" y="325" width="0.2803%" height="15" fill="rgb(209,150,17)"/><text x="46.2627%" y="335.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (31 samples, 0.28%)</title><rect x="46.0127%" y="309" width="0.2803%" height="15" fill="rgb(234,202,34)"/><text x="46.2627%" y="319.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (31 samples, 0.28%)</title><rect x="46.0127%" y="293" width="0.2803%" height="15" fill="rgb(253,148,53)"/><text x="46.2627%" y="303.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;T,X&gt; as core::fmt::Display&gt;::fmt (35 samples, 0.32%)</title><rect x="46.0127%" y="389" width="0.3165%" height="15" fill="rgb(218,129,16)"/><text x="46.2627%" y="399.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (28 samples, 0.25%)</title><rect x="46.3291%" y="389" width="0.2532%" height="15" fill="rgb(216,85,19)"/><text x="46.5791%" y="399.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (28 samples, 0.25%)</title><rect x="46.3291%" y="373" width="0.2532%" height="15" fill="rgb(235,228,7)"/><text x="46.5791%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (28 samples, 0.25%)</title><rect x="46.3291%" y="357" width="0.2532%" height="15" fill="rgb(245,175,0)"/><text x="46.5791%" y="367.50"></text></g><g><title>std::io::Write::write_all (28 samples, 0.25%)</title><rect x="46.3291%" y="341" width="0.2532%" height="15" fill="rgb(208,168,36)"/><text x="46.5791%" y="351.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (28 samples, 0.25%)</title><rect x="46.3291%" y="325" width="0.2532%" height="15" fill="rgb(246,171,24)"/><text x="46.5791%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (28 samples, 0.25%)</title><rect x="46.3291%" y="309" width="0.2532%" height="15" fill="rgb(215,142,24)"/><text x="46.5791%" y="319.50"></text></g><g><title>__libc_write (28 samples, 0.25%)</title><rect x="46.3291%" y="293" width="0.2532%" height="15" fill="rgb(250,187,7)"/><text x="46.5791%" y="303.50"></text></g><g><title>[unknown] (28 samples, 0.25%)</title><rect x="46.3291%" y="277" width="0.2532%" height="15" fill="rgb(228,66,33)"/><text x="46.5791%" y="287.50"></text></g><g><title>[unknown] (26 samples, 0.24%)</title><rect x="46.3472%" y="261" width="0.2351%" height="15" fill="rgb(234,215,21)"/><text x="46.5972%" y="271.50"></text></g><g><title>[unknown] (26 samples, 0.24%)</title><rect x="46.3472%" y="245" width="0.2351%" height="15" fill="rgb(222,191,20)"/><text x="46.5972%" y="255.50"></text></g><g><title>[unknown] (26 samples, 0.24%)</title><rect x="46.3472%" y="229" width="0.2351%" height="15" fill="rgb(245,79,54)"/><text x="46.5972%" y="239.50"></text></g><g><title>[unknown] (26 samples, 0.24%)</title><rect x="46.3472%" y="213" width="0.2351%" height="15" fill="rgb(240,10,37)"/><text x="46.5972%" y="223.50"></text></g><g><title>[unknown] (25 samples, 0.23%)</title><rect x="46.3562%" y="197" width="0.2260%" height="15" fill="rgb(214,192,32)"/><text x="46.6062%" y="207.50"></text></g><g><title>[unknown] (25 samples, 0.23%)</title><rect x="46.3562%" y="181" width="0.2260%" height="15" fill="rgb(209,36,54)"/><text x="46.6062%" y="191.50"></text></g><g><title>[unknown] (25 samples, 0.23%)</title><rect x="46.3562%" y="165" width="0.2260%" height="15" fill="rgb(220,10,11)"/><text x="46.6062%" y="175.50"></text></g><g><title>[unknown] (20 samples, 0.18%)</title><rect x="46.4014%" y="149" width="0.1808%" height="15" fill="rgb(221,106,17)"/><text x="46.6514%" y="159.50"></text></g><g><title>[unknown] (18 samples, 0.16%)</title><rect x="46.4195%" y="133" width="0.1627%" height="15" fill="rgb(251,142,44)"/><text x="46.6695%" y="143.50"></text></g><g><title>[unknown] (12 samples, 0.11%)</title><rect x="46.4738%" y="117" width="0.1085%" height="15" fill="rgb(238,13,15)"/><text x="46.7238%" y="127.50"></text></g><g><title>compiler::parse::tree::tree (671 samples, 6.07%)</title><rect x="40.7957%" y="581" width="6.0669%" height="15" fill="rgb(208,107,27)"/><text x="41.0457%" y="591.50">compiler..</text></g><g><title>compiler::parse::tree::tree (458 samples, 4.14%)</title><rect x="42.7215%" y="565" width="4.1410%" height="15" fill="rgb(205,136,37)"/><text x="42.9715%" y="575.50">compi..</text></g><g><title>compiler::parse::tree::tree (403 samples, 3.64%)</title><rect x="43.2188%" y="549" width="3.6438%" height="15" fill="rgb(250,205,27)"/><text x="43.4688%" y="559.50">comp..</text></g><g><title>std::io::stdio::_eprint (224 samples, 2.03%)</title><rect x="44.8373%" y="533" width="2.0253%" height="15" fill="rgb(210,80,43)"/><text x="45.0873%" y="543.50">s..</text></g><g><title>std::io::stdio::print_to (222 samples, 2.01%)</title><rect x="44.8553%" y="517" width="2.0072%" height="15" fill="rgb(247,160,36)"/><text x="45.1053%" y="527.50">s..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (222 samples, 2.01%)</title><rect x="44.8553%" y="501" width="2.0072%" height="15" fill="rgb(234,13,49)"/><text x="45.1053%" y="511.50">c..</text></g><g><title>std::io::stdio::print_to::{{closure}} (222 samples, 2.01%)</title><rect x="44.8553%" y="485" width="2.0072%" height="15" fill="rgb(234,122,0)"/><text x="45.1053%" y="495.50">s..</text></g><g><title>&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (222 samples, 2.01%)</title><rect x="44.8553%" y="469" width="2.0072%" height="15" fill="rgb(207,146,38)"/><text x="45.1053%" y="479.50">&lt;..</text></g><g><title>&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_fmt (222 samples, 2.01%)</title><rect x="44.8553%" y="453" width="2.0072%" height="15" fill="rgb(207,177,25)"/><text x="45.1053%" y="463.50">&lt;..</text></g><g><title>std::io::Write::write_fmt (222 samples, 2.01%)</title><rect x="44.8553%" y="437" width="2.0072%" height="15" fill="rgb(211,178,42)"/><text x="45.1053%" y="447.50">s..</text></g><g><title>core::fmt::write (222 samples, 2.01%)</title><rect x="44.8553%" y="421" width="2.0072%" height="15" fill="rgb(230,69,54)"/><text x="45.1053%" y="431.50">c..</text></g><g><title>core::fmt::run (94 samples, 0.85%)</title><rect x="46.0127%" y="405" width="0.8499%" height="15" fill="rgb(214,135,41)"/><text x="46.2627%" y="415.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (31 samples, 0.28%)</title><rect x="46.5823%" y="389" width="0.2803%" height="15" fill="rgb(237,67,25)"/><text x="46.8323%" y="399.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (31 samples, 0.28%)</title><rect x="46.5823%" y="373" width="0.2803%" height="15" fill="rgb(222,189,50)"/><text x="46.8323%" y="383.50"></text></g><g><title>core::fmt::Formatter::pad_integral (31 samples, 0.28%)</title><rect x="46.5823%" y="357" width="0.2803%" height="15" fill="rgb(245,148,34)"/><text x="46.8323%" y="367.50"></text></g><g><title>core::fmt::Formatter::padding (23 samples, 0.21%)</title><rect x="46.6546%" y="341" width="0.2080%" height="15" fill="rgb(222,29,6)"/><text x="46.9046%" y="351.50"></text></g><g><title>core::fmt::Write::write_char (22 samples, 0.20%)</title><rect x="46.6637%" y="325" width="0.1989%" height="15" fill="rgb(221,189,43)"/><text x="46.9137%" y="335.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (22 samples, 0.20%)</title><rect x="46.6637%" y="309" width="0.1989%" height="15" fill="rgb(207,36,27)"/><text x="46.9137%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StderrLock as std::io::Write&gt;::write_all (22 samples, 0.20%)</title><rect x="46.6637%" y="293" width="0.1989%" height="15" fill="rgb(217,90,24)"/><text x="46.9137%" y="303.50"></text></g><g><title>&lt;std::io::stdio::StderrRaw as std::io::Write&gt;::write_all (22 samples, 0.20%)</title><rect x="46.6637%" y="277" width="0.1989%" height="15" fill="rgb(224,66,35)"/><text x="46.9137%" y="287.50"></text></g><g><title>std::io::Write::write_all (22 samples, 0.20%)</title><rect x="46.6637%" y="261" width="0.1989%" height="15" fill="rgb(221,13,50)"/><text x="46.9137%" y="271.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stderr as std::io::Write&gt;::write (22 samples, 0.20%)</title><rect x="46.6637%" y="245" width="0.1989%" height="15" fill="rgb(236,68,49)"/><text x="46.9137%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (22 samples, 0.20%)</title><rect x="46.6637%" y="229" width="0.1989%" height="15" fill="rgb(229,146,28)"/><text x="46.9137%" y="239.50"></text></g><g><title>__libc_write (22 samples, 0.20%)</title><rect x="46.6637%" y="213" width="0.1989%" height="15" fill="rgb(225,31,38)"/><text x="46.9137%" y="223.50"></text></g><g><title>[unknown] (22 samples, 0.20%)</title><rect x="46.6637%" y="197" width="0.1989%" height="15" fill="rgb(250,208,3)"/><text x="46.9137%" y="207.50"></text></g><g><title>[unknown] (22 samples, 0.20%)</title><rect x="46.6637%" y="181" width="0.1989%" height="15" fill="rgb(246,54,23)"/><text x="46.9137%" y="191.50"></text></g><g><title>[unknown] (22 samples, 0.20%)</title><rect x="46.6637%" y="165" width="0.1989%" height="15" fill="rgb(243,76,11)"/><text x="46.9137%" y="175.50"></text></g><g><title>[unknown] (22 samples, 0.20%)</title><rect x="46.6637%" y="149" width="0.1989%" height="15" fill="rgb(245,21,50)"/><text x="46.9137%" y="159.50"></text></g><g><title>[unknown] (22 samples, 0.20%)</title><rect x="46.6637%" y="133" width="0.1989%" height="15" fill="rgb(228,9,43)"/><text x="46.9137%" y="143.50"></text></g><g><title>[unknown] (21 samples, 0.19%)</title><rect x="46.6727%" y="117" width="0.1899%" height="15" fill="rgb(208,100,47)"/><text x="46.9227%" y="127.50"></text></g><g><title>[unknown] (20 samples, 0.18%)</title><rect x="46.6817%" y="101" width="0.1808%" height="15" fill="rgb(232,26,8)"/><text x="46.9317%" y="111.50"></text></g><g><title>[unknown] (20 samples, 0.18%)</title><rect x="46.6817%" y="85" width="0.1808%" height="15" fill="rgb(216,166,38)"/><text x="46.9317%" y="95.50"></text></g><g><title>[unknown] (16 samples, 0.14%)</title><rect x="46.7179%" y="69" width="0.1447%" height="15" fill="rgb(251,202,51)"/><text x="46.9679%" y="79.50"></text></g><g><title>[unknown] (13 samples, 0.12%)</title><rect x="46.7450%" y="53" width="0.1175%" height="15" fill="rgb(254,216,34)"/><text x="46.9950%" y="63.50"></text></g><g><title>alloc::fmt::format (32 samples, 0.29%)</title><rect x="46.8626%" y="421" width="0.2893%" height="15" fill="rgb(251,32,27)"/><text x="47.1126%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (32 samples, 0.29%)</title><rect x="46.8626%" y="405" width="0.2893%" height="15" fill="rgb(208,127,28)"/><text x="47.1126%" y="415.50"></text></g><g><title>core::fmt::write (32 samples, 0.29%)</title><rect x="46.8626%" y="389" width="0.2893%" height="15" fill="rgb(224,137,22)"/><text x="47.1126%" y="399.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (32 samples, 0.29%)</title><rect x="46.8626%" y="373" width="0.2893%" height="15" fill="rgb(254,70,32)"/><text x="47.1126%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (32 samples, 0.29%)</title><rect x="46.8626%" y="357" width="0.2893%" height="15" fill="rgb(229,75,37)"/><text x="47.1126%" y="367.50"></text></g><g><title>alloc::string::String::push_str (32 samples, 0.29%)</title><rect x="46.8626%" y="341" width="0.2893%" height="15" fill="rgb(252,64,23)"/><text x="47.1126%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (32 samples, 0.29%)</title><rect x="46.8626%" y="325" width="0.2893%" height="15" fill="rgb(232,162,48)"/><text x="47.1126%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (32 samples, 0.29%)</title><rect x="46.8626%" y="309" width="0.2893%" height="15" fill="rgb(246,160,12)"/><text x="47.1126%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (32 samples, 0.29%)</title><rect x="46.8626%" y="293" width="0.2893%" height="15" fill="rgb(247,166,0)"/><text x="47.1126%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (32 samples, 0.29%)</title><rect x="46.8626%" y="277" width="0.2893%" height="15" fill="rgb(249,219,21)"/><text x="47.1126%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (32 samples, 0.29%)</title><rect x="46.8626%" y="261" width="0.2893%" height="15" fill="rgb(205,209,3)"/><text x="47.1126%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (32 samples, 0.29%)</title><rect x="46.8626%" y="245" width="0.2893%" height="15" fill="rgb(243,44,1)"/><text x="47.1126%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 0.29%)</title><rect x="46.8626%" y="229" width="0.2893%" height="15" fill="rgb(206,159,16)"/><text x="47.1126%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (32 samples, 0.29%)</title><rect x="46.8626%" y="213" width="0.2893%" height="15" fill="rgb(244,77,30)"/><text x="47.1126%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (32 samples, 0.29%)</title><rect x="46.8626%" y="197" width="0.2893%" height="15" fill="rgb(218,69,12)"/><text x="47.1126%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (32 samples, 0.29%)</title><rect x="46.8626%" y="181" width="0.2893%" height="15" fill="rgb(212,87,7)"/><text x="47.1126%" y="191.50"></text></g><g><title>alloc::alloc::realloc (32 samples, 0.29%)</title><rect x="46.8626%" y="165" width="0.2893%" height="15" fill="rgb(245,114,25)"/><text x="47.1126%" y="175.50"></text></g><g><title>__rdl_realloc (32 samples, 0.29%)</title><rect x="46.8626%" y="149" width="0.2893%" height="15" fill="rgb(210,61,42)"/><text x="47.1126%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (32 samples, 0.29%)</title><rect x="46.8626%" y="133" width="0.2893%" height="15" fill="rgb(211,52,33)"/><text x="47.1126%" y="143.50"></text></g><g><title>__GI___libc_realloc (32 samples, 0.29%)</title><rect x="46.8626%" y="117" width="0.2893%" height="15" fill="rgb(234,58,33)"/><text x="47.1126%" y="127.50"></text></g><g><title>_int_realloc (32 samples, 0.29%)</title><rect x="46.8626%" y="101" width="0.2893%" height="15" fill="rgb(220,115,36)"/><text x="47.1126%" y="111.50"></text></g><g><title>_int_malloc (25 samples, 0.23%)</title><rect x="46.9259%" y="85" width="0.2260%" height="15" fill="rgb(243,153,54)"/><text x="47.1759%" y="95.50"></text></g><g><title>compiler::generate::generator::gen_body (23 samples, 0.21%)</title><rect x="47.1519%" y="421" width="0.2080%" height="15" fill="rgb(251,47,18)"/><text x="47.4019%" y="431.50"></text></g><g><title>_int_free (14 samples, 0.13%)</title><rect x="47.7667%" y="389" width="0.1266%" height="15" fill="rgb(242,102,42)"/><text x="48.0167%" y="399.50"></text></g><g><title>compiler::generate::templates::expression (77 samples, 0.70%)</title><rect x="47.3599%" y="421" width="0.6962%" height="15" fill="rgb(234,31,38)"/><text x="47.6099%" y="431.50"></text></g><g><title>compiler::generate::templates::guard (72 samples, 0.65%)</title><rect x="47.4051%" y="405" width="0.6510%" height="15" fill="rgb(221,117,51)"/><text x="47.6551%" y="415.50"></text></g><g><title>alloc::fmt::format (18 samples, 0.16%)</title><rect x="47.8933%" y="389" width="0.1627%" height="15" fill="rgb(212,20,18)"/><text x="48.1433%" y="399.50"></text></g><g><title>alloc::fmt::format (12 samples, 0.11%)</title><rect x="48.0651%" y="405" width="0.1085%" height="15" fill="rgb(245,133,36)"/><text x="48.3151%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (12 samples, 0.11%)</title><rect x="48.0651%" y="389" width="0.1085%" height="15" fill="rgb(212,6,19)"/><text x="48.3151%" y="399.50"></text></g><g><title>core::fmt::write (12 samples, 0.11%)</title><rect x="48.0651%" y="373" width="0.1085%" height="15" fill="rgb(218,1,36)"/><text x="48.3151%" y="383.50"></text></g><g><title>compiler::generate::generator::gen_body (171 samples, 1.55%)</title><rect x="46.8626%" y="517" width="1.5461%" height="15" fill="rgb(246,84,54)"/><text x="47.1126%" y="527.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (171 samples, 1.55%)</title><rect x="46.8626%" y="501" width="1.5461%" height="15" fill="rgb(242,110,6)"/><text x="47.1126%" y="511.50"></text></g><g><title>compiler::generate::generator::gen_body (171 samples, 1.55%)</title><rect x="46.8626%" y="485" width="1.5461%" height="15" fill="rgb(214,47,5)"/><text x="47.1126%" y="495.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (171 samples, 1.55%)</title><rect x="46.8626%" y="469" width="1.5461%" height="15" fill="rgb(218,159,25)"/><text x="47.1126%" y="479.50"></text></g><g><title>compiler::generate::generator::gen_body (171 samples, 1.55%)</title><rect x="46.8626%" y="453" width="1.5461%" height="15" fill="rgb(215,211,28)"/><text x="47.1126%" y="463.50"></text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (171 samples, 1.55%)</title><rect x="46.8626%" y="437" width="1.5461%" height="15" fill="rgb(238,59,32)"/><text x="47.1126%" y="447.50"></text></g><g><title>compiler::generate::templates::indent (39 samples, 0.35%)</title><rect x="48.0561%" y="421" width="0.3526%" height="15" fill="rgb(226,82,3)"/><text x="48.3061%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (26 samples, 0.24%)</title><rect x="48.1736%" y="405" width="0.2351%" height="15" fill="rgb(240,164,32)"/><text x="48.4236%" y="415.50"></text></g><g><title>__GI___libc_realloc (26 samples, 0.24%)</title><rect x="48.1736%" y="389" width="0.2351%" height="15" fill="rgb(232,46,7)"/><text x="48.4236%" y="399.50"></text></g><g><title>_int_realloc (26 samples, 0.24%)</title><rect x="48.1736%" y="373" width="0.2351%" height="15" fill="rgb(229,129,53)"/><text x="48.4236%" y="383.50"></text></g><g><title>_int_malloc (17 samples, 0.15%)</title><rect x="48.2550%" y="357" width="0.1537%" height="15" fill="rgb(234,188,29)"/><text x="48.5050%" y="367.50"></text></g><g><title>compiler::parse::tokens::tokens (125 samples, 1.13%)</title><rect x="48.4087%" y="517" width="1.1302%" height="15" fill="rgb(246,141,4)"/><text x="48.6587%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (125 samples, 1.13%)</title><rect x="48.4087%" y="501" width="1.1302%" height="15" fill="rgb(229,23,39)"/><text x="48.6587%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (125 samples, 1.13%)</title><rect x="48.4087%" y="485" width="1.1302%" height="15" fill="rgb(206,12,3)"/><text x="48.6587%" y="495.50"></text></g><g><title>main (298 samples, 2.69%)</title><rect x="46.8626%" y="581" width="2.6944%" height="15" fill="rgb(252,226,20)"/><text x="47.1126%" y="591.50">ma..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (298 samples, 2.69%)</title><rect x="46.8626%" y="565" width="2.6944%" height="15" fill="rgb(216,123,35)"/><text x="47.1126%" y="575.50">st..</text></g><g><title>bench::main (298 samples, 2.69%)</title><rect x="46.8626%" y="549" width="2.6944%" height="15" fill="rgb(212,68,40)"/><text x="47.1126%" y="559.50">be..</text></g><g><title>compiler::compile (298 samples, 2.69%)</title><rect x="46.8626%" y="533" width="2.6944%" height="15" fill="rgb(254,125,32)"/><text x="47.1126%" y="543.50">co..</text></g><g><title>[unknown] (5,561 samples, 50.28%)</title><rect x="0.0181%" y="597" width="50.2803%" height="15" fill="rgb(253,97,22)"/><text x="0.2681%" y="607.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (81 samples, 0.73%)</title><rect x="49.5660%" y="581" width="0.7324%" height="15" fill="rgb(241,101,14)"/><text x="49.8160%" y="591.50"></text></g><g><title>bench::main (81 samples, 0.73%)</title><rect x="49.5660%" y="565" width="0.7324%" height="15" fill="rgb(238,103,29)"/><text x="49.8160%" y="575.50"></text></g><g><title>compiler::compile (81 samples, 0.73%)</title><rect x="49.5660%" y="549" width="0.7324%" height="15" fill="rgb(233,195,47)"/><text x="49.8160%" y="559.50"></text></g><g><title>compiler::parse::tokens::tokens (81 samples, 0.73%)</title><rect x="49.5660%" y="533" width="0.7324%" height="15" fill="rgb(246,218,30)"/><text x="49.8160%" y="543.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (81 samples, 0.73%)</title><rect x="49.5660%" y="517" width="0.7324%" height="15" fill="rgb(219,145,47)"/><text x="49.8160%" y="527.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (81 samples, 0.73%)</title><rect x="49.5660%" y="501" width="0.7324%" height="15" fill="rgb(243,12,26)"/><text x="49.8160%" y="511.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (81 samples, 0.73%)</title><rect x="49.5660%" y="485" width="0.7324%" height="15" fill="rgb(214,87,16)"/><text x="49.8160%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (15 samples, 0.14%)</title><rect x="50.6962%" y="357" width="0.1356%" height="15" fill="rgb(208,99,42)"/><text x="50.9462%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (15 samples, 0.14%)</title><rect x="50.6962%" y="341" width="0.1356%" height="15" fill="rgb(253,99,2)"/><text x="50.9462%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (15 samples, 0.14%)</title><rect x="50.6962%" y="325" width="0.1356%" height="15" fill="rgb(220,168,23)"/><text x="50.9462%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.14%)</title><rect x="50.6962%" y="309" width="0.1356%" height="15" fill="rgb(242,38,24)"/><text x="50.9462%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.14%)</title><rect x="50.6962%" y="293" width="0.1356%" height="15" fill="rgb(225,182,9)"/><text x="50.9462%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (15 samples, 0.14%)</title><rect x="50.6962%" y="277" width="0.1356%" height="15" fill="rgb(243,178,37)"/><text x="50.9462%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.14%)</title><rect x="50.6962%" y="261" width="0.1356%" height="15" fill="rgb(232,139,19)"/><text x="50.9462%" y="271.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.14%)</title><rect x="50.6962%" y="245" width="0.1356%" height="15" fill="rgb(225,201,24)"/><text x="50.9462%" y="255.50"></text></g><g><title>__rdl_realloc (15 samples, 0.14%)</title><rect x="50.6962%" y="229" width="0.1356%" height="15" fill="rgb(221,47,46)"/><text x="50.9462%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (15 samples, 0.14%)</title><rect x="50.6962%" y="213" width="0.1356%" height="15" fill="rgb(249,23,13)"/><text x="50.9462%" y="223.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.14%)</title><rect x="50.6962%" y="197" width="0.1356%" height="15" fill="rgb(219,9,5)"/><text x="50.9462%" y="207.50"></text></g><g><title>_int_realloc (15 samples, 0.14%)</title><rect x="50.6962%" y="181" width="0.1356%" height="15" fill="rgb(254,171,16)"/><text x="50.9462%" y="191.50"></text></g><g><title>alloc::fmt::format (24 samples, 0.22%)</title><rect x="50.6962%" y="501" width="0.2170%" height="15" fill="rgb(230,171,20)"/><text x="50.9462%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (24 samples, 0.22%)</title><rect x="50.6962%" y="485" width="0.2170%" height="15" fill="rgb(210,71,41)"/><text x="50.9462%" y="495.50"></text></g><g><title>core::fmt::write (24 samples, 0.22%)</title><rect x="50.6962%" y="469" width="0.2170%" height="15" fill="rgb(206,173,20)"/><text x="50.9462%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (24 samples, 0.22%)</title><rect x="50.6962%" y="453" width="0.2170%" height="15" fill="rgb(233,88,34)"/><text x="50.9462%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (24 samples, 0.22%)</title><rect x="50.6962%" y="437" width="0.2170%" height="15" fill="rgb(223,209,46)"/><text x="50.9462%" y="447.50"></text></g><g><title>alloc::string::String::push_str (24 samples, 0.22%)</title><rect x="50.6962%" y="421" width="0.2170%" height="15" fill="rgb(250,43,18)"/><text x="50.9462%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (24 samples, 0.22%)</title><rect x="50.6962%" y="405" width="0.2170%" height="15" fill="rgb(208,13,10)"/><text x="50.9462%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (24 samples, 0.22%)</title><rect x="50.6962%" y="389" width="0.2170%" height="15" fill="rgb(212,200,36)"/><text x="50.9462%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (24 samples, 0.22%)</title><rect x="50.6962%" y="373" width="0.2170%" height="15" fill="rgb(225,90,30)"/><text x="50.9462%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (15 samples, 0.14%)</title><rect x="50.9132%" y="501" width="0.1356%" height="15" fill="rgb(236,182,39)"/><text x="51.1632%" y="511.50"></text></g><g><title>_int_free (12 samples, 0.11%)</title><rect x="51.1664%" y="485" width="0.1085%" height="15" fill="rgb(212,144,35)"/><text x="51.4164%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (20 samples, 0.18%)</title><rect x="51.2749%" y="485" width="0.1808%" height="15" fill="rgb(228,63,44)"/><text x="51.5249%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (18 samples, 0.16%)</title><rect x="51.4557%" y="485" width="0.1627%" height="15" fill="rgb(228,109,6)"/><text x="51.7057%" y="495.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.14%)</title><rect x="51.4828%" y="469" width="0.1356%" height="15" fill="rgb(238,117,24)"/><text x="51.7328%" y="479.50"></text></g><g><title>_int_realloc (15 samples, 0.14%)</title><rect x="51.4828%" y="453" width="0.1356%" height="15" fill="rgb(242,26,26)"/><text x="51.7328%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.12%)</title><rect x="51.7993%" y="469" width="0.1175%" height="15" fill="rgb(221,92,48)"/><text x="52.0493%" y="479.50"></text></g><g><title>_int_free (15 samples, 0.14%)</title><rect x="51.9168%" y="469" width="0.1356%" height="15" fill="rgb(209,209,32)"/><text x="52.1668%" y="479.50"></text></g><g><title>_int_realloc (55 samples, 0.50%)</title><rect x="52.3779%" y="149" width="0.4973%" height="15" fill="rgb(221,70,22)"/><text x="52.6279%" y="159.50"></text></g><g><title>_int_malloc (37 samples, 0.33%)</title><rect x="52.5407%" y="133" width="0.3345%" height="15" fill="rgb(248,145,5)"/><text x="52.7907%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (69 samples, 0.62%)</title><rect x="52.2694%" y="261" width="0.6239%" height="15" fill="rgb(226,116,26)"/><text x="52.5194%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (67 samples, 0.61%)</title><rect x="52.2875%" y="245" width="0.6058%" height="15" fill="rgb(244,5,17)"/><text x="52.5375%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (67 samples, 0.61%)</title><rect x="52.2875%" y="229" width="0.6058%" height="15" fill="rgb(252,159,33)"/><text x="52.5375%" y="239.50"></text></g><g><title>alloc::alloc::realloc (67 samples, 0.61%)</title><rect x="52.2875%" y="213" width="0.6058%" height="15" fill="rgb(206,71,0)"/><text x="52.5375%" y="223.50"></text></g><g><title>__rdl_realloc (67 samples, 0.61%)</title><rect x="52.2875%" y="197" width="0.6058%" height="15" fill="rgb(233,118,54)"/><text x="52.5375%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (67 samples, 0.61%)</title><rect x="52.2875%" y="181" width="0.6058%" height="15" fill="rgb(234,83,48)"/><text x="52.5375%" y="191.50"></text></g><g><title>__GI___libc_realloc (67 samples, 0.61%)</title><rect x="52.2875%" y="165" width="0.6058%" height="15" fill="rgb(228,3,54)"/><text x="52.5375%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (73 samples, 0.66%)</title><rect x="52.2423%" y="325" width="0.6600%" height="15" fill="rgb(226,155,13)"/><text x="52.4923%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (71 samples, 0.64%)</title><rect x="52.2604%" y="309" width="0.6420%" height="15" fill="rgb(241,28,37)"/><text x="52.5104%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (71 samples, 0.64%)</title><rect x="52.2604%" y="293" width="0.6420%" height="15" fill="rgb(233,93,10)"/><text x="52.5104%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (71 samples, 0.64%)</title><rect x="52.2604%" y="277" width="0.6420%" height="15" fill="rgb(225,113,19)"/><text x="52.5104%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (103 samples, 0.93%)</title><rect x="52.2061%" y="421" width="0.9313%" height="15" fill="rgb(241,2,18)"/><text x="52.4561%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (100 samples, 0.90%)</title><rect x="52.2333%" y="405" width="0.9042%" height="15" fill="rgb(228,207,21)"/><text x="52.4833%" y="415.50"></text></g><g><title>alloc::string::String::push_str (100 samples, 0.90%)</title><rect x="52.2333%" y="389" width="0.9042%" height="15" fill="rgb(213,211,35)"/><text x="52.4833%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (100 samples, 0.90%)</title><rect x="52.2333%" y="373" width="0.9042%" height="15" fill="rgb(209,83,10)"/><text x="52.4833%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (100 samples, 0.90%)</title><rect x="52.2333%" y="357" width="0.9042%" height="15" fill="rgb(209,164,1)"/><text x="52.4833%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (100 samples, 0.90%)</title><rect x="52.2333%" y="341" width="0.9042%" height="15" fill="rgb(213,184,43)"/><text x="52.4833%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.24%)</title><rect x="52.9024%" y="325" width="0.2351%" height="15" fill="rgb(231,61,34)"/><text x="53.1524%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.16%)</title><rect x="52.9747%" y="309" width="0.1627%" height="15" fill="rgb(235,75,3)"/><text x="53.2247%" y="319.50"></text></g><g><title>alloc::fmt::format (125 samples, 1.13%)</title><rect x="52.0524%" y="469" width="1.1302%" height="15" fill="rgb(220,106,47)"/><text x="52.3024%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (118 samples, 1.07%)</title><rect x="52.1157%" y="453" width="1.0669%" height="15" fill="rgb(210,196,33)"/><text x="52.3657%" y="463.50"></text></g><g><title>core::fmt::write (118 samples, 1.07%)</title><rect x="52.1157%" y="437" width="1.0669%" height="15" fill="rgb(229,154,42)"/><text x="52.3657%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.16%)</title><rect x="53.3816%" y="453" width="0.1627%" height="15" fill="rgb(228,114,26)"/><text x="53.6316%" y="463.50"></text></g><g><title>_int_free (28 samples, 0.25%)</title><rect x="53.5443%" y="453" width="0.2532%" height="15" fill="rgb(208,144,1)"/><text x="53.7943%" y="463.50"></text></g><g><title>_int_malloc (14 samples, 0.13%)</title><rect x="53.8427%" y="421" width="0.1266%" height="15" fill="rgb(239,112,37)"/><text x="54.0927%" y="431.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.15%)</title><rect x="53.8336%" y="437" width="0.1537%" height="15" fill="rgb(210,96,50)"/><text x="54.0836%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (28 samples, 0.25%)</title><rect x="53.7975%" y="453" width="0.2532%" height="15" fill="rgb(222,178,2)"/><text x="54.0475%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (14 samples, 0.13%)</title><rect x="54.0506%" y="453" width="0.1266%" height="15" fill="rgb(226,74,18)"/><text x="54.3006%" y="463.50"></text></g><g><title>__GI___libc_realloc (13 samples, 0.12%)</title><rect x="54.0597%" y="437" width="0.1175%" height="15" fill="rgb(225,67,54)"/><text x="54.3097%" y="447.50"></text></g><g><title>_int_free (34 samples, 0.31%)</title><rect x="54.7107%" y="437" width="0.3074%" height="15" fill="rgb(251,92,32)"/><text x="54.9607%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.12%)</title><rect x="55.6058%" y="101" width="0.1175%" height="15" fill="rgb(228,149,22)"/><text x="55.8558%" y="111.50"></text></g><g><title>_int_realloc (88 samples, 0.80%)</title><rect x="55.4611%" y="117" width="0.7957%" height="15" fill="rgb(243,54,13)"/><text x="55.7111%" y="127.50"></text></g><g><title>_int_malloc (48 samples, 0.43%)</title><rect x="55.8228%" y="101" width="0.4340%" height="15" fill="rgb(243,180,28)"/><text x="56.0728%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (102 samples, 0.92%)</title><rect x="55.3617%" y="213" width="0.9222%" height="15" fill="rgb(208,167,24)"/><text x="55.6117%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (102 samples, 0.92%)</title><rect x="55.3617%" y="197" width="0.9222%" height="15" fill="rgb(245,73,45)"/><text x="55.6117%" y="207.50"></text></g><g><title>alloc::alloc::realloc (102 samples, 0.92%)</title><rect x="55.3617%" y="181" width="0.9222%" height="15" fill="rgb(237,203,48)"/><text x="55.6117%" y="191.50"></text></g><g><title>__rdl_realloc (102 samples, 0.92%)</title><rect x="55.3617%" y="165" width="0.9222%" height="15" fill="rgb(211,197,16)"/><text x="55.6117%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (102 samples, 0.92%)</title><rect x="55.3617%" y="149" width="0.9222%" height="15" fill="rgb(243,99,51)"/><text x="55.6117%" y="159.50"></text></g><g><title>__GI___libc_realloc (100 samples, 0.90%)</title><rect x="55.3797%" y="133" width="0.9042%" height="15" fill="rgb(215,123,29)"/><text x="55.6297%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (105 samples, 0.95%)</title><rect x="55.3436%" y="229" width="0.9494%" height="15" fill="rgb(239,186,37)"/><text x="55.5936%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (117 samples, 1.06%)</title><rect x="55.2622%" y="293" width="1.0579%" height="15" fill="rgb(252,136,39)"/><text x="55.5122%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (115 samples, 1.04%)</title><rect x="55.2803%" y="277" width="1.0398%" height="15" fill="rgb(223,213,32)"/><text x="55.5303%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (115 samples, 1.04%)</title><rect x="55.2803%" y="261" width="1.0398%" height="15" fill="rgb(233,115,5)"/><text x="55.5303%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (114 samples, 1.03%)</title><rect x="55.2893%" y="245" width="1.0307%" height="15" fill="rgb(207,226,44)"/><text x="55.5393%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (155 samples, 1.40%)</title><rect x="55.1627%" y="389" width="1.4014%" height="15" fill="rgb(208,126,0)"/><text x="55.4127%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (147 samples, 1.33%)</title><rect x="55.2351%" y="373" width="1.3291%" height="15" fill="rgb(244,66,21)"/><text x="55.4851%" y="383.50"></text></g><g><title>alloc::string::String::push_str (147 samples, 1.33%)</title><rect x="55.2351%" y="357" width="1.3291%" height="15" fill="rgb(222,97,12)"/><text x="55.4851%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (147 samples, 1.33%)</title><rect x="55.2351%" y="341" width="1.3291%" height="15" fill="rgb(219,213,19)"/><text x="55.4851%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (147 samples, 1.33%)</title><rect x="55.2351%" y="325" width="1.3291%" height="15" fill="rgb(252,169,30)"/><text x="55.4851%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (147 samples, 1.33%)</title><rect x="55.2351%" y="309" width="1.3291%" height="15" fill="rgb(206,32,51)"/><text x="55.4851%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.24%)</title><rect x="56.3201%" y="293" width="0.2441%" height="15" fill="rgb(250,172,42)"/><text x="56.5701%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.19%)</title><rect x="56.3743%" y="277" width="0.1899%" height="15" fill="rgb(209,34,43)"/><text x="56.6243%" y="287.50"></text></g><g><title>alloc::fmt::format (180 samples, 1.63%)</title><rect x="55.0181%" y="437" width="1.6275%" height="15" fill="rgb(223,11,35)"/><text x="55.2681%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (174 samples, 1.57%)</title><rect x="55.0723%" y="421" width="1.5732%" height="15" fill="rgb(251,219,26)"/><text x="55.3223%" y="431.50"></text></g><g><title>core::fmt::write (173 samples, 1.56%)</title><rect x="55.0814%" y="405" width="1.5642%" height="15" fill="rgb(231,119,3)"/><text x="55.3314%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.16%)</title><rect x="56.9259%" y="421" width="0.1627%" height="15" fill="rgb(216,97,11)"/><text x="57.1759%" y="431.50"></text></g><g><title>_int_free (22 samples, 0.20%)</title><rect x="57.0886%" y="421" width="0.1989%" height="15" fill="rgb(223,59,9)"/><text x="57.3386%" y="431.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.13%)</title><rect x="57.3599%" y="405" width="0.1266%" height="15" fill="rgb(233,93,31)"/><text x="57.6099%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::join (33 samples, 0.30%)</title><rect x="57.2875%" y="421" width="0.2984%" height="15" fill="rgb(239,81,33)"/><text x="57.5375%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (15 samples, 0.14%)</title><rect x="57.5859%" y="421" width="0.1356%" height="15" fill="rgb(213,120,34)"/><text x="57.8359%" y="431.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.11%)</title><rect x="57.6130%" y="405" width="0.1085%" height="15" fill="rgb(243,49,53)"/><text x="57.8630%" y="415.50"></text></g><g><title>_int_free (19 samples, 0.17%)</title><rect x="58.0922%" y="405" width="0.1718%" height="15" fill="rgb(247,216,33)"/><text x="58.3422%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (12 samples, 0.11%)</title><rect x="58.4810%" y="261" width="0.1085%" height="15" fill="rgb(226,26,14)"/><text x="58.7310%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (28 samples, 0.25%)</title><rect x="58.4177%" y="357" width="0.2532%" height="15" fill="rgb(215,49,53)"/><text x="58.6677%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (22 samples, 0.20%)</title><rect x="58.4720%" y="341" width="0.1989%" height="15" fill="rgb(245,162,40)"/><text x="58.7220%" y="351.50"></text></g><g><title>alloc::string::String::push_str (22 samples, 0.20%)</title><rect x="58.4720%" y="325" width="0.1989%" height="15" fill="rgb(229,68,17)"/><text x="58.7220%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (22 samples, 0.20%)</title><rect x="58.4720%" y="309" width="0.1989%" height="15" fill="rgb(213,182,10)"/><text x="58.7220%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (22 samples, 0.20%)</title><rect x="58.4720%" y="293" width="0.1989%" height="15" fill="rgb(245,125,30)"/><text x="58.7220%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (22 samples, 0.20%)</title><rect x="58.4720%" y="277" width="0.1989%" height="15" fill="rgb(232,202,2)"/><text x="58.7220%" y="287.50"></text></g><g><title>alloc::fmt::format (51 samples, 0.46%)</title><rect x="58.2640%" y="405" width="0.4611%" height="15" fill="rgb(237,140,51)"/><text x="58.5140%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (43 samples, 0.39%)</title><rect x="58.3363%" y="389" width="0.3888%" height="15" fill="rgb(236,157,25)"/><text x="58.5863%" y="399.50"></text></g><g><title>core::fmt::write (42 samples, 0.38%)</title><rect x="58.3454%" y="373" width="0.3797%" height="15" fill="rgb(219,209,0)"/><text x="58.5954%" y="383.50"></text></g><g><title>_int_malloc (21 samples, 0.19%)</title><rect x="58.9241%" y="373" width="0.1899%" height="15" fill="rgb(240,116,54)"/><text x="59.1741%" y="383.50"></text></g><g><title>__GI___libc_malloc (27 samples, 0.24%)</title><rect x="58.8879%" y="389" width="0.2441%" height="15" fill="rgb(216,10,36)"/><text x="59.1379%" y="399.50"></text></g><g><title>compiler::generate::generator::gen_body (283 samples, 2.56%)</title><rect x="56.6727%" y="437" width="2.5588%" height="15" fill="rgb(222,72,44)"/><text x="56.9227%" y="447.50">co..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (167 samples, 1.51%)</title><rect x="57.7215%" y="421" width="1.5099%" height="15" fill="rgb(232,159,9)"/><text x="57.9715%" y="431.50"></text></g><g><title>json::value::JsonValue::dump (41 samples, 0.37%)</title><rect x="58.8608%" y="405" width="0.3707%" height="15" fill="rgb(210,39,32)"/><text x="59.1108%" y="415.50"></text></g><g><title>_int_free (12 samples, 0.11%)</title><rect x="59.3942%" y="421" width="0.1085%" height="15" fill="rgb(216,194,45)"/><text x="59.6442%" y="431.50"></text></g><g><title>__GI___libc_free (13 samples, 0.12%)</title><rect x="59.7559%" y="405" width="0.1175%" height="15" fill="rgb(218,18,35)"/><text x="60.0059%" y="415.50"></text></g><g><title>__GI___libc_realloc (84 samples, 0.76%)</title><rect x="59.8915%" y="405" width="0.7595%" height="15" fill="rgb(207,83,51)"/><text x="60.1415%" y="415.50"></text></g><g><title>_int_realloc (69 samples, 0.62%)</title><rect x="60.0271%" y="389" width="0.6239%" height="15" fill="rgb(225,63,43)"/><text x="60.2771%" y="399.50"></text></g><g><title>_int_malloc (39 samples, 0.35%)</title><rect x="60.2984%" y="373" width="0.3526%" height="15" fill="rgb(207,57,36)"/><text x="60.5484%" y="383.50"></text></g><g><title>_int_free (23 samples, 0.21%)</title><rect x="60.7233%" y="405" width="0.2080%" height="15" fill="rgb(216,99,33)"/><text x="60.9733%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (13 samples, 0.12%)</title><rect x="61.6004%" y="181" width="0.1175%" height="15" fill="rgb(225,42,16)"/><text x="61.8504%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.12%)</title><rect x="61.6004%" y="165" width="0.1175%" height="15" fill="rgb(220,201,45)"/><text x="61.8504%" y="175.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.12%)</title><rect x="61.6004%" y="149" width="0.1175%" height="15" fill="rgb(225,33,4)"/><text x="61.8504%" y="159.50"></text></g><g><title>__rdl_alloc (13 samples, 0.12%)</title><rect x="61.6004%" y="133" width="0.1175%" height="15" fill="rgb(224,33,50)"/><text x="61.8504%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.12%)</title><rect x="61.6004%" y="117" width="0.1175%" height="15" fill="rgb(246,198,51)"/><text x="61.8504%" y="127.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.12%)</title><rect x="61.6004%" y="101" width="0.1175%" height="15" fill="rgb(205,22,4)"/><text x="61.8504%" y="111.50"></text></g><g><title>_int_free (13 samples, 0.12%)</title><rect x="62.0163%" y="69" width="0.1175%" height="15" fill="rgb(206,3,8)"/><text x="62.2663%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (105 samples, 0.95%)</title><rect x="61.5913%" y="197" width="0.9494%" height="15" fill="rgb(251,23,15)"/><text x="61.8413%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (91 samples, 0.82%)</title><rect x="61.7179%" y="181" width="0.8228%" height="15" fill="rgb(252,88,28)"/><text x="61.9679%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (91 samples, 0.82%)</title><rect x="61.7179%" y="165" width="0.8228%" height="15" fill="rgb(212,127,14)"/><text x="61.9679%" y="175.50"></text></g><g><title>alloc::alloc::realloc (91 samples, 0.82%)</title><rect x="61.7179%" y="149" width="0.8228%" height="15" fill="rgb(247,145,37)"/><text x="61.9679%" y="159.50"></text></g><g><title>__rdl_realloc (91 samples, 0.82%)</title><rect x="61.7179%" y="133" width="0.8228%" height="15" fill="rgb(209,117,53)"/><text x="61.9679%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (91 samples, 0.82%)</title><rect x="61.7179%" y="117" width="0.8228%" height="15" fill="rgb(212,90,42)"/><text x="61.9679%" y="127.50"></text></g><g><title>__GI___libc_realloc (88 samples, 0.80%)</title><rect x="61.7450%" y="101" width="0.7957%" height="15" fill="rgb(218,164,37)"/><text x="61.9950%" y="111.50"></text></g><g><title>_int_realloc (73 samples, 0.66%)</title><rect x="61.8807%" y="85" width="0.6600%" height="15" fill="rgb(246,65,34)"/><text x="62.1307%" y="95.50"></text></g><g><title>_int_malloc (45 samples, 0.41%)</title><rect x="62.1338%" y="69" width="0.4069%" height="15" fill="rgb(231,100,33)"/><text x="62.3838%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (115 samples, 1.04%)</title><rect x="61.5280%" y="213" width="1.0398%" height="15" fill="rgb(228,126,14)"/><text x="61.7780%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (123 samples, 1.11%)</title><rect x="61.4738%" y="261" width="1.1121%" height="15" fill="rgb(215,173,21)"/><text x="61.7238%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (120 samples, 1.08%)</title><rect x="61.5009%" y="245" width="1.0850%" height="15" fill="rgb(210,6,40)"/><text x="61.7509%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (120 samples, 1.08%)</title><rect x="61.5009%" y="229" width="1.0850%" height="15" fill="rgb(212,48,18)"/><text x="61.7509%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.15%)</title><rect x="62.5859%" y="261" width="0.1537%" height="15" fill="rgb(230,214,11)"/><text x="62.8359%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (168 samples, 1.52%)</title><rect x="61.2297%" y="357" width="1.5190%" height="15" fill="rgb(254,105,39)"/><text x="61.4797%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (146 samples, 1.32%)</title><rect x="61.4286%" y="341" width="1.3201%" height="15" fill="rgb(245,158,5)"/><text x="61.6786%" y="351.50"></text></g><g><title>alloc::string::String::push_str (146 samples, 1.32%)</title><rect x="61.4286%" y="325" width="1.3201%" height="15" fill="rgb(249,208,11)"/><text x="61.6786%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (146 samples, 1.32%)</title><rect x="61.4286%" y="309" width="1.3201%" height="15" fill="rgb(210,39,28)"/><text x="61.6786%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (146 samples, 1.32%)</title><rect x="61.4286%" y="293" width="1.3201%" height="15" fill="rgb(211,56,53)"/><text x="61.6786%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (146 samples, 1.32%)</title><rect x="61.4286%" y="277" width="1.3201%" height="15" fill="rgb(226,201,30)"/><text x="61.6786%" y="287.50"></text></g><g><title>alloc::fmt::format (214 samples, 1.93%)</title><rect x="60.9313%" y="405" width="1.9349%" height="15" fill="rgb(239,101,34)"/><text x="61.1813%" y="415.50">a..</text></g><g><title>core::fmt::Write::write_fmt (205 samples, 1.85%)</title><rect x="61.0127%" y="389" width="1.8535%" height="15" fill="rgb(226,209,5)"/><text x="61.2627%" y="399.50">c..</text></g><g><title>core::fmt::write (197 samples, 1.78%)</title><rect x="61.0850%" y="373" width="1.7812%" height="15" fill="rgb(250,105,47)"/><text x="61.3350%" y="383.50">c..</text></g><g><title>_int_free (21 samples, 0.19%)</title><rect x="63.8608%" y="389" width="0.1899%" height="15" fill="rgb(230,72,3)"/><text x="64.1108%" y="399.50"></text></g><g><title>__GI___libc_malloc (27 samples, 0.24%)</title><rect x="64.1682%" y="373" width="0.2441%" height="15" fill="rgb(232,218,39)"/><text x="64.4182%" y="383.50"></text></g><g><title>compiler::generate::templates::guard (552 samples, 4.99%)</title><rect x="59.5118%" y="421" width="4.9910%" height="15" fill="rgb(248,166,6)"/><text x="59.7618%" y="431.50">compil..</text></g><g><title>compiler::generate::templates::escape_path (181 samples, 1.64%)</title><rect x="62.8662%" y="405" width="1.6365%" height="15" fill="rgb(247,89,20)"/><text x="63.1162%" y="415.50"></text></g><g><title>compiler::generate::templates::escape_path::{{closure}} (50 samples, 0.45%)</title><rect x="64.0506%" y="389" width="0.4521%" height="15" fill="rgb(248,130,54)"/><text x="64.3006%" y="399.50"></text></g><g><title>compiler::generate::templates::expression (580 samples, 5.24%)</title><rect x="59.2676%" y="437" width="5.2441%" height="15" fill="rgb(234,196,4)"/><text x="59.5176%" y="447.50">compil..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (174 samples, 1.57%)</title><rect x="64.8644%" y="421" width="1.5732%" height="15" fill="rgb(250,143,31)"/><text x="65.1144%" y="431.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.20%)</title><rect x="66.4738%" y="421" width="0.1989%" height="15" fill="rgb(211,110,34)"/><text x="66.7238%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (31 samples, 0.28%)</title><rect x="66.7450%" y="421" width="0.2803%" height="15" fill="rgb(215,124,48)"/><text x="66.9950%" y="431.50"></text></g><g><title>alloc::fmt::format (16 samples, 0.14%)</title><rect x="67.0976%" y="421" width="0.1447%" height="15" fill="rgb(216,46,13)"/><text x="67.3476%" y="431.50"></text></g><g><title>compiler::generate::templates::indent (345 samples, 3.12%)</title><rect x="64.5118%" y="437" width="3.1193%" height="15" fill="rgb(205,184,25)"/><text x="64.7618%" y="447.50">com..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (43 samples, 0.39%)</title><rect x="67.2423%" y="421" width="0.3888%" height="15" fill="rgb(228,1,10)"/><text x="67.4923%" y="431.50"></text></g><g><title>__GI___libc_realloc (40 samples, 0.36%)</title><rect x="67.2694%" y="405" width="0.3617%" height="15" fill="rgb(213,116,27)"/><text x="67.5194%" y="415.50"></text></g><g><title>_int_realloc (38 samples, 0.34%)</title><rect x="67.2875%" y="389" width="0.3436%" height="15" fill="rgb(241,95,50)"/><text x="67.5375%" y="399.50"></text></g><g><title>_int_malloc (26 samples, 0.24%)</title><rect x="67.3960%" y="373" width="0.2351%" height="15" fill="rgb(238,48,32)"/><text x="67.6460%" y="383.50"></text></g><g><title>malloc_consolidate (12 samples, 0.11%)</title><rect x="67.8752%" y="389" width="0.1085%" height="15" fill="rgb(235,113,49)"/><text x="68.1252%" y="399.50"></text></g><g><title>_int_malloc (28 samples, 0.25%)</title><rect x="67.7396%" y="405" width="0.2532%" height="15" fill="rgb(205,127,43)"/><text x="67.9896%" y="415.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.30%)</title><rect x="67.7215%" y="421" width="0.2984%" height="15" fill="rgb(250,162,2)"/><text x="67.9715%" y="431.50"></text></g><g><title>compiler::generate::generator::gen_body (1,776 samples, 16.06%)</title><rect x="53.1917%" y="469" width="16.0579%" height="15" fill="rgb(220,13,41)"/><text x="53.4417%" y="479.50">compiler::generate::gener..</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (1,667 samples, 15.07%)</title><rect x="54.1772%" y="453" width="15.0723%" height="15" fill="rgb(249,221,25)"/><text x="54.4272%" y="463.50">compiler::generate::gen..</text></g><g><title>json::value::JsonValue::dump (171 samples, 1.55%)</title><rect x="67.7034%" y="437" width="1.5461%" height="15" fill="rgb(215,208,19)"/><text x="67.9534%" y="447.50"></text></g><g><title>json::codegen::Generator::write_json (136 samples, 1.23%)</title><rect x="68.0199%" y="421" width="1.2297%" height="15" fill="rgb(236,175,2)"/><text x="68.2699%" y="431.50"></text></g><g><title>json::codegen::Generator::write_string_complex (124 samples, 1.12%)</title><rect x="68.1284%" y="405" width="1.1212%" height="15" fill="rgb(241,52,2)"/><text x="68.3784%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.12%)</title><rect x="69.1320%" y="389" width="0.1175%" height="15" fill="rgb(248,140,14)"/><text x="69.3820%" y="399.50"></text></g><g><title>compiler::generate::templates::escape_path (16 samples, 0.14%)</title><rect x="69.2495%" y="469" width="0.1447%" height="15" fill="rgb(253,22,42)"/><text x="69.4995%" y="479.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.13%)</title><rect x="69.5208%" y="437" width="0.1266%" height="15" fill="rgb(234,61,47)"/><text x="69.7708%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (25 samples, 0.23%)</title><rect x="69.9277%" y="229" width="0.2260%" height="15" fill="rgb(208,226,15)"/><text x="70.1777%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (22 samples, 0.20%)</title><rect x="69.9548%" y="213" width="0.1989%" height="15" fill="rgb(217,221,4)"/><text x="70.2048%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (22 samples, 0.20%)</title><rect x="69.9548%" y="197" width="0.1989%" height="15" fill="rgb(212,174,34)"/><text x="70.2048%" y="207.50"></text></g><g><title>alloc::alloc::realloc (22 samples, 0.20%)</title><rect x="69.9548%" y="181" width="0.1989%" height="15" fill="rgb(253,83,4)"/><text x="70.2048%" y="191.50"></text></g><g><title>__rdl_realloc (22 samples, 0.20%)</title><rect x="69.9548%" y="165" width="0.1989%" height="15" fill="rgb(250,195,49)"/><text x="70.2048%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (22 samples, 0.20%)</title><rect x="69.9548%" y="149" width="0.1989%" height="15" fill="rgb(241,192,25)"/><text x="70.2048%" y="159.50"></text></g><g><title>__GI___libc_realloc (22 samples, 0.20%)</title><rect x="69.9548%" y="133" width="0.1989%" height="15" fill="rgb(208,124,10)"/><text x="70.2048%" y="143.50"></text></g><g><title>_int_realloc (18 samples, 0.16%)</title><rect x="69.9910%" y="117" width="0.1627%" height="15" fill="rgb(222,33,0)"/><text x="70.2410%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (29 samples, 0.26%)</title><rect x="69.9096%" y="293" width="0.2622%" height="15" fill="rgb(234,209,28)"/><text x="70.1596%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (29 samples, 0.26%)</title><rect x="69.9096%" y="277" width="0.2622%" height="15" fill="rgb(224,11,23)"/><text x="70.1596%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (29 samples, 0.26%)</title><rect x="69.9096%" y="261" width="0.2622%" height="15" fill="rgb(232,99,1)"/><text x="70.1596%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.24%)</title><rect x="69.9277%" y="245" width="0.2441%" height="15" fill="rgb(237,95,45)"/><text x="70.1777%" y="255.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (40 samples, 0.36%)</title><rect x="69.8644%" y="389" width="0.3617%" height="15" fill="rgb(208,109,11)"/><text x="70.1144%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (36 samples, 0.33%)</title><rect x="69.9005%" y="373" width="0.3255%" height="15" fill="rgb(216,190,48)"/><text x="70.1505%" y="383.50"></text></g><g><title>alloc::string::String::push_str (36 samples, 0.33%)</title><rect x="69.9005%" y="357" width="0.3255%" height="15" fill="rgb(251,171,36)"/><text x="70.1505%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (36 samples, 0.33%)</title><rect x="69.9005%" y="341" width="0.3255%" height="15" fill="rgb(230,62,22)"/><text x="70.1505%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (36 samples, 0.33%)</title><rect x="69.9005%" y="325" width="0.3255%" height="15" fill="rgb(225,114,35)"/><text x="70.1505%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (36 samples, 0.33%)</title><rect x="69.9005%" y="309" width="0.3255%" height="15" fill="rgb(215,118,42)"/><text x="70.1505%" y="319.50"></text></g><g><title>alloc::fmt::format (58 samples, 0.52%)</title><rect x="69.7649%" y="437" width="0.5244%" height="15" fill="rgb(243,119,21)"/><text x="70.0149%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (55 samples, 0.50%)</title><rect x="69.7920%" y="421" width="0.4973%" height="15" fill="rgb(252,177,53)"/><text x="70.0420%" y="431.50"></text></g><g><title>core::fmt::write (54 samples, 0.49%)</title><rect x="69.8011%" y="405" width="0.4882%" height="15" fill="rgb(237,209,29)"/><text x="70.0511%" y="415.50"></text></g><g><title>compiler::generate::templates::expression (136 samples, 1.23%)</title><rect x="69.3942%" y="469" width="1.2297%" height="15" fill="rgb(212,65,23)"/><text x="69.6442%" y="479.50"></text></g><g><title>compiler::generate::templates::guard (129 samples, 1.17%)</title><rect x="69.4575%" y="453" width="1.1664%" height="15" fill="rgb(230,222,46)"/><text x="69.7075%" y="463.50"></text></g><g><title>compiler::generate::templates::escape_path (37 samples, 0.33%)</title><rect x="70.2893%" y="437" width="0.3345%" height="15" fill="rgb(215,135,32)"/><text x="70.5393%" y="447.50"></text></g><g><title>compiler::generate::templates::escape_path::{{closure}} (15 samples, 0.14%)</title><rect x="70.4882%" y="421" width="0.1356%" height="15" fill="rgb(246,101,22)"/><text x="70.7382%" y="431.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (284 samples, 2.57%)</title><rect x="71.3201%" y="453" width="2.5678%" height="15" fill="rgb(206,107,13)"/><text x="71.5701%" y="463.50">&lt;c..</text></g><g><title>__memcpy_avx_unaligned (17 samples, 0.15%)</title><rect x="73.9964%" y="453" width="0.1537%" height="15" fill="rgb(250,100,44)"/><text x="74.2464%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (44 samples, 0.40%)</title><rect x="74.1501%" y="453" width="0.3978%" height="15" fill="rgb(231,147,38)"/><text x="74.4001%" y="463.50"></text></g><g><title>alloc::fmt::format (12 samples, 0.11%)</title><rect x="74.6112%" y="453" width="0.1085%" height="15" fill="rgb(229,8,40)"/><text x="74.8612%" y="463.50"></text></g><g><title>compiler::generate::templates::indent (487 samples, 4.40%)</title><rect x="70.6239%" y="469" width="4.4033%" height="15" fill="rgb(221,135,30)"/><text x="70.8739%" y="479.50">compi..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (34 samples, 0.31%)</title><rect x="74.7197%" y="453" width="0.3074%" height="15" fill="rgb(249,193,18)"/><text x="74.9697%" y="463.50"></text></g><g><title>__GI___libc_realloc (32 samples, 0.29%)</title><rect x="74.7378%" y="437" width="0.2893%" height="15" fill="rgb(209,133,39)"/><text x="74.9878%" y="447.50"></text></g><g><title>_int_realloc (29 samples, 0.26%)</title><rect x="74.7649%" y="421" width="0.2622%" height="15" fill="rgb(232,100,14)"/><text x="75.0149%" y="431.50"></text></g><g><title>_int_malloc (21 samples, 0.19%)</title><rect x="74.8373%" y="405" width="0.1899%" height="15" fill="rgb(224,185,1)"/><text x="75.0873%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned (12 samples, 0.11%)</title><rect x="76.3382%" y="421" width="0.1085%" height="15" fill="rgb(223,139,8)"/><text x="76.5882%" y="431.50"></text></g><g><title>compiler::generate::generator::gen_body (2,813 samples, 25.43%)</title><rect x="51.0579%" y="501" width="25.4340%" height="15" fill="rgb(232,213,38)"/><text x="51.3079%" y="511.50">compiler::generate::generator::gen_body</text></g><g><title>compiler::generate::generator::gen_body::{{closure}} (2,751 samples, 24.87%)</title><rect x="51.6184%" y="485" width="24.8734%" height="15" fill="rgb(207,94,22)"/><text x="51.8684%" y="495.50">compiler::generate::generator::gen_body:..</text></g><g><title>json::value::JsonValue::dump (154 samples, 1.39%)</title><rect x="75.0995%" y="469" width="1.3924%" height="15" fill="rgb(219,183,54)"/><text x="75.3495%" y="479.50"></text></g><g><title>json::codegen::Generator::write_json (143 samples, 1.29%)</title><rect x="75.1989%" y="453" width="1.2929%" height="15" fill="rgb(216,185,54)"/><text x="75.4489%" y="463.50"></text></g><g><title>json::codegen::Generator::write_string_complex (138 samples, 1.25%)</title><rect x="75.2441%" y="437" width="1.2477%" height="15" fill="rgb(254,217,39)"/><text x="75.4941%" y="447.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (232 samples, 2.10%)</title><rect x="76.7722%" y="485" width="2.0976%" height="15" fill="rgb(240,178,23)"/><text x="77.0222%" y="495.50">&lt;..</text></g><g><title>__memmove_avx_unaligned_erms (50 samples, 0.45%)</title><rect x="78.9964%" y="485" width="0.4521%" height="15" fill="rgb(218,11,47)"/><text x="79.2464%" y="495.50"></text></g><g><title>compiler::generate::templates::indent (343 samples, 3.10%)</title><rect x="76.4919%" y="501" width="3.1013%" height="15" fill="rgb(218,51,51)"/><text x="76.7419%" y="511.50">com..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (14 samples, 0.13%)</title><rect x="79.4665%" y="485" width="0.1266%" height="15" fill="rgb(238,126,27)"/><text x="79.7165%" y="495.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.11%)</title><rect x="79.4846%" y="469" width="0.1085%" height="15" fill="rgb(249,202,22)"/><text x="79.7346%" y="479.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (27 samples, 0.24%)</title><rect x="92.3327%" y="453" width="0.2441%" height="15" fill="rgb(254,195,49)"/><text x="92.5827%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (111 samples, 1.00%)</title><rect x="91.6456%" y="469" width="1.0036%" height="15" fill="rgb(208,123,14)"/><text x="91.8956%" y="479.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;&amp;str,X&gt; as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (32 samples, 0.29%)</title><rect x="92.6492%" y="469" width="0.2893%" height="15" fill="rgb(224,200,8)"/><text x="92.8992%" y="479.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;&amp;str,X&gt; as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (17 samples, 0.15%)</title><rect x="92.9385%" y="469" width="0.1537%" height="15" fill="rgb(217,61,36)"/><text x="93.1885%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (93 samples, 0.84%)</title><rect x="93.1646%" y="469" width="0.8409%" height="15" fill="rgb(206,35,45)"/><text x="93.4146%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (23 samples, 0.21%)</title><rect x="94.2134%" y="453" width="0.2080%" height="15" fill="rgb(217,65,33)"/><text x="94.4634%" y="463.50"></text></g><g><title>&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (1,311 samples, 11.85%)</title><rect x="82.6040%" y="485" width="11.8535%" height="15" fill="rgb(222,158,48)"/><text x="82.8540%" y="495.50">&lt;F as nom::interna..</text></g><g><title>nom::sequence::delimited::{{closure}} (50 samples, 0.45%)</title><rect x="94.0054%" y="469" width="0.4521%" height="15" fill="rgb(254,2,54)"/><text x="94.2554%" y="479.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;&amp;str,X&gt; as nom::traits::Slice&lt;core::ops::range::RangeFrom&lt;usize&gt;&gt;&gt;::slice (135 samples, 1.22%)</title><rect x="94.4575%" y="485" width="1.2206%" height="15" fill="rgb(250,143,38)"/><text x="94.7075%" y="495.50"></text></g><g><title>memchr::x86::avx::memchr (88 samples, 0.80%)</title><rect x="94.8825%" y="469" width="0.7957%" height="15" fill="rgb(248,25,0)"/><text x="95.1325%" y="479.50"></text></g><g><title>&lt;nom_locate::LocatedSpan&lt;&amp;str,X&gt; as nom::traits::Slice&lt;core::ops::range::RangeTo&lt;usize&gt;&gt;&gt;::slice (12 samples, 0.11%)</title><rect x="95.6781%" y="485" width="0.1085%" height="15" fill="rgb(206,152,27)"/><text x="95.9281%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (73 samples, 0.66%)</title><rect x="95.8137%" y="485" width="0.6600%" height="15" fill="rgb(240,77,30)"/><text x="96.0637%" y="495.50"></text></g><g><title>aho_corasick::automaton::Automaton::leftmost_find_at_no_state (259 samples, 2.34%)</title><rect x="96.4738%" y="485" width="2.3418%" height="15" fill="rgb(231,5,3)"/><text x="96.7238%" y="495.50">a..</text></g><g><title>&lt;aho_corasick::prefilter::Packed as aho_corasick::prefilter::Prefilter&gt;::next_candidate (255 samples, 2.31%)</title><rect x="96.5099%" y="469" width="2.3056%" height="15" fill="rgb(207,226,32)"/><text x="96.7599%" y="479.50">&lt;..</text></g><g><title>aho_corasick::packed::teddy::runtime::TeddySlim1Mask256::find_at (235 samples, 2.12%)</title><rect x="96.6908%" y="453" width="2.1248%" height="15" fill="rgb(222,207,47)"/><text x="96.9408%" y="463.50">a..</text></g><g><title>__memmove_avx_unaligned_erms (20 samples, 0.18%)</title><rect x="98.8788%" y="437" width="0.1808%" height="15" fill="rgb(229,115,45)"/><text x="99.1288%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (42 samples, 0.38%)</title><rect x="98.8156%" y="485" width="0.3797%" height="15" fill="rgb(224,191,6)"/><text x="99.0656%" y="495.50"></text></g><g><title>__GI___libc_realloc (37 samples, 0.33%)</title><rect x="98.8608%" y="469" width="0.3345%" height="15" fill="rgb(230,227,24)"/><text x="99.1108%" y="479.50"></text></g><g><title>_int_realloc (35 samples, 0.32%)</title><rect x="98.8788%" y="453" width="0.3165%" height="15" fill="rgb(228,80,19)"/><text x="99.1288%" y="463.50"></text></g><g><title>compiler::parse::tokens::tokens (2,175 samples, 19.67%)</title><rect x="79.5931%" y="501" width="19.6655%" height="15" fill="rgb(247,229,0)"/><text x="79.8431%" y="511.50">compiler::parse::tokens::tokens</text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.16%)</title><rect x="99.4394%" y="485" width="0.1627%" height="15" fill="rgb(237,194,15)"/><text x="99.6894%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.14%)</title><rect x="99.6564%" y="469" width="0.1447%" height="15" fill="rgb(219,203,20)"/><text x="99.9064%" y="479.50"></text></g><g><title>compiler::parse::tree::resolve_expression_paths (29 samples, 0.26%)</title><rect x="99.6022%" y="485" width="0.2622%" height="15" fill="rgb(234,128,8)"/><text x="99.8522%" y="495.50"></text></g><g><title>compiler::parse::tree::tree (73 samples, 0.66%)</title><rect x="99.2586%" y="501" width="0.6600%" height="15" fill="rgb(248,202,8)"/><text x="99.5086%" y="511.50"></text></g><g><title>__libc_start_main (5,489 samples, 49.63%)</title><rect x="50.2984%" y="581" width="49.6293%" height="15" fill="rgb(206,104,37)"/><text x="50.5484%" y="591.50">__libc_start_main</text></g><g><title>main (5,489 samples, 49.63%)</title><rect x="50.2984%" y="565" width="49.6293%" height="15" fill="rgb(223,8,27)"/><text x="50.5484%" y="575.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,489 samples, 49.63%)</title><rect x="50.2984%" y="549" width="49.6293%" height="15" fill="rgb(216,217,28)"/><text x="50.5484%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench::main (5,489 samples, 49.63%)</title><rect x="50.2984%" y="533" width="49.6293%" height="15" fill="rgb(249,199,1)"/><text x="50.5484%" y="543.50">bench::main</text></g><g><title>compiler::compile (5,489 samples, 49.63%)</title><rect x="50.2984%" y="517" width="49.6293%" height="15" fill="rgb(240,85,17)"/><text x="50.5484%" y="527.50">compiler::compile</text></g><g><title>_start (5,490 samples, 49.64%)</title><rect x="50.2984%" y="597" width="49.6383%" height="15" fill="rgb(206,108,45)"/><text x="50.5484%" y="607.50">_start</text></g><g><title>bench (11,054 samples, 99.95%)</title><rect x="0.0000%" y="613" width="99.9458%" height="15" fill="rgb(245,210,41)"/><text x="0.2500%" y="623.50">bench</text></g><g><title>all (11,060 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(206,13,37)"/><text x="0.2500%" y="639.50"></text></g></svg></svg>